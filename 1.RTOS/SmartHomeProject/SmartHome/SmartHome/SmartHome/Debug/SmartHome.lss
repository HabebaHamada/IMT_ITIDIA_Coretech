
SmartHome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000024a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000094  00800060  000024a0  00002534  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000073b  008000f4  008000f4  000025c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000025c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000025f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000538  00000000  00000000  00002634  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000059fd  00000000  00000000  00002b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000151b  00000000  00000000  00008569  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003246  00000000  00000000  00009a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000eac  00000000  00000000  0000cccc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001938  00000000  00000000  0000db78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004ea4  00000000  00000000  0000f4b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004f0  00000000  00000000  00014354  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 e3 01 	jmp	0x3c6	; 0x3c6 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ea       	ldi	r30, 0xA0	; 160
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 3f       	cpi	r26, 0xF4	; 244
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	28 e0       	ldi	r18, 0x08	; 8
      78:	a4 ef       	ldi	r26, 0xF4	; 244
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 32       	cpi	r26, 0x2F	; 47
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <main>
      8a:	0c 94 4e 12 	jmp	0x249c	; 0x249c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_Vid_Init>:
	while(GET_BIT(ADCSRA,ADCSRA_ADIF) == 0);

	SET_BIT(ADCSRA,ADCSRA_ADIF);

	return ADCL;
}
      92:	87 b1       	in	r24, 0x07	; 7
      94:	8f 7b       	andi	r24, 0xBF	; 191
      96:	87 b9       	out	0x07, r24	; 7
      98:	87 b1       	in	r24, 0x07	; 7
      9a:	8f 77       	andi	r24, 0x7F	; 127
      9c:	87 b9       	out	0x07, r24	; 7
      9e:	87 b1       	in	r24, 0x07	; 7
      a0:	8f 7d       	andi	r24, 0xDF	; 223
      a2:	87 b9       	out	0x07, r24	; 7
      a4:	86 b1       	in	r24, 0x06	; 6
      a6:	88 7f       	andi	r24, 0xF8	; 248
      a8:	86 b9       	out	0x06, r24	; 6
      aa:	86 b1       	in	r24, 0x06	; 6
      ac:	87 60       	ori	r24, 0x07	; 7
      ae:	86 b9       	out	0x06, r24	; 6
      b0:	86 b1       	in	r24, 0x06	; 6
      b2:	80 68       	ori	r24, 0x80	; 128
      b4:	86 b9       	out	0x06, r24	; 6
      b6:	08 95       	ret

000000b8 <Temp_ADC_read>:


signed int Temp_ADC_read(void)     //Read Analog Value of Temp Sensor
{
	ADMUX=0;                        //use ADC0
      b8:	17 b8       	out	0x07, r1	; 7
	SET_BIT(ADCSRA,4);               // clear flag
      ba:	86 b1       	in	r24, 0x06	; 6
      bc:	80 61       	ori	r24, 0x10	; 16
      be:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,6);               //start conversion bit register
      c0:	86 b1       	in	r24, 0x06	; 6
      c2:	80 64       	ori	r24, 0x40	; 64
      c4:	86 b9       	out	0x06, r24	; 6
	while(GET_BIT(ADCSRA,4)==0){ }; //wait for conversion till flag became one
      c6:	34 9b       	sbis	0x06, 4	; 6
      c8:	fe cf       	rjmp	.-4      	; 0xc6 <Temp_ADC_read+0xe>
    return ADCL;
      ca:	84 b1       	in	r24, 0x04	; 4
      cc:	95 b1       	in	r25, 0x05	; 5
}
      ce:	08 95       	ret

000000d0 <CLCD_voidSendCommand>:
	
}

void CLCD_voidClearDisplay()
{
	CLCD_voidSendCommand(0b00000001);	//sending Instruction to clear the whole display
      d0:	cf 93       	push	r28
      d2:	c8 2f       	mov	r28, r24
      d4:	40 e0       	ldi	r20, 0x00	; 0
      d6:	60 e0       	ldi	r22, 0x00	; 0
      d8:	81 e0       	ldi	r24, 0x01	; 1
      da:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_u8WritePinValue>
      de:	40 e0       	ldi	r20, 0x00	; 0
      e0:	60 e0       	ldi	r22, 0x00	; 0
      e2:	82 e0       	ldi	r24, 0x02	; 2
      e4:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_u8WritePinValue>
      e8:	6c 2f       	mov	r22, r28
      ea:	82 e0       	ldi	r24, 0x02	; 2
      ec:	0e 94 99 01 	call	0x332	; 0x332 <DIO_u8WritePortValue>
      f0:	41 e0       	ldi	r20, 0x01	; 1
      f2:	60 e0       	ldi	r22, 0x00	; 0
      f4:	83 e0       	ldi	r24, 0x03	; 3
      f6:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_u8WritePinValue>
      fa:	8f e9       	ldi	r24, 0x9F	; 159
      fc:	9f e0       	ldi	r25, 0x0F	; 15
      fe:	01 97       	sbiw	r24, 0x01	; 1
     100:	f1 f7       	brne	.-4      	; 0xfe <CLCD_voidSendCommand+0x2e>
     102:	00 c0       	rjmp	.+0      	; 0x104 <CLCD_voidSendCommand+0x34>
     104:	00 00       	nop
     106:	40 e0       	ldi	r20, 0x00	; 0
     108:	60 e0       	ldi	r22, 0x00	; 0
     10a:	83 e0       	ldi	r24, 0x03	; 3
     10c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_u8WritePinValue>
     110:	cf 91       	pop	r28
     112:	08 95       	ret

00000114 <CLCD_voidInit>:
     114:	2f ef       	ldi	r18, 0xFF	; 255
     116:	89 ef       	ldi	r24, 0xF9	; 249
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	21 50       	subi	r18, 0x01	; 1
     11c:	80 40       	sbci	r24, 0x00	; 0
     11e:	90 40       	sbci	r25, 0x00	; 0
     120:	e1 f7       	brne	.-8      	; 0x11a <CLCD_voidInit+0x6>
     122:	00 c0       	rjmp	.+0      	; 0x124 <CLCD_voidInit+0x10>
     124:	00 00       	nop
     126:	88 e3       	ldi	r24, 0x38	; 56
     128:	0e 94 68 00 	call	0xd0	; 0xd0 <CLCD_voidSendCommand>
     12c:	8c e0       	ldi	r24, 0x0C	; 12
     12e:	0e 94 68 00 	call	0xd0	; 0xd0 <CLCD_voidSendCommand>
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	0e 94 68 00 	call	0xd0	; 0xd0 <CLCD_voidSendCommand>
     138:	08 95       	ret

0000013a <CLCD_voidSendData>:
     13a:	cf 93       	push	r28
     13c:	c8 2f       	mov	r28, r24
     13e:	41 e0       	ldi	r20, 0x01	; 1
     140:	60 e0       	ldi	r22, 0x00	; 0
     142:	81 e0       	ldi	r24, 0x01	; 1
     144:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_u8WritePinValue>
     148:	40 e0       	ldi	r20, 0x00	; 0
     14a:	60 e0       	ldi	r22, 0x00	; 0
     14c:	82 e0       	ldi	r24, 0x02	; 2
     14e:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_u8WritePinValue>
     152:	6c 2f       	mov	r22, r28
     154:	82 e0       	ldi	r24, 0x02	; 2
     156:	0e 94 99 01 	call	0x332	; 0x332 <DIO_u8WritePortValue>
     15a:	41 e0       	ldi	r20, 0x01	; 1
     15c:	60 e0       	ldi	r22, 0x00	; 0
     15e:	83 e0       	ldi	r24, 0x03	; 3
     160:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_u8WritePinValue>
     164:	8f e9       	ldi	r24, 0x9F	; 159
     166:	9f e0       	ldi	r25, 0x0F	; 15
     168:	01 97       	sbiw	r24, 0x01	; 1
     16a:	f1 f7       	brne	.-4      	; 0x168 <CLCD_voidSendData+0x2e>
     16c:	00 c0       	rjmp	.+0      	; 0x16e <CLCD_voidSendData+0x34>
     16e:	00 00       	nop
     170:	40 e0       	ldi	r20, 0x00	; 0
     172:	60 e0       	ldi	r22, 0x00	; 0
     174:	83 e0       	ldi	r24, 0x03	; 3
     176:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_u8WritePinValue>
     17a:	cf 91       	pop	r28
     17c:	08 95       	ret

0000017e <CLCD_voidSendString>:
     17e:	0f 93       	push	r16
     180:	1f 93       	push	r17
     182:	cf 93       	push	r28
     184:	8c 01       	movw	r16, r24
     186:	c0 e0       	ldi	r28, 0x00	; 0
     188:	03 c0       	rjmp	.+6      	; 0x190 <CLCD_voidSendString+0x12>
     18a:	0e 94 9d 00 	call	0x13a	; 0x13a <CLCD_voidSendData>
     18e:	cf 5f       	subi	r28, 0xFF	; 255
     190:	f8 01       	movw	r30, r16
     192:	ec 0f       	add	r30, r28
     194:	f1 1d       	adc	r31, r1
     196:	80 81       	ld	r24, Z
     198:	81 11       	cpse	r24, r1
     19a:	f7 cf       	rjmp	.-18     	; 0x18a <CLCD_voidSendString+0xc>
     19c:	cf 91       	pop	r28
     19e:	1f 91       	pop	r17
     1a0:	0f 91       	pop	r16
     1a2:	08 95       	ret

000001a4 <CLCD_voidSetCursor>:
     1a4:	cf 93       	push	r28
     1a6:	df 93       	push	r29
     1a8:	1f 92       	push	r1
     1aa:	cd b7       	in	r28, 0x3d	; 61
     1ac:	de b7       	in	r29, 0x3e	; 62
     1ae:	81 30       	cpi	r24, 0x01	; 1
     1b0:	19 f4       	brne	.+6      	; 0x1b8 <CLCD_voidSetCursor+0x14>
     1b2:	61 58       	subi	r22, 0x81	; 129
     1b4:	69 83       	std	Y+1, r22	; 0x01
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <CLCD_voidSetCursor+0x1c>
     1b8:	82 30       	cpi	r24, 0x02	; 2
     1ba:	11 f4       	brne	.+4      	; 0x1c0 <CLCD_voidSetCursor+0x1c>
     1bc:	61 54       	subi	r22, 0x41	; 65
     1be:	69 83       	std	Y+1, r22	; 0x01
     1c0:	89 81       	ldd	r24, Y+1	; 0x01
     1c2:	0e 94 68 00 	call	0xd0	; 0xd0 <CLCD_voidSendCommand>
     1c6:	0f 90       	pop	r0
     1c8:	df 91       	pop	r29
     1ca:	cf 91       	pop	r28
     1cc:	08 95       	ret

000001ce <CLCD2_voidSendCommand>:
     1ce:	cf 93       	push	r28
     1d0:	c8 2f       	mov	r28, r24
     1d2:	40 e0       	ldi	r20, 0x00	; 0
     1d4:	60 e0       	ldi	r22, 0x00	; 0
     1d6:	84 e0       	ldi	r24, 0x04	; 4
     1d8:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_u8WritePinValue>
     1dc:	40 e0       	ldi	r20, 0x00	; 0
     1de:	60 e0       	ldi	r22, 0x00	; 0
     1e0:	85 e0       	ldi	r24, 0x05	; 5
     1e2:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_u8WritePinValue>
     1e6:	6c 2f       	mov	r22, r28
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	0e 94 99 01 	call	0x332	; 0x332 <DIO_u8WritePortValue>
     1ee:	41 e0       	ldi	r20, 0x01	; 1
     1f0:	60 e0       	ldi	r22, 0x00	; 0
     1f2:	86 e0       	ldi	r24, 0x06	; 6
     1f4:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_u8WritePinValue>
     1f8:	8f e9       	ldi	r24, 0x9F	; 159
     1fa:	9f e0       	ldi	r25, 0x0F	; 15
     1fc:	01 97       	sbiw	r24, 0x01	; 1
     1fe:	f1 f7       	brne	.-4      	; 0x1fc <CLCD2_voidSendCommand+0x2e>
     200:	00 c0       	rjmp	.+0      	; 0x202 <CLCD2_voidSendCommand+0x34>
     202:	00 00       	nop
     204:	40 e0       	ldi	r20, 0x00	; 0
     206:	60 e0       	ldi	r22, 0x00	; 0
     208:	86 e0       	ldi	r24, 0x06	; 6
     20a:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_u8WritePinValue>
     20e:	cf 91       	pop	r28
     210:	08 95       	ret

00000212 <CLCD2_voidInit>:
     212:	2f ef       	ldi	r18, 0xFF	; 255
     214:	89 ef       	ldi	r24, 0xF9	; 249
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	21 50       	subi	r18, 0x01	; 1
     21a:	80 40       	sbci	r24, 0x00	; 0
     21c:	90 40       	sbci	r25, 0x00	; 0
     21e:	e1 f7       	brne	.-8      	; 0x218 <CLCD2_voidInit+0x6>
     220:	00 c0       	rjmp	.+0      	; 0x222 <CLCD2_voidInit+0x10>
     222:	00 00       	nop
     224:	88 e3       	ldi	r24, 0x38	; 56
     226:	0e 94 e7 00 	call	0x1ce	; 0x1ce <CLCD2_voidSendCommand>
     22a:	8c e0       	ldi	r24, 0x0C	; 12
     22c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <CLCD2_voidSendCommand>
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	0e 94 e7 00 	call	0x1ce	; 0x1ce <CLCD2_voidSendCommand>
     236:	08 95       	ret

00000238 <CLCD2_voidSendData>:
     238:	cf 93       	push	r28
     23a:	c8 2f       	mov	r28, r24
     23c:	41 e0       	ldi	r20, 0x01	; 1
     23e:	60 e0       	ldi	r22, 0x00	; 0
     240:	84 e0       	ldi	r24, 0x04	; 4
     242:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_u8WritePinValue>
     246:	40 e0       	ldi	r20, 0x00	; 0
     248:	60 e0       	ldi	r22, 0x00	; 0
     24a:	85 e0       	ldi	r24, 0x05	; 5
     24c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_u8WritePinValue>
     250:	6c 2f       	mov	r22, r28
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	0e 94 99 01 	call	0x332	; 0x332 <DIO_u8WritePortValue>
     258:	41 e0       	ldi	r20, 0x01	; 1
     25a:	60 e0       	ldi	r22, 0x00	; 0
     25c:	86 e0       	ldi	r24, 0x06	; 6
     25e:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_u8WritePinValue>
     262:	8f e9       	ldi	r24, 0x9F	; 159
     264:	9f e0       	ldi	r25, 0x0F	; 15
     266:	01 97       	sbiw	r24, 0x01	; 1
     268:	f1 f7       	brne	.-4      	; 0x266 <CLCD2_voidSendData+0x2e>
     26a:	00 c0       	rjmp	.+0      	; 0x26c <CLCD2_voidSendData+0x34>
     26c:	00 00       	nop
     26e:	40 e0       	ldi	r20, 0x00	; 0
     270:	60 e0       	ldi	r22, 0x00	; 0
     272:	86 e0       	ldi	r24, 0x06	; 6
     274:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_u8WritePinValue>
     278:	cf 91       	pop	r28
     27a:	08 95       	ret

0000027c <CLCD2_voidSendString>:
     27c:	0f 93       	push	r16
     27e:	1f 93       	push	r17
     280:	cf 93       	push	r28
     282:	8c 01       	movw	r16, r24
     284:	c0 e0       	ldi	r28, 0x00	; 0
     286:	03 c0       	rjmp	.+6      	; 0x28e <CLCD2_voidSendString+0x12>
     288:	0e 94 1c 01 	call	0x238	; 0x238 <CLCD2_voidSendData>
     28c:	cf 5f       	subi	r28, 0xFF	; 255
     28e:	f8 01       	movw	r30, r16
     290:	ec 0f       	add	r30, r28
     292:	f1 1d       	adc	r31, r1
     294:	80 81       	ld	r24, Z
     296:	81 11       	cpse	r24, r1
     298:	f7 cf       	rjmp	.-18     	; 0x288 <CLCD2_voidSendString+0xc>
     29a:	cf 91       	pop	r28
     29c:	1f 91       	pop	r17
     29e:	0f 91       	pop	r16
     2a0:	08 95       	ret

000002a2 <CLCD2_voidClearDisplay>:
}

void CLCD2_voidClearDisplay()
{
	CLCD2_voidSendCommand(0b00000001);	//sending Instruction to clear the whole display
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	0e 94 e7 00 	call	0x1ce	; 0x1ce <CLCD2_voidSendCommand>
     2a8:	08 95       	ret

000002aa <CLCD2_WriteNumber>:
}

void CLCD2_WriteNumber(int number)
{
     2aa:	cf 93       	push	r28
     2ac:	df 93       	push	r29
     2ae:	cd b7       	in	r28, 0x3d	; 61
     2b0:	de b7       	in	r29, 0x3e	; 62
     2b2:	2a 97       	sbiw	r28, 0x0a	; 10
     2b4:	0f b6       	in	r0, 0x3f	; 63
     2b6:	f8 94       	cli
     2b8:	de bf       	out	0x3e, r29	; 62
     2ba:	0f be       	out	0x3f, r0	; 63
     2bc:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	itoa(number, buffer, 10);
     2be:	4a e0       	ldi	r20, 0x0A	; 10
     2c0:	50 e0       	ldi	r21, 0x00	; 0
     2c2:	be 01       	movw	r22, r28
     2c4:	6f 5f       	subi	r22, 0xFF	; 255
     2c6:	7f 4f       	sbci	r23, 0xFF	; 255
     2c8:	0e 94 0e 12 	call	0x241c	; 0x241c <itoa>
	CLCD2_voidSendString(buffer);
     2cc:	ce 01       	movw	r24, r28
     2ce:	01 96       	adiw	r24, 0x01	; 1
     2d0:	0e 94 3e 01 	call	0x27c	; 0x27c <CLCD2_voidSendString>
     2d4:	2a 96       	adiw	r28, 0x0a	; 10
     2d6:	0f b6       	in	r0, 0x3f	; 63
     2d8:	f8 94       	cli
     2da:	de bf       	out	0x3e, r29	; 62
     2dc:	0f be       	out	0x3f, r0	; 63
     2de:	cd bf       	out	0x3d, r28	; 61
     2e0:	df 91       	pop	r29
     2e2:	cf 91       	pop	r28
     2e4:	08 95       	ret

000002e6 <DIO_u8WritePinValue>:

		                                                       
u8  DIO_u8WritePinValue(u8 Copy_u8Pin, u8 Copy_u8Port, u8 Copy_u8Value)
{	
	u8 Local_u8ErrorState=FALSE;
	if ((Copy_u8Pin < DIO_u8NumOfPins)&&(Copy_u8Port < DIO_u8NumOfPorts))
     2e6:	88 30       	cpi	r24, 0x08	; 8
     2e8:	00 f5       	brcc	.+64     	; 0x32a <DIO_u8WritePinValue+0x44>
     2ea:	64 30       	cpi	r22, 0x04	; 4
     2ec:	00 f5       	brcc	.+64     	; 0x32e <DIO_u8WritePinValue+0x48>
	{
	   ASSIGN_BIT(*DIO_u8ArrPORT[Copy_u8Port],Copy_u8Pin, Copy_u8Value);
     2ee:	e6 2f       	mov	r30, r22
     2f0:	f0 e0       	ldi	r31, 0x00	; 0
     2f2:	ee 0f       	add	r30, r30
     2f4:	ff 1f       	adc	r31, r31
     2f6:	e5 59       	subi	r30, 0x95	; 149
     2f8:	ff 4f       	sbci	r31, 0xFF	; 255
     2fa:	01 90       	ld	r0, Z+
     2fc:	f0 81       	ld	r31, Z
     2fe:	e0 2d       	mov	r30, r0
     300:	90 81       	ld	r25, Z
     302:	21 e0       	ldi	r18, 0x01	; 1
     304:	30 e0       	ldi	r19, 0x00	; 0
     306:	08 2e       	mov	r0, r24
     308:	02 c0       	rjmp	.+4      	; 0x30e <DIO_u8WritePinValue+0x28>
     30a:	22 0f       	add	r18, r18
     30c:	33 1f       	adc	r19, r19
     30e:	0a 94       	dec	r0
     310:	e2 f7       	brpl	.-8      	; 0x30a <DIO_u8WritePinValue+0x24>
     312:	50 e0       	ldi	r21, 0x00	; 0
     314:	02 c0       	rjmp	.+4      	; 0x31a <DIO_u8WritePinValue+0x34>
     316:	44 0f       	add	r20, r20
     318:	55 1f       	adc	r21, r21
     31a:	8a 95       	dec	r24
     31c:	e2 f7       	brpl	.-8      	; 0x316 <DIO_u8WritePinValue+0x30>
     31e:	20 95       	com	r18
     320:	29 23       	and	r18, r25
     322:	42 2b       	or	r20, r18
     324:	40 83       	st	Z, r20
	   Local_u8ErrorState=TRUE;
     326:	81 e0       	ldi	r24, 0x01	; 1
     328:	08 95       	ret


		                                                       
u8  DIO_u8WritePinValue(u8 Copy_u8Pin, u8 Copy_u8Port, u8 Copy_u8Value)
{	
	u8 Local_u8ErrorState=FALSE;
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	08 95       	ret
     32e:	80 e0       	ldi	r24, 0x00	; 0
	   Local_u8ErrorState=TRUE;
	   
	}
		
	return Local_u8ErrorState;
}
     330:	08 95       	ret

00000332 <DIO_u8WritePortValue>:

u8  DIO_u8WritePortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=FALSE;
	
  if (Copy_u8Port <DIO_u8NumOfPorts)
     332:	84 30       	cpi	r24, 0x04	; 4
     334:	60 f4       	brcc	.+24     	; 0x34e <DIO_u8WritePortValue+0x1c>
  {
	  Assign_Reg(*DIO_u8ArrPORT[Copy_u8Port],Copy_u8Value);
     336:	e8 2f       	mov	r30, r24
     338:	f0 e0       	ldi	r31, 0x00	; 0
     33a:	ee 0f       	add	r30, r30
     33c:	ff 1f       	adc	r31, r31
     33e:	e5 59       	subi	r30, 0x95	; 149
     340:	ff 4f       	sbci	r31, 0xFF	; 255
     342:	01 90       	ld	r0, Z+
     344:	f0 81       	ld	r31, Z
     346:	e0 2d       	mov	r30, r0
     348:	60 83       	st	Z, r22
	  Local_u8ErrorState=TRUE;
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	08 95       	ret
	return Local_u8ErrorState;
}

u8  DIO_u8WritePortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=FALSE;
     34e:	80 e0       	ldi	r24, 0x00	; 0
	  Assign_Reg(*DIO_u8ArrPORT[Copy_u8Port],Copy_u8Value);
	  Local_u8ErrorState=TRUE;
  } 
  			
	return Local_u8ErrorState;
}
     350:	08 95       	ret

00000352 <DIO_u8ReadPinValue>:

u8  DIO_u8ReadPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_u8PTRvalue)
{
	u8 Local_u8ErrorState=FALSE;
	
	if ((Copy_u8PTRvalue!=NULL) && (Copy_u8Pin<DIO_u8NumOfPins))
     352:	41 15       	cp	r20, r1
     354:	51 05       	cpc	r21, r1
     356:	11 f1       	breq	.+68     	; 0x39c <DIO_u8ReadPinValue+0x4a>
     358:	68 30       	cpi	r22, 0x08	; 8
     35a:	10 f5       	brcc	.+68     	; 0x3a0 <DIO_u8ReadPinValue+0x4e>
	{
		
		*Copy_u8PTRvalue =GET_BIT(*DIO_u8ArrPIN[Copy_u8Port], Copy_u8Pin);
     35c:	e8 2f       	mov	r30, r24
     35e:	f0 e0       	ldi	r31, 0x00	; 0
     360:	ee 0f       	add	r30, r30
     362:	ff 1f       	adc	r31, r31
     364:	ed 59       	subi	r30, 0x9D	; 157
     366:	ff 4f       	sbci	r31, 0xFF	; 255
     368:	01 90       	ld	r0, Z+
     36a:	f0 81       	ld	r31, Z
     36c:	e0 2d       	mov	r30, r0
     36e:	70 81       	ld	r23, Z
     370:	81 e0       	ldi	r24, 0x01	; 1
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	9c 01       	movw	r18, r24
     376:	06 2e       	mov	r0, r22
     378:	02 c0       	rjmp	.+4      	; 0x37e <DIO_u8ReadPinValue+0x2c>
     37a:	22 0f       	add	r18, r18
     37c:	33 1f       	adc	r19, r19
     37e:	0a 94       	dec	r0
     380:	e2 f7       	brpl	.-8      	; 0x37a <DIO_u8ReadPinValue+0x28>
     382:	87 2f       	mov	r24, r23
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	82 23       	and	r24, r18
     388:	93 23       	and	r25, r19
     38a:	02 c0       	rjmp	.+4      	; 0x390 <DIO_u8ReadPinValue+0x3e>
     38c:	95 95       	asr	r25
     38e:	87 95       	ror	r24
     390:	6a 95       	dec	r22
     392:	e2 f7       	brpl	.-8      	; 0x38c <DIO_u8ReadPinValue+0x3a>
     394:	fa 01       	movw	r30, r20
     396:	80 83       	st	Z, r24
		Local_u8ErrorState=TRUE;
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	08 95       	ret
	return Local_u8ErrorState;
}

u8  DIO_u8ReadPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_u8PTRvalue)
{
	u8 Local_u8ErrorState=FALSE;
     39c:	80 e0       	ldi	r24, 0x00	; 0
     39e:	08 95       	ret
     3a0:	80 e0       	ldi	r24, 0x00	; 0
		Local_u8ErrorState=TRUE;
		
	} 

	return Local_u8ErrorState;
}
     3a2:	08 95       	ret

000003a4 <EXTI_voidInt0Init>:
	{
		case FALLING_EDGE:
		    CLEAR_BIT(MCU_Control_Status_Register,MCUCSR_ISC2);break;
				
		case RISING_EDGE:
		    SET_BIT(MCU_Control_Status_Register,MCUCSR_ISC2);break;
     3a4:	85 b7       	in	r24, 0x35	; 53
     3a6:	81 60       	ori	r24, 0x01	; 1
     3a8:	85 bf       	out	0x35, r24	; 53
     3aa:	85 b7       	in	r24, 0x35	; 53
     3ac:	82 60       	ori	r24, 0x02	; 2
     3ae:	85 bf       	out	0x35, r24	; 53
     3b0:	8b b7       	in	r24, 0x3b	; 59
     3b2:	80 64       	ori	r24, 0x40	; 64
     3b4:	8b bf       	out	0x3b, r24	; 59
     3b6:	08 95       	ret

000003b8 <EXTI_u8Int0SetCallBack>:
	}
}

void EXTI_u8Int0SetCallBack(void (*Copy_pvInt0Func)(void))
{
	if (Copy_pvInt0Func!=NULL)
     3b8:	00 97       	sbiw	r24, 0x00	; 0
     3ba:	21 f0       	breq	.+8      	; 0x3c4 <EXTI_u8Int0SetCallBack+0xc>
	{
		EXTI_pvInt0Func=Copy_pvInt0Func;
     3bc:	90 93 f5 00 	sts	0x00F5, r25	; 0x8000f5 <__data_end+0x1>
     3c0:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__data_end>
     3c4:	08 95       	ret

000003c6 <__vector_1>:
}

/* ISR OF INT0*/
void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
     3c6:	1f 92       	push	r1
     3c8:	0f 92       	push	r0
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	0f 92       	push	r0
     3ce:	11 24       	eor	r1, r1
     3d0:	2f 93       	push	r18
     3d2:	3f 93       	push	r19
     3d4:	4f 93       	push	r20
     3d6:	5f 93       	push	r21
     3d8:	6f 93       	push	r22
     3da:	7f 93       	push	r23
     3dc:	8f 93       	push	r24
     3de:	9f 93       	push	r25
     3e0:	af 93       	push	r26
     3e2:	bf 93       	push	r27
     3e4:	ef 93       	push	r30
     3e6:	ff 93       	push	r31
	EXTI_pvInt0Func();
     3e8:	e0 91 f4 00 	lds	r30, 0x00F4	; 0x8000f4 <__data_end>
     3ec:	f0 91 f5 00 	lds	r31, 0x00F5	; 0x8000f5 <__data_end+0x1>
     3f0:	09 95       	icall
     3f2:	ff 91       	pop	r31
     3f4:	ef 91       	pop	r30
     3f6:	bf 91       	pop	r27
     3f8:	af 91       	pop	r26
     3fa:	9f 91       	pop	r25
     3fc:	8f 91       	pop	r24
     3fe:	7f 91       	pop	r23
     400:	6f 91       	pop	r22
     402:	5f 91       	pop	r21
     404:	4f 91       	pop	r20
     406:	3f 91       	pop	r19
     408:	2f 91       	pop	r18
     40a:	0f 90       	pop	r0
     40c:	0f be       	out	0x3f, r0	; 63
     40e:	0f 90       	pop	r0
     410:	1f 90       	pop	r1
     412:	18 95       	reti

00000414 <GIE_voidEnable>:
#include "GIE_register.h"

/*Enable GIE (Global interrupt Enable)*/
void GIE_voidEnable (void)
{
SET_BIT(SREG_REG,SREG_I);
     414:	8f b7       	in	r24, 0x3f	; 63
     416:	80 68       	ori	r24, 0x80	; 128
     418:	8f bf       	out	0x3f, r24	; 63
     41a:	08 95       	ret

0000041c <prvHeapInit>:
    /* Ensure the heap starts on a correctly aligned boundary. */
    pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     41c:	ab ef       	ldi	r26, 0xFB	; 251
     41e:	b0 e0       	ldi	r27, 0x00	; 0
     420:	ef ef       	ldi	r30, 0xFF	; 255
     422:	f0 e0       	ldi	r31, 0x00	; 0
     424:	11 96       	adiw	r26, 0x01	; 1
     426:	fc 93       	st	X, r31
     428:	ee 93       	st	-X, r30
    xStart.xBlockSize = ( size_t ) 0;
     42a:	13 96       	adiw	r26, 0x03	; 3
     42c:	1c 92       	st	X, r1
     42e:	1e 92       	st	-X, r1
     430:	12 97       	sbiw	r26, 0x02	; 2

    /* xEnd is used to mark the end of the list of free blocks. */
    xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     432:	a7 ef       	ldi	r26, 0xF7	; 247
     434:	b0 e0       	ldi	r27, 0x00	; 0
     436:	83 ea       	ldi	r24, 0xA3	; 163
     438:	96 e0       	ldi	r25, 0x06	; 6
     43a:	13 96       	adiw	r26, 0x03	; 3
     43c:	9c 93       	st	X, r25
     43e:	8e 93       	st	-X, r24
     440:	12 97       	sbiw	r26, 0x02	; 2
    xEnd.pxNextFreeBlock = NULL;
     442:	11 96       	adiw	r26, 0x01	; 1
     444:	1c 92       	st	X, r1
     446:	1e 92       	st	-X, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     448:	93 83       	std	Z+3, r25	; 0x03
     44a:	82 83       	std	Z+2, r24	; 0x02
    pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     44c:	b1 83       	std	Z+1, r27	; 0x01
     44e:	a0 83       	st	Z, r26
     450:	08 95       	ret

00000452 <pvPortMalloc>:
        pxIterator->pxNextFreeBlock = pxBlockToInsert;                                                                              \
    }
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     452:	ef 92       	push	r14
     454:	ff 92       	push	r15
     456:	0f 93       	push	r16
     458:	1f 93       	push	r17
     45a:	cf 93       	push	r28
     45c:	df 93       	push	r29
     45e:	ec 01       	movw	r28, r24
    BlockLink_t * pxNewBlockLink;
    PRIVILEGED_DATA static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
     460:	0e 94 05 0c 	call	0x180a	; 0x180a <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( xHeapHasBeenInitialised == pdFALSE )
     464:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <xHeapHasBeenInitialised.2255>
     468:	81 11       	cpse	r24, r1
     46a:	05 c0       	rjmp	.+10     	; 0x476 <pvPortMalloc+0x24>
        {
            prvHeapInit();
     46c:	0e 94 0e 02 	call	0x41c	; 0x41c <prvHeapInit>
            xHeapHasBeenInitialised = pdTRUE;
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <xHeapHasBeenInitialised.2255>
        }

        if( xWantedSize > 0 )
     476:	20 97       	sbiw	r28, 0x00	; 0
     478:	41 f0       	breq	.+16     	; 0x48a <pvPortMalloc+0x38>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = heapSTRUCT_SIZE + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
     47a:	cb 3f       	cpi	r28, 0xFB	; 251
     47c:	8f ef       	ldi	r24, 0xFF	; 255
     47e:	d8 07       	cpc	r29, r24
     480:	10 f4       	brcc	.+4      	; 0x486 <pvPortMalloc+0x34>
            {
                xWantedSize += xAdditionalRequiredSize;
     482:	25 96       	adiw	r28, 0x05	; 5
     484:	02 c0       	rjmp	.+4      	; 0x48a <pvPortMalloc+0x38>
            }
            else
            {
                xWantedSize = 0;
     486:	c0 e0       	ldi	r28, 0x00	; 0
     488:	d0 e0       	ldi	r29, 0x00	; 0

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
     48a:	dd 23       	and	r29, r29
     48c:	0c f4       	brge	.+2      	; 0x490 <pvPortMalloc+0x3e>
     48e:	66 c0       	rjmp	.+204    	; 0x55c <pvPortMalloc+0x10a>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     490:	20 97       	sbiw	r28, 0x00	; 0
     492:	09 f4       	brne	.+2      	; 0x496 <pvPortMalloc+0x44>
     494:	66 c0       	rjmp	.+204    	; 0x562 <pvPortMalloc+0x110>
     496:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     49a:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     49e:	2c 17       	cp	r18, r28
     4a0:	3d 07       	cpc	r19, r29
     4a2:	08 f4       	brcc	.+2      	; 0x4a6 <pvPortMalloc+0x54>
     4a4:	61 c0       	rjmp	.+194    	; 0x568 <pvPortMalloc+0x116>
            {
                /* Blocks are stored in byte order - traverse the list from the start
                 * (smallest) block until one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     4a6:	e0 91 fb 00 	lds	r30, 0x00FB	; 0x8000fb <xStart>
     4aa:	f0 91 fc 00 	lds	r31, 0x00FC	; 0x8000fc <xStart+0x1>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Blocks are stored in byte order - traverse the list from the start
                 * (smallest) block until one of adequate size is found. */
                pxPreviousBlock = &xStart;
     4ae:	ab ef       	ldi	r26, 0xFB	; 251
     4b0:	b0 e0       	ldi	r27, 0x00	; 0
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <pvPortMalloc+0x66>
                {
                    pxPreviousBlock = pxBlock;
     4b4:	df 01       	movw	r26, r30
                    pxBlock = pxBlock->pxNextFreeBlock;
     4b6:	fc 01       	movw	r30, r24
                /* Blocks are stored in byte order - traverse the list from the start
                 * (smallest) block until one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     4b8:	82 81       	ldd	r24, Z+2	; 0x02
     4ba:	93 81       	ldd	r25, Z+3	; 0x03
     4bc:	8c 17       	cp	r24, r28
     4be:	9d 07       	cpc	r25, r29
     4c0:	20 f4       	brcc	.+8      	; 0x4ca <pvPortMalloc+0x78>
     4c2:	80 81       	ld	r24, Z
     4c4:	91 81       	ldd	r25, Z+1	; 0x01
     4c6:	00 97       	sbiw	r24, 0x00	; 0
     4c8:	a9 f7       	brne	.-22     	; 0x4b4 <pvPortMalloc+0x62>
                    pxPreviousBlock = pxBlock;
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If we found the end marker then a block of adequate size was not found. */
                if( pxBlock != &xEnd )
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	e7 3f       	cpi	r30, 0xF7	; 247
     4ce:	f8 07       	cpc	r31, r24
     4d0:	09 f4       	brne	.+2      	; 0x4d4 <pvPortMalloc+0x82>
     4d2:	4d c0       	rjmp	.+154    	; 0x56e <pvPortMalloc+0x11c>
                {
                    /* Return the memory space - jumping over the BlockLink_t structure
                     * at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
     4d4:	0d 91       	ld	r16, X+
     4d6:	1c 91       	ld	r17, X
     4d8:	11 97       	sbiw	r26, 0x01	; 1
     4da:	0c 5f       	subi	r16, 0xFC	; 252
     4dc:	1f 4f       	sbci	r17, 0xFF	; 255

                    /* This block is being returned for use so must be taken out of the
                     * list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     4de:	80 81       	ld	r24, Z
     4e0:	91 81       	ldd	r25, Z+1	; 0x01
     4e2:	8d 93       	st	X+, r24
     4e4:	9c 93       	st	X, r25

                    /* If the block is larger than required it can be split into two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     4e6:	82 81       	ldd	r24, Z+2	; 0x02
     4e8:	93 81       	ldd	r25, Z+3	; 0x03
     4ea:	8c 1b       	sub	r24, r28
     4ec:	9d 0b       	sbc	r25, r29
     4ee:	89 30       	cpi	r24, 0x09	; 9
     4f0:	91 05       	cpc	r25, r1
     4f2:	30 f1       	brcs	.+76     	; 0x540 <pvPortMalloc+0xee>
                    {
                        /* This block is to be split into two.  Create a new block
                         * following the number of bytes requested. The void cast is
                         * used to prevent byte alignment warnings from the compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     4f4:	bf 01       	movw	r22, r30
     4f6:	6c 0f       	add	r22, r28
     4f8:	7d 1f       	adc	r23, r29

                        /* Calculate the sizes of two blocks split from the single
                         * block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     4fa:	db 01       	movw	r26, r22
     4fc:	13 96       	adiw	r26, 0x03	; 3
     4fe:	9c 93       	st	X, r25
     500:	8e 93       	st	-X, r24
     502:	12 97       	sbiw	r26, 0x02	; 2
                        pxBlock->xBlockSize = xWantedSize;
     504:	d3 83       	std	Z+3, r29	; 0x03
     506:	c2 83       	std	Z+2, r28	; 0x02

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
     508:	12 96       	adiw	r26, 0x02	; 2
     50a:	4d 91       	ld	r20, X+
     50c:	5c 91       	ld	r21, X
     50e:	13 97       	sbiw	r26, 0x03	; 3
     510:	0f 2e       	mov	r0, r31
     512:	fb ef       	ldi	r31, 0xFB	; 251
     514:	ef 2e       	mov	r14, r31
     516:	f0 e0       	ldi	r31, 0x00	; 0
     518:	ff 2e       	mov	r15, r31
     51a:	f0 2d       	mov	r31, r0
     51c:	01 c0       	rjmp	.+2      	; 0x520 <pvPortMalloc+0xce>
     51e:	7d 01       	movw	r14, r26
     520:	e7 01       	movw	r28, r14
     522:	a8 81       	ld	r26, Y
     524:	b9 81       	ldd	r27, Y+1	; 0x01
     526:	12 96       	adiw	r26, 0x02	; 2
     528:	8d 91       	ld	r24, X+
     52a:	9c 91       	ld	r25, X
     52c:	13 97       	sbiw	r26, 0x03	; 3
     52e:	84 17       	cp	r24, r20
     530:	95 07       	cpc	r25, r21
     532:	a8 f3       	brcs	.-22     	; 0x51e <pvPortMalloc+0xcc>
     534:	eb 01       	movw	r28, r22
     536:	b9 83       	std	Y+1, r27	; 0x01
     538:	a8 83       	st	Y, r26
     53a:	d7 01       	movw	r26, r14
     53c:	6d 93       	st	X+, r22
     53e:	7c 93       	st	X, r23
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     540:	82 81       	ldd	r24, Z+2	; 0x02
     542:	93 81       	ldd	r25, Z+3	; 0x03
     544:	28 1b       	sub	r18, r24
     546:	39 0b       	sbc	r19, r25
     548:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     54c:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
     550:	90 68       	ori	r25, 0x80	; 128
     552:	93 83       	std	Z+3, r25	; 0x03
     554:	82 83       	std	Z+2, r24	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     556:	11 82       	std	Z+1, r1	; 0x01
     558:	10 82       	st	Z, r1
     55a:	0b c0       	rjmp	.+22     	; 0x572 <pvPortMalloc+0x120>
{
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    PRIVILEGED_DATA static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;
     55c:	00 e0       	ldi	r16, 0x00	; 0
     55e:	10 e0       	ldi	r17, 0x00	; 0
     560:	08 c0       	rjmp	.+16     	; 0x572 <pvPortMalloc+0x120>
     562:	00 e0       	ldi	r16, 0x00	; 0
     564:	10 e0       	ldi	r17, 0x00	; 0
     566:	05 c0       	rjmp	.+10     	; 0x572 <pvPortMalloc+0x120>
     568:	00 e0       	ldi	r16, 0x00	; 0
     56a:	10 e0       	ldi	r17, 0x00	; 0
     56c:	02 c0       	rjmp	.+4      	; 0x572 <pvPortMalloc+0x120>
     56e:	00 e0       	ldi	r16, 0x00	; 0
     570:	10 e0       	ldi	r17, 0x00	; 0
            }
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     572:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <xTaskResumeAll>
        }
    }
    #endif

    return pvReturn;
}
     576:	c8 01       	movw	r24, r16
     578:	df 91       	pop	r29
     57a:	cf 91       	pop	r28
     57c:	1f 91       	pop	r17
     57e:	0f 91       	pop	r16
     580:	ff 90       	pop	r15
     582:	ef 90       	pop	r14
     584:	08 95       	ret

00000586 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     586:	ef 92       	push	r14
     588:	ff 92       	push	r15
     58a:	0f 93       	push	r16
     58c:	1f 93       	push	r17
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     592:	00 97       	sbiw	r24, 0x00	; 0
     594:	b9 f1       	breq	.+110    	; 0x604 <vPortFree+0x7e>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= heapSTRUCT_SIZE;
     596:	ec 01       	movw	r28, r24
     598:	24 97       	sbiw	r28, 0x04	; 4
        pxLink = ( void * ) puc;

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
     59a:	2a 81       	ldd	r18, Y+2	; 0x02
     59c:	3b 81       	ldd	r19, Y+3	; 0x03
     59e:	33 23       	and	r19, r19
     5a0:	8c f5       	brge	.+98     	; 0x604 <vPortFree+0x7e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     5a2:	48 81       	ld	r20, Y
     5a4:	59 81       	ldd	r21, Y+1	; 0x01
     5a6:	45 2b       	or	r20, r21
     5a8:	69 f5       	brne	.+90     	; 0x604 <vPortFree+0x7e>
     5aa:	8c 01       	movw	r16, r24
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
     5ac:	3f 77       	andi	r19, 0x7F	; 127
     5ae:	3b 83       	std	Y+3, r19	; 0x03
     5b0:	2a 83       	std	Y+2, r18	; 0x02
                {
                    ( void ) memset( puc + heapSTRUCT_SIZE, 0, pxLink->xBlockSize - heapSTRUCT_SIZE );
                }
                #endif

                vTaskSuspendAll();
     5b2:	0e 94 05 0c 	call	0x180a	; 0x180a <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     5b6:	2a 81       	ldd	r18, Y+2	; 0x02
     5b8:	3b 81       	ldd	r19, Y+3	; 0x03
     5ba:	4b ef       	ldi	r20, 0xFB	; 251
     5bc:	50 e0       	ldi	r21, 0x00	; 0
     5be:	01 c0       	rjmp	.+2      	; 0x5c2 <vPortFree+0x3c>
     5c0:	af 01       	movw	r20, r30
     5c2:	da 01       	movw	r26, r20
     5c4:	ed 91       	ld	r30, X+
     5c6:	fc 91       	ld	r31, X
     5c8:	82 81       	ldd	r24, Z+2	; 0x02
     5ca:	93 81       	ldd	r25, Z+3	; 0x03
     5cc:	82 17       	cp	r24, r18
     5ce:	93 07       	cpc	r25, r19
     5d0:	b8 f3       	brcs	.-18     	; 0x5c0 <vPortFree+0x3a>
     5d2:	c8 01       	movw	r24, r16
     5d4:	04 97       	sbiw	r24, 0x04	; 4
     5d6:	dc 01       	movw	r26, r24
     5d8:	11 96       	adiw	r26, 0x01	; 1
     5da:	fc 93       	st	X, r31
     5dc:	ee 93       	st	-X, r30
     5de:	fa 01       	movw	r30, r20
     5e0:	d1 83       	std	Z+1, r29	; 0x01
     5e2:	c0 83       	st	Z, r28
                    xFreeBytesRemaining += pxLink->xBlockSize;
     5e4:	12 96       	adiw	r26, 0x02	; 2
     5e6:	8d 91       	ld	r24, X+
     5e8:	9c 91       	ld	r25, X
     5ea:	13 97       	sbiw	r26, 0x03	; 3
     5ec:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     5f0:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     5f4:	82 0f       	add	r24, r18
     5f6:	93 1f       	adc	r25, r19
     5f8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     5fc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
                    traceFREE( pv, pxLink->xBlockSize );
                }
                ( void ) xTaskResumeAll();
     600:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <xTaskResumeAll>
            }
        }
    }
}
     604:	df 91       	pop	r29
     606:	cf 91       	pop	r28
     608:	1f 91       	pop	r17
     60a:	0f 91       	pop	r16
     60c:	ff 90       	pop	r15
     60e:	ef 90       	pop	r14
     610:	08 95       	ret

00000612 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     612:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     614:	03 96       	adiw	r24, 0x03	; 3
     616:	92 83       	std	Z+2, r25	; 0x02
     618:	81 83       	std	Z+1, r24	; 0x01

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     61a:	2f ef       	ldi	r18, 0xFF	; 255
     61c:	3f ef       	ldi	r19, 0xFF	; 255
     61e:	34 83       	std	Z+4, r19	; 0x04
     620:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     622:	96 83       	std	Z+6, r25	; 0x06
     624:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     626:	90 87       	std	Z+8, r25	; 0x08
     628:	87 83       	std	Z+7, r24	; 0x07
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     62a:	10 82       	st	Z, r1
     62c:	08 95       	ret

0000062e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     62e:	fc 01       	movw	r30, r24
     630:	11 86       	std	Z+9, r1	; 0x09
     632:	10 86       	std	Z+8, r1	; 0x08
     634:	08 95       	ret

00000636 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
     636:	cf 93       	push	r28
     638:	df 93       	push	r29
     63a:	9c 01       	movw	r18, r24
     63c:	fb 01       	movw	r30, r22
    ListItem_t * const pxIndex = pxList->pxIndex;
     63e:	dc 01       	movw	r26, r24
     640:	11 96       	adiw	r26, 0x01	; 1
     642:	cd 91       	ld	r28, X+
     644:	dc 91       	ld	r29, X
     646:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     648:	d3 83       	std	Z+3, r29	; 0x03
     64a:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     64c:	8c 81       	ldd	r24, Y+4	; 0x04
     64e:	9d 81       	ldd	r25, Y+5	; 0x05
     650:	95 83       	std	Z+5, r25	; 0x05
     652:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     654:	8c 81       	ldd	r24, Y+4	; 0x04
     656:	9d 81       	ldd	r25, Y+5	; 0x05
     658:	dc 01       	movw	r26, r24
     65a:	13 96       	adiw	r26, 0x03	; 3
     65c:	7c 93       	st	X, r23
     65e:	6e 93       	st	-X, r22
     660:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
     662:	7d 83       	std	Y+5, r23	; 0x05
     664:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     666:	31 87       	std	Z+9, r19	; 0x09
     668:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     66a:	f9 01       	movw	r30, r18
     66c:	80 81       	ld	r24, Z
     66e:	8f 5f       	subi	r24, 0xFF	; 255
     670:	80 83       	st	Z, r24
}
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	08 95       	ret

00000678 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
     67c:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     67e:	48 81       	ld	r20, Y
     680:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     682:	4f 3f       	cpi	r20, 0xFF	; 255
     684:	2f ef       	ldi	r18, 0xFF	; 255
     686:	52 07       	cpc	r21, r18
     688:	21 f4       	brne	.+8      	; 0x692 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     68a:	fc 01       	movw	r30, r24
     68c:	a7 81       	ldd	r26, Z+7	; 0x07
     68e:	b0 85       	ldd	r27, Z+8	; 0x08
     690:	0d c0       	rjmp	.+26     	; 0x6ac <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     692:	dc 01       	movw	r26, r24
     694:	13 96       	adiw	r26, 0x03	; 3
     696:	01 c0       	rjmp	.+2      	; 0x69a <vListInsert+0x22>
     698:	df 01       	movw	r26, r30
     69a:	12 96       	adiw	r26, 0x02	; 2
     69c:	ed 91       	ld	r30, X+
     69e:	fc 91       	ld	r31, X
     6a0:	13 97       	sbiw	r26, 0x03	; 3
     6a2:	20 81       	ld	r18, Z
     6a4:	31 81       	ldd	r19, Z+1	; 0x01
     6a6:	42 17       	cp	r20, r18
     6a8:	53 07       	cpc	r21, r19
     6aa:	b0 f7       	brcc	.-20     	; 0x698 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     6ac:	12 96       	adiw	r26, 0x02	; 2
     6ae:	ed 91       	ld	r30, X+
     6b0:	fc 91       	ld	r31, X
     6b2:	13 97       	sbiw	r26, 0x03	; 3
     6b4:	fb 83       	std	Y+3, r31	; 0x03
     6b6:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     6b8:	d5 83       	std	Z+5, r29	; 0x05
     6ba:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     6bc:	bd 83       	std	Y+5, r27	; 0x05
     6be:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     6c0:	13 96       	adiw	r26, 0x03	; 3
     6c2:	dc 93       	st	X, r29
     6c4:	ce 93       	st	-X, r28
     6c6:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     6c8:	99 87       	std	Y+9, r25	; 0x09
     6ca:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     6cc:	fc 01       	movw	r30, r24
     6ce:	20 81       	ld	r18, Z
     6d0:	2f 5f       	subi	r18, 0xFF	; 255
     6d2:	20 83       	st	Z, r18
}
     6d4:	df 91       	pop	r29
     6d6:	cf 91       	pop	r28
     6d8:	08 95       	ret

000006da <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     6da:	cf 93       	push	r28
     6dc:	df 93       	push	r29
     6de:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     6e0:	a0 85       	ldd	r26, Z+8	; 0x08
     6e2:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     6e4:	c2 81       	ldd	r28, Z+2	; 0x02
     6e6:	d3 81       	ldd	r29, Z+3	; 0x03
     6e8:	84 81       	ldd	r24, Z+4	; 0x04
     6ea:	95 81       	ldd	r25, Z+5	; 0x05
     6ec:	9d 83       	std	Y+5, r25	; 0x05
     6ee:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     6f0:	c4 81       	ldd	r28, Z+4	; 0x04
     6f2:	d5 81       	ldd	r29, Z+5	; 0x05
     6f4:	82 81       	ldd	r24, Z+2	; 0x02
     6f6:	93 81       	ldd	r25, Z+3	; 0x03
     6f8:	9b 83       	std	Y+3, r25	; 0x03
     6fa:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     6fc:	11 96       	adiw	r26, 0x01	; 1
     6fe:	8d 91       	ld	r24, X+
     700:	9c 91       	ld	r25, X
     702:	12 97       	sbiw	r26, 0x02	; 2
     704:	e8 17       	cp	r30, r24
     706:	f9 07       	cpc	r31, r25
     708:	31 f4       	brne	.+12     	; 0x716 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     70a:	84 81       	ldd	r24, Z+4	; 0x04
     70c:	95 81       	ldd	r25, Z+5	; 0x05
     70e:	12 96       	adiw	r26, 0x02	; 2
     710:	9c 93       	st	X, r25
     712:	8e 93       	st	-X, r24
     714:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     716:	11 86       	std	Z+9, r1	; 0x09
     718:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     71a:	8c 91       	ld	r24, X
     71c:	81 50       	subi	r24, 0x01	; 1
     71e:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     720:	8c 91       	ld	r24, X
}
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	08 95       	ret

00000728 <Door>:
void Door(void *PV)
{

	while(1)
	{
		DIO_u8ReadPinValue(DIO_u8PORTD,DIO_u8PIN3,&Switch_State);
     728:	47 ea       	ldi	r20, 0xA7	; 167
     72a:	57 e0       	ldi	r21, 0x07	; 7
     72c:	63 e0       	ldi	r22, 0x03	; 3
     72e:	83 e0       	ldi	r24, 0x03	; 3
     730:	0e 94 a9 01 	call	0x352	; 0x352 <DIO_u8ReadPinValue>
		//_delay_ms(20);  // for deBouncing
		if (Switch_State==1)
     734:	80 91 a7 07 	lds	r24, 0x07A7	; 0x8007a7 <Switch_State>
     738:	81 30       	cpi	r24, 0x01	; 1
     73a:	31 f4       	brne	.+12     	; 0x748 <Door+0x20>
		{
			DIO_u8WritePinValue(DIO_u8PIN6,DIO_u8PORTD,1);
     73c:	41 e0       	ldi	r20, 0x01	; 1
     73e:	63 e0       	ldi	r22, 0x03	; 3
     740:	86 e0       	ldi	r24, 0x06	; 6
     742:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_u8WritePinValue>
     746:	07 c0       	rjmp	.+14     	; 0x756 <Door+0x2e>
		} 
		else if (Switch_State==0)
     748:	81 11       	cpse	r24, r1
     74a:	05 c0       	rjmp	.+10     	; 0x756 <Door+0x2e>
		{
			DIO_u8WritePinValue(DIO_u8PIN6,DIO_u8PORTD,0);
     74c:	40 e0       	ldi	r20, 0x00	; 0
     74e:	63 e0       	ldi	r22, 0x03	; 3
     750:	86 e0       	ldi	r24, 0x06	; 6
     752:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_u8WritePinValue>
		}
		vTaskDelay(1500);
     756:	8c ed       	ldi	r24, 0xDC	; 220
     758:	95 e0       	ldi	r25, 0x05	; 5
     75a:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <vTaskDelay>
		
	}
     75e:	e4 cf       	rjmp	.-56     	; 0x728 <Door>

00000760 <LCD>:
}
void LCD(void *PV)
{
	while(1)
	{
		if (Switch_State==1)
     760:	80 91 a7 07 	lds	r24, 0x07A7	; 0x8007a7 <Switch_State>
     764:	81 30       	cpi	r24, 0x01	; 1
     766:	91 f4       	brne	.+36     	; 0x78c <LCD+0x2c>
		{
			CLCD_voidSetCursor(2,1);
     768:	61 e0       	ldi	r22, 0x01	; 1
     76a:	82 e0       	ldi	r24, 0x02	; 2
     76c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <CLCD_voidSetCursor>
			CLCD_voidSendString("Door is Closed ");
     770:	83 e7       	ldi	r24, 0x73	; 115
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	0e 94 bf 00 	call	0x17e	; 0x17e <CLCD_voidSendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     778:	2f ef       	ldi	r18, 0xFF	; 255
     77a:	83 ec       	ldi	r24, 0xC3	; 195
     77c:	99 e0       	ldi	r25, 0x09	; 9
     77e:	21 50       	subi	r18, 0x01	; 1
     780:	80 40       	sbci	r24, 0x00	; 0
     782:	90 40       	sbci	r25, 0x00	; 0
     784:	e1 f7       	brne	.-8      	; 0x77e <LCD+0x1e>
     786:	00 c0       	rjmp	.+0      	; 0x788 <LCD+0x28>
     788:	00 00       	nop
     78a:	13 c0       	rjmp	.+38     	; 0x7b2 <LCD+0x52>
			_delay_ms(400);
		}
		else if (Switch_State==0)
     78c:	81 11       	cpse	r24, r1
     78e:	11 c0       	rjmp	.+34     	; 0x7b2 <LCD+0x52>
		{
			CLCD_voidSetCursor(2,1);
     790:	61 e0       	ldi	r22, 0x01	; 1
     792:	82 e0       	ldi	r24, 0x02	; 2
     794:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <CLCD_voidSetCursor>
			CLCD_voidSendString("Door is Open .");
     798:	83 e8       	ldi	r24, 0x83	; 131
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	0e 94 bf 00 	call	0x17e	; 0x17e <CLCD_voidSendString>
     7a0:	2f ef       	ldi	r18, 0xFF	; 255
     7a2:	83 ec       	ldi	r24, 0xC3	; 195
     7a4:	99 e0       	ldi	r25, 0x09	; 9
     7a6:	21 50       	subi	r18, 0x01	; 1
     7a8:	80 40       	sbci	r24, 0x00	; 0
     7aa:	90 40       	sbci	r25, 0x00	; 0
     7ac:	e1 f7       	brne	.-8      	; 0x7a6 <LCD+0x46>
     7ae:	00 c0       	rjmp	.+0      	; 0x7b0 <LCD+0x50>
     7b0:	00 00       	nop
			_delay_ms(400);
		}
		if (LEDState==1)
     7b2:	80 91 a8 07 	lds	r24, 0x07A8	; 0x8007a8 <LEDState>
     7b6:	81 30       	cpi	r24, 0x01	; 1
     7b8:	89 f4       	brne	.+34     	; 0x7dc <LCD+0x7c>
		{
			CLCD_voidSetCursor(1,1);
     7ba:	61 e0       	ldi	r22, 0x01	; 1
     7bc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <CLCD_voidSetCursor>
			CLCD_voidSendString("lED is On ");
     7c0:	82 e9       	ldi	r24, 0x92	; 146
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	0e 94 bf 00 	call	0x17e	; 0x17e <CLCD_voidSendString>
     7c8:	2f ef       	ldi	r18, 0xFF	; 255
     7ca:	83 ec       	ldi	r24, 0xC3	; 195
     7cc:	99 e0       	ldi	r25, 0x09	; 9
     7ce:	21 50       	subi	r18, 0x01	; 1
     7d0:	80 40       	sbci	r24, 0x00	; 0
     7d2:	90 40       	sbci	r25, 0x00	; 0
     7d4:	e1 f7       	brne	.-8      	; 0x7ce <LCD+0x6e>
     7d6:	00 c0       	rjmp	.+0      	; 0x7d8 <LCD+0x78>
     7d8:	00 00       	nop
     7da:	13 c0       	rjmp	.+38     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
			_delay_ms(400);
		}
		else if (LEDState==0)
     7dc:	81 11       	cpse	r24, r1
     7de:	11 c0       	rjmp	.+34     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
		{
			CLCD_voidSetCursor(1,1);
     7e0:	61 e0       	ldi	r22, 0x01	; 1
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <CLCD_voidSetCursor>
			CLCD_voidSendString("lED is Off ");
     7e8:	8d e9       	ldi	r24, 0x9D	; 157
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	0e 94 bf 00 	call	0x17e	; 0x17e <CLCD_voidSendString>
     7f0:	2f ef       	ldi	r18, 0xFF	; 255
     7f2:	83 ec       	ldi	r24, 0xC3	; 195
     7f4:	99 e0       	ldi	r25, 0x09	; 9
     7f6:	21 50       	subi	r18, 0x01	; 1
     7f8:	80 40       	sbci	r24, 0x00	; 0
     7fa:	90 40       	sbci	r25, 0x00	; 0
     7fc:	e1 f7       	brne	.-8      	; 0x7f6 <LCD+0x96>
     7fe:	00 c0       	rjmp	.+0      	; 0x800 <__DATA_REGION_LENGTH__>
     800:	00 00       	nop
			_delay_ms(400);
		}
		CLCD2_voidClearDisplay();
     802:	0e 94 51 01 	call	0x2a2	; 0x2a2 <CLCD2_voidClearDisplay>
		CLCD2_voidSendString("T = ");
     806:	83 ec       	ldi	r24, 0xC3	; 195
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	0e 94 3e 01 	call	0x27c	; 0x27c <CLCD2_voidSendString>
		CLCD2_WriteNumber(ADC_result);
     80e:	60 91 a3 07 	lds	r22, 0x07A3	; 0x8007a3 <ADC_result>
     812:	70 91 a4 07 	lds	r23, 0x07A4	; 0x8007a4 <ADC_result+0x1>
     816:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <ADC_result+0x2>
     81a:	90 91 a6 07 	lds	r25, 0x07A6	; 0x8007a6 <ADC_result+0x3>
     81e:	0e 94 9e 10 	call	0x213c	; 0x213c <__fixsfsi>
     822:	cb 01       	movw	r24, r22
     824:	0e 94 55 01 	call	0x2aa	; 0x2aa <CLCD2_WriteNumber>
     828:	2f ef       	ldi	r18, 0xFF	; 255
     82a:	83 ec       	ldi	r24, 0xC3	; 195
     82c:	99 e0       	ldi	r25, 0x09	; 9
     82e:	21 50       	subi	r18, 0x01	; 1
     830:	80 40       	sbci	r24, 0x00	; 0
     832:	90 40       	sbci	r25, 0x00	; 0
     834:	e1 f7       	brne	.-8      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
     836:	00 c0       	rjmp	.+0      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
     838:	00 00       	nop
     83a:	92 cf       	rjmp	.-220    	; 0x760 <LCD>

0000083c <LED>:
{
	
	while(1)
	{
		
		if(xSemaphoreTake( xBinarySemaphore_LED, 100 ) == pdTRUE )
     83c:	64 e6       	ldi	r22, 0x64	; 100
     83e:	70 e0       	ldi	r23, 0x00	; 0
     840:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <xBinarySemaphore_LED>
     844:	90 91 ac 07 	lds	r25, 0x07AC	; 0x8007ac <xBinarySemaphore_LED+0x1>
     848:	0e 94 8a 08 	call	0x1114	; 0x1114 <xQueueSemaphoreTake>
     84c:	81 30       	cpi	r24, 0x01	; 1
     84e:	b1 f7       	brne	.-20     	; 0x83c <LED>
		{
			TOGGLE_BIT(LEDState,0);
     850:	90 91 a8 07 	lds	r25, 0x07A8	; 0x8007a8 <LEDState>
     854:	89 27       	eor	r24, r25
     856:	80 93 a8 07 	sts	0x07A8, r24	; 0x8007a8 <LEDState>
			xSemaphoreGive( xBinarySemaphore_LED );
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <xBinarySemaphore_LED>
     868:	90 91 ac 07 	lds	r25, 0x07AC	; 0x8007ac <xBinarySemaphore_LED+0x1>
     86c:	0e 94 f8 07 	call	0xff0	; 0xff0 <xQueueGenericSend>
		    DIO_u8WritePinValue(DIO_u8PIN7,DIO_u8PORTD,LEDState);
     870:	40 91 a8 07 	lds	r20, 0x07A8	; 0x8007a8 <LEDState>
     874:	63 e0       	ldi	r22, 0x03	; 3
     876:	87 e0       	ldi	r24, 0x07	; 7
     878:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_u8WritePinValue>
		   vTaskDelay(6000);
     87c:	80 e7       	ldi	r24, 0x70	; 112
     87e:	97 e1       	ldi	r25, 0x17	; 23
     880:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <vTaskDelay>
     884:	db cf       	rjmp	.-74     	; 0x83c <LED>

00000886 <Push_Button>:

void Push_Button(void *PV)
{
	while(1)
	{
		if(xSemaphoreTake( xBinarySemaphore_LED, 100 ) == pdTRUE )
     886:	64 e6       	ldi	r22, 0x64	; 100
     888:	70 e0       	ldi	r23, 0x00	; 0
     88a:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <xBinarySemaphore_LED>
     88e:	90 91 ac 07 	lds	r25, 0x07AC	; 0x8007ac <xBinarySemaphore_LED+0x1>
     892:	0e 94 8a 08 	call	0x1114	; 0x1114 <xQueueSemaphoreTake>
     896:	81 30       	cpi	r24, 0x01	; 1
     898:	e9 f4       	brne	.+58     	; 0x8d4 <Push_Button+0x4e>
		{
			TOGGLE_BIT(LEDState,0);
     89a:	40 91 a8 07 	lds	r20, 0x07A8	; 0x8007a8 <LEDState>
     89e:	48 27       	eor	r20, r24
     8a0:	40 93 a8 07 	sts	0x07A8, r20	; 0x8007a8 <LEDState>
		    DIO_u8WritePinValue(DIO_u8PIN7,DIO_u8PORTD,LEDState);
     8a4:	63 e0       	ldi	r22, 0x03	; 3
     8a6:	87 e0       	ldi	r24, 0x07	; 7
     8a8:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_u8WritePinValue>
     8ac:	2f ef       	ldi	r18, 0xFF	; 255
     8ae:	84 e3       	ldi	r24, 0x34	; 52
     8b0:	9c e0       	ldi	r25, 0x0C	; 12
     8b2:	21 50       	subi	r18, 0x01	; 1
     8b4:	80 40       	sbci	r24, 0x00	; 0
     8b6:	90 40       	sbci	r25, 0x00	; 0
     8b8:	e1 f7       	brne	.-8      	; 0x8b2 <Push_Button+0x2c>
     8ba:	00 c0       	rjmp	.+0      	; 0x8bc <Push_Button+0x36>
     8bc:	00 00       	nop
			 _delay_ms(500);
			xSemaphoreGive( xBinarySemaphore_LED );
     8be:	20 e0       	ldi	r18, 0x00	; 0
     8c0:	40 e0       	ldi	r20, 0x00	; 0
     8c2:	50 e0       	ldi	r21, 0x00	; 0
     8c4:	60 e0       	ldi	r22, 0x00	; 0
     8c6:	70 e0       	ldi	r23, 0x00	; 0
     8c8:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <xBinarySemaphore_LED>
     8cc:	90 91 ac 07 	lds	r25, 0x07AC	; 0x8007ac <xBinarySemaphore_LED+0x1>
     8d0:	0e 94 f8 07 	call	0xff0	; 0xff0 <xQueueGenericSend>
		}
	
        vTaskSuspend(Push_ButtonHandler);       	
     8d4:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <Push_ButtonHandler>
     8d8:	90 91 aa 07 	lds	r25, 0x07AA	; 0x8007aa <Push_ButtonHandler+0x1>
     8dc:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <vTaskSuspend>
	}
     8e0:	d2 cf       	rjmp	.-92     	; 0x886 <Push_Button>

000008e2 <INT0ISR>:
}

void INT0ISR(void)
{
    vTaskResume(Push_ButtonHandler);
     8e2:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <Push_ButtonHandler>
     8e6:	90 91 aa 07 	lds	r25, 0x07AA	; 0x8007aa <Push_ButtonHandler+0x1>
     8ea:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <vTaskResume>
     8ee:	08 95       	ret

000008f0 <UART_Comm>:

void UART_Comm(void *PV)
{
	while(1)
   {
	   UART_Vid_SendString("\f lED is = ");
     8f0:	89 ea       	ldi	r24, 0xA9	; 169
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <UART_Vid_SendString>
	   UART_Vid_SendInt(LEDState);
     8f8:	60 91 a8 07 	lds	r22, 0x07A8	; 0x8007a8 <LEDState>
     8fc:	70 e0       	ldi	r23, 0x00	; 0
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	0e 94 0c 10 	call	0x2018	; 0x2018 <UART_Vid_SendInt>
	   UART_Vid_SendString(", Door is = ");
     906:	85 eb       	ldi	r24, 0xB5	; 181
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <UART_Vid_SendString>
	   UART_Vid_SendInt(Switch_State);
     90e:	60 91 a7 07 	lds	r22, 0x07A7	; 0x8007a7 <Switch_State>
     912:	70 e0       	ldi	r23, 0x00	; 0
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	0e 94 0c 10 	call	0x2018	; 0x2018 <UART_Vid_SendInt>
	   UART_Vid_SendString(",T = ");
     91c:	82 ec       	ldi	r24, 0xC2	; 194
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <UART_Vid_SendString>
	   UART_Vid_SendInt(ADC_result);
     924:	60 91 a3 07 	lds	r22, 0x07A3	; 0x8007a3 <ADC_result>
     928:	70 91 a4 07 	lds	r23, 0x07A4	; 0x8007a4 <ADC_result+0x1>
     92c:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <ADC_result+0x2>
     930:	90 91 a6 07 	lds	r25, 0x07A6	; 0x8007a6 <ADC_result+0x3>
     934:	0e 94 a5 10 	call	0x214a	; 0x214a <__fixunssfsi>
     938:	0e 94 0c 10 	call	0x2018	; 0x2018 <UART_Vid_SendInt>
	   UART_Vid_SendString("\n\r");
     93c:	88 ec       	ldi	r24, 0xC8	; 200
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <UART_Vid_SendString>

	vTaskDelay(2500);
     944:	84 ec       	ldi	r24, 0xC4	; 196
     946:	99 e0       	ldi	r25, 0x09	; 9
     948:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <vTaskDelay>
     94c:	d1 cf       	rjmp	.-94     	; 0x8f0 <UART_Comm>

0000094e <temp_Control>:
   }
}

void temp_Control(void *PV)
{
	vTaskDelay(1000);
     94e:	88 ee       	ldi	r24, 0xE8	; 232
     950:	93 e0       	ldi	r25, 0x03	; 3
     952:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <vTaskDelay>
	while(1)
	{
	 signed int volt;

	volt=Temp_ADC_read();
     956:	0e 94 5c 00 	call	0xb8	; 0xb8 <Temp_ADC_read>
	ADC_result=(float)(5*volt)/1023;   //Equation conversation for LM35 Sensor
     95a:	bc 01       	movw	r22, r24
     95c:	66 0f       	add	r22, r22
     95e:	77 1f       	adc	r23, r23
     960:	66 0f       	add	r22, r22
     962:	77 1f       	adc	r23, r23
     964:	68 0f       	add	r22, r24
     966:	79 1f       	adc	r23, r25
     968:	07 2e       	mov	r0, r23
     96a:	00 0c       	add	r0, r0
     96c:	88 0b       	sbc	r24, r24
     96e:	99 0b       	sbc	r25, r25
     970:	0e 94 d6 10 	call	0x21ac	; 0x21ac <__floatsisf>
     974:	20 e0       	ldi	r18, 0x00	; 0
     976:	30 ec       	ldi	r19, 0xC0	; 192
     978:	4f e7       	ldi	r20, 0x7F	; 127
     97a:	54 e4       	ldi	r21, 0x44	; 68
     97c:	0e 94 2c 10 	call	0x2058	; 0x2058 <__divsf3>
	ADC_result*=100;
     980:	20 e0       	ldi	r18, 0x00	; 0
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	48 ec       	ldi	r20, 0xC8	; 200
     986:	52 e4       	ldi	r21, 0x42	; 66
     988:	0e 94 62 11 	call	0x22c4	; 0x22c4 <__mulsf3>
     98c:	60 93 a3 07 	sts	0x07A3, r22	; 0x8007a3 <ADC_result>
     990:	70 93 a4 07 	sts	0x07A4, r23	; 0x8007a4 <ADC_result+0x1>
     994:	80 93 a5 07 	sts	0x07A5, r24	; 0x8007a5 <ADC_result+0x2>
     998:	90 93 a6 07 	sts	0x07A6, r25	; 0x8007a6 <ADC_result+0x3>

	vTaskDelay(4000);
     99c:	80 ea       	ldi	r24, 0xA0	; 160
     99e:	9f e0       	ldi	r25, 0x0F	; 15
     9a0:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <vTaskDelay>
     9a4:	d8 cf       	rjmp	.-80     	; 0x956 <temp_Control+0x8>

000009a6 <main>:

int main(void)
{	
	
	/*System Initialization*/	
	PORT_voidInit();
     9a6:	0e 94 a1 06 	call	0xd42	; 0xd42 <PORT_voidInit>
	GIE_voidEnable();
     9aa:	0e 94 0a 02 	call	0x414	; 0x414 <GIE_voidEnable>
	EXTI_voidInt0Init();
     9ae:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <EXTI_voidInt0Init>
	ADC_Vid_Init();
     9b2:	0e 94 49 00 	call	0x92	; 0x92 <ADC_Vid_Init>
	UART_VidInt();
     9b6:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <UART_VidInt>
	
	CLCD_voidInit();
     9ba:	0e 94 8a 00 	call	0x114	; 0x114 <CLCD_voidInit>
	CLCD2_voidInit();
     9be:	0e 94 09 01 	call	0x212	; 0x212 <CLCD2_voidInit>
	
	/*set EXTII call Back Function*/
	EXTI_u8Int0SetCallBack(INT0ISR);
     9c2:	81 e7       	ldi	r24, 0x71	; 113
     9c4:	94 e0       	ldi	r25, 0x04	; 4
     9c6:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <EXTI_u8Int0SetCallBack>
	

	/*create semaphore*/
	xBinarySemaphore_LED =xSemaphoreCreateBinary( );
     9ca:	43 e0       	ldi	r20, 0x03	; 3
     9cc:	60 e0       	ldi	r22, 0x00	; 0
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	0e 94 b7 07 	call	0xf6e	; 0xf6e <xQueueGenericCreate>
     9d4:	90 93 ac 07 	sts	0x07AC, r25	; 0x8007ac <xBinarySemaphore_LED+0x1>
     9d8:	80 93 ab 07 	sts	0x07AB, r24	; 0x8007ab <xBinarySemaphore_LED>
	
	/*Give semaphore as xSemaphoreCreateBinary initialize Semaphore */
	xSemaphoreGive( xBinarySemaphore_LED);
     9dc:	20 e0       	ldi	r18, 0x00	; 0
     9de:	40 e0       	ldi	r20, 0x00	; 0
     9e0:	50 e0       	ldi	r21, 0x00	; 0
     9e2:	60 e0       	ldi	r22, 0x00	; 0
     9e4:	70 e0       	ldi	r23, 0x00	; 0
     9e6:	0e 94 f8 07 	call	0xff0	; 0xff0 <xQueueGenericSend>


     /*System Tasks Creation*/
	 xTaskCreate(UART_Comm,"UART",200,NULL,3,NULL);
     9ea:	e1 2c       	mov	r14, r1
     9ec:	f1 2c       	mov	r15, r1
     9ee:	03 e0       	ldi	r16, 0x03	; 3
     9f0:	20 e0       	ldi	r18, 0x00	; 0
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	48 ec       	ldi	r20, 0xC8	; 200
     9f6:	50 e0       	ldi	r21, 0x00	; 0
     9f8:	6b ec       	ldi	r22, 0xCB	; 203
     9fa:	70 e0       	ldi	r23, 0x00	; 0
     9fc:	88 e7       	ldi	r24, 0x78	; 120
     9fe:	94 e0       	ldi	r25, 0x04	; 4
     a00:	0e 94 1a 0b 	call	0x1634	; 0x1634 <xTaskCreate>
	 xTaskCreate(LCD,"LCD",150,NULL,1,NULL);
     a04:	01 e0       	ldi	r16, 0x01	; 1
     a06:	20 e0       	ldi	r18, 0x00	; 0
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	46 e9       	ldi	r20, 0x96	; 150
     a0c:	50 e0       	ldi	r21, 0x00	; 0
     a0e:	60 ed       	ldi	r22, 0xD0	; 208
     a10:	70 e0       	ldi	r23, 0x00	; 0
     a12:	80 eb       	ldi	r24, 0xB0	; 176
     a14:	93 e0       	ldi	r25, 0x03	; 3
     a16:	0e 94 1a 0b 	call	0x1634	; 0x1634 <xTaskCreate>
     xTaskCreate(LED,"LED",75,NULL,2,NULL);
     a1a:	02 e0       	ldi	r16, 0x02	; 2
     a1c:	20 e0       	ldi	r18, 0x00	; 0
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	4b e4       	ldi	r20, 0x4B	; 75
     a22:	50 e0       	ldi	r21, 0x00	; 0
     a24:	64 ed       	ldi	r22, 0xD4	; 212
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	8e e1       	ldi	r24, 0x1E	; 30
     a2a:	94 e0       	ldi	r25, 0x04	; 4
     a2c:	0e 94 1a 0b 	call	0x1634	; 0x1634 <xTaskCreate>
     xTaskCreate(Door,"Door",75,NULL,2,NULL);
     a30:	20 e0       	ldi	r18, 0x00	; 0
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	4b e4       	ldi	r20, 0x4B	; 75
     a36:	50 e0       	ldi	r21, 0x00	; 0
     a38:	68 ed       	ldi	r22, 0xD8	; 216
     a3a:	70 e0       	ldi	r23, 0x00	; 0
     a3c:	84 e9       	ldi	r24, 0x94	; 148
     a3e:	93 e0       	ldi	r25, 0x03	; 3
     a40:	0e 94 1a 0b 	call	0x1634	; 0x1634 <xTaskCreate>
	 xTaskCreate(temp_Control,"Temp",75,NULL,2,NULL);
     a44:	20 e0       	ldi	r18, 0x00	; 0
     a46:	30 e0       	ldi	r19, 0x00	; 0
     a48:	4b e4       	ldi	r20, 0x4B	; 75
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	6d ed       	ldi	r22, 0xDD	; 221
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	87 ea       	ldi	r24, 0xA7	; 167
     a52:	94 e0       	ldi	r25, 0x04	; 4
     a54:	0e 94 1a 0b 	call	0x1634	; 0x1634 <xTaskCreate>
     xTaskCreate(Push_Button,"Push_Button",75,NULL,2,&Push_ButtonHandler);
     a58:	0f 2e       	mov	r0, r31
     a5a:	f9 ea       	ldi	r31, 0xA9	; 169
     a5c:	ef 2e       	mov	r14, r31
     a5e:	f7 e0       	ldi	r31, 0x07	; 7
     a60:	ff 2e       	mov	r15, r31
     a62:	f0 2d       	mov	r31, r0
     a64:	20 e0       	ldi	r18, 0x00	; 0
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	4b e4       	ldi	r20, 0x4B	; 75
     a6a:	50 e0       	ldi	r21, 0x00	; 0
     a6c:	62 ee       	ldi	r22, 0xE2	; 226
     a6e:	70 e0       	ldi	r23, 0x00	; 0
     a70:	83 e4       	ldi	r24, 0x43	; 67
     a72:	94 e0       	ldi	r25, 0x04	; 4
     a74:	0e 94 1a 0b 	call	0x1634	; 0x1634 <xTaskCreate>

	 
	 vTaskSuspend(Push_ButtonHandler);
     a78:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <Push_ButtonHandler>
     a7c:	90 91 aa 07 	lds	r25, 0x07AA	; 0x8007aa <Push_ButtonHandler+0x1>
     a80:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <vTaskSuspend>
	 
	/*start OS*/
	vTaskStartScheduler();
     a84:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <vTaskStartScheduler>
     a88:	ff cf       	rjmp	.-2      	; 0xa88 <main+0xe2>

00000a8a <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     a8a:	1b bc       	out	0x2b, r1	; 43
     a8c:	8d e3       	ldi	r24, 0x3D	; 61
     a8e:	8a bd       	out	0x2a, r24	; 42
     a90:	8b e0       	ldi	r24, 0x0B	; 11
     a92:	8e bd       	out	0x2e, r24	; 46
     a94:	89 b7       	in	r24, 0x39	; 57
     a96:	80 61       	ori	r24, 0x10	; 16
     a98:	89 bf       	out	0x39, r24	; 57
     a9a:	08 95       	ret

00000a9c <pxPortInitialiseStack>:
     a9c:	31 e1       	ldi	r19, 0x11	; 17
     a9e:	fc 01       	movw	r30, r24
     aa0:	30 83       	st	Z, r19
     aa2:	31 97       	sbiw	r30, 0x01	; 1
     aa4:	22 e2       	ldi	r18, 0x22	; 34
     aa6:	20 83       	st	Z, r18
     aa8:	31 97       	sbiw	r30, 0x01	; 1
     aaa:	a3 e3       	ldi	r26, 0x33	; 51
     aac:	a0 83       	st	Z, r26
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	60 83       	st	Z, r22
     ab2:	31 97       	sbiw	r30, 0x01	; 1
     ab4:	70 83       	st	Z, r23
     ab6:	31 97       	sbiw	r30, 0x01	; 1
     ab8:	10 82       	st	Z, r1
     aba:	31 97       	sbiw	r30, 0x01	; 1
     abc:	60 e8       	ldi	r22, 0x80	; 128
     abe:	60 83       	st	Z, r22
     ac0:	31 97       	sbiw	r30, 0x01	; 1
     ac2:	10 82       	st	Z, r1
     ac4:	31 97       	sbiw	r30, 0x01	; 1
     ac6:	62 e0       	ldi	r22, 0x02	; 2
     ac8:	60 83       	st	Z, r22
     aca:	31 97       	sbiw	r30, 0x01	; 1
     acc:	63 e0       	ldi	r22, 0x03	; 3
     ace:	60 83       	st	Z, r22
     ad0:	31 97       	sbiw	r30, 0x01	; 1
     ad2:	64 e0       	ldi	r22, 0x04	; 4
     ad4:	60 83       	st	Z, r22
     ad6:	31 97       	sbiw	r30, 0x01	; 1
     ad8:	65 e0       	ldi	r22, 0x05	; 5
     ada:	60 83       	st	Z, r22
     adc:	31 97       	sbiw	r30, 0x01	; 1
     ade:	66 e0       	ldi	r22, 0x06	; 6
     ae0:	60 83       	st	Z, r22
     ae2:	31 97       	sbiw	r30, 0x01	; 1
     ae4:	67 e0       	ldi	r22, 0x07	; 7
     ae6:	60 83       	st	Z, r22
     ae8:	31 97       	sbiw	r30, 0x01	; 1
     aea:	68 e0       	ldi	r22, 0x08	; 8
     aec:	60 83       	st	Z, r22
     aee:	31 97       	sbiw	r30, 0x01	; 1
     af0:	69 e0       	ldi	r22, 0x09	; 9
     af2:	60 83       	st	Z, r22
     af4:	31 97       	sbiw	r30, 0x01	; 1
     af6:	60 e1       	ldi	r22, 0x10	; 16
     af8:	60 83       	st	Z, r22
     afa:	31 97       	sbiw	r30, 0x01	; 1
     afc:	30 83       	st	Z, r19
     afe:	31 97       	sbiw	r30, 0x01	; 1
     b00:	32 e1       	ldi	r19, 0x12	; 18
     b02:	30 83       	st	Z, r19
     b04:	31 97       	sbiw	r30, 0x01	; 1
     b06:	33 e1       	ldi	r19, 0x13	; 19
     b08:	30 83       	st	Z, r19
     b0a:	31 97       	sbiw	r30, 0x01	; 1
     b0c:	34 e1       	ldi	r19, 0x14	; 20
     b0e:	30 83       	st	Z, r19
     b10:	31 97       	sbiw	r30, 0x01	; 1
     b12:	35 e1       	ldi	r19, 0x15	; 21
     b14:	30 83       	st	Z, r19
     b16:	31 97       	sbiw	r30, 0x01	; 1
     b18:	36 e1       	ldi	r19, 0x16	; 22
     b1a:	30 83       	st	Z, r19
     b1c:	31 97       	sbiw	r30, 0x01	; 1
     b1e:	37 e1       	ldi	r19, 0x17	; 23
     b20:	30 83       	st	Z, r19
     b22:	31 97       	sbiw	r30, 0x01	; 1
     b24:	38 e1       	ldi	r19, 0x18	; 24
     b26:	30 83       	st	Z, r19
     b28:	31 97       	sbiw	r30, 0x01	; 1
     b2a:	39 e1       	ldi	r19, 0x19	; 25
     b2c:	30 83       	st	Z, r19
     b2e:	31 97       	sbiw	r30, 0x01	; 1
     b30:	30 e2       	ldi	r19, 0x20	; 32
     b32:	30 83       	st	Z, r19
     b34:	31 97       	sbiw	r30, 0x01	; 1
     b36:	31 e2       	ldi	r19, 0x21	; 33
     b38:	30 83       	st	Z, r19
     b3a:	31 97       	sbiw	r30, 0x01	; 1
     b3c:	20 83       	st	Z, r18
     b3e:	31 97       	sbiw	r30, 0x01	; 1
     b40:	23 e2       	ldi	r18, 0x23	; 35
     b42:	20 83       	st	Z, r18
     b44:	31 97       	sbiw	r30, 0x01	; 1
     b46:	40 83       	st	Z, r20
     b48:	31 97       	sbiw	r30, 0x01	; 1
     b4a:	50 83       	st	Z, r21
     b4c:	31 97       	sbiw	r30, 0x01	; 1
     b4e:	26 e2       	ldi	r18, 0x26	; 38
     b50:	20 83       	st	Z, r18
     b52:	31 97       	sbiw	r30, 0x01	; 1
     b54:	27 e2       	ldi	r18, 0x27	; 39
     b56:	20 83       	st	Z, r18
     b58:	31 97       	sbiw	r30, 0x01	; 1
     b5a:	28 e2       	ldi	r18, 0x28	; 40
     b5c:	20 83       	st	Z, r18
     b5e:	31 97       	sbiw	r30, 0x01	; 1
     b60:	29 e2       	ldi	r18, 0x29	; 41
     b62:	20 83       	st	Z, r18
     b64:	31 97       	sbiw	r30, 0x01	; 1
     b66:	20 e3       	ldi	r18, 0x30	; 48
     b68:	20 83       	st	Z, r18
     b6a:	31 97       	sbiw	r30, 0x01	; 1
     b6c:	21 e3       	ldi	r18, 0x31	; 49
     b6e:	20 83       	st	Z, r18
     b70:	86 97       	sbiw	r24, 0x26	; 38
     b72:	08 95       	ret

00000b74 <xPortStartScheduler>:
     b74:	0e 94 45 05 	call	0xa8a	; 0xa8a <prvSetupTimerInterrupt>
     b78:	a0 91 2d 08 	lds	r26, 0x082D	; 0x80082d <pxCurrentTCB>
     b7c:	b0 91 2e 08 	lds	r27, 0x082E	; 0x80082e <pxCurrentTCB+0x1>
     b80:	cd 91       	ld	r28, X+
     b82:	cd bf       	out	0x3d, r28	; 61
     b84:	dd 91       	ld	r29, X+
     b86:	de bf       	out	0x3e, r29	; 62
     b88:	ff 91       	pop	r31
     b8a:	ef 91       	pop	r30
     b8c:	df 91       	pop	r29
     b8e:	cf 91       	pop	r28
     b90:	bf 91       	pop	r27
     b92:	af 91       	pop	r26
     b94:	9f 91       	pop	r25
     b96:	8f 91       	pop	r24
     b98:	7f 91       	pop	r23
     b9a:	6f 91       	pop	r22
     b9c:	5f 91       	pop	r21
     b9e:	4f 91       	pop	r20
     ba0:	3f 91       	pop	r19
     ba2:	2f 91       	pop	r18
     ba4:	1f 91       	pop	r17
     ba6:	0f 91       	pop	r16
     ba8:	ff 90       	pop	r15
     baa:	ef 90       	pop	r14
     bac:	df 90       	pop	r13
     bae:	cf 90       	pop	r12
     bb0:	bf 90       	pop	r11
     bb2:	af 90       	pop	r10
     bb4:	9f 90       	pop	r9
     bb6:	8f 90       	pop	r8
     bb8:	7f 90       	pop	r7
     bba:	6f 90       	pop	r6
     bbc:	5f 90       	pop	r5
     bbe:	4f 90       	pop	r4
     bc0:	3f 90       	pop	r3
     bc2:	2f 90       	pop	r2
     bc4:	1f 90       	pop	r1
     bc6:	0f 90       	pop	r0
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	0f 90       	pop	r0
     bcc:	08 95       	ret
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	08 95       	ret

00000bd2 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     bd2:	0f 92       	push	r0
     bd4:	0f b6       	in	r0, 0x3f	; 63
     bd6:	f8 94       	cli
     bd8:	0f 92       	push	r0
     bda:	1f 92       	push	r1
     bdc:	11 24       	eor	r1, r1
     bde:	2f 92       	push	r2
     be0:	3f 92       	push	r3
     be2:	4f 92       	push	r4
     be4:	5f 92       	push	r5
     be6:	6f 92       	push	r6
     be8:	7f 92       	push	r7
     bea:	8f 92       	push	r8
     bec:	9f 92       	push	r9
     bee:	af 92       	push	r10
     bf0:	bf 92       	push	r11
     bf2:	cf 92       	push	r12
     bf4:	df 92       	push	r13
     bf6:	ef 92       	push	r14
     bf8:	ff 92       	push	r15
     bfa:	0f 93       	push	r16
     bfc:	1f 93       	push	r17
     bfe:	2f 93       	push	r18
     c00:	3f 93       	push	r19
     c02:	4f 93       	push	r20
     c04:	5f 93       	push	r21
     c06:	6f 93       	push	r22
     c08:	7f 93       	push	r23
     c0a:	8f 93       	push	r24
     c0c:	9f 93       	push	r25
     c0e:	af 93       	push	r26
     c10:	bf 93       	push	r27
     c12:	cf 93       	push	r28
     c14:	df 93       	push	r29
     c16:	ef 93       	push	r30
     c18:	ff 93       	push	r31
     c1a:	a0 91 2d 08 	lds	r26, 0x082D	; 0x80082d <pxCurrentTCB>
     c1e:	b0 91 2e 08 	lds	r27, 0x082E	; 0x80082e <pxCurrentTCB+0x1>
     c22:	0d b6       	in	r0, 0x3d	; 61
     c24:	0d 92       	st	X+, r0
     c26:	0e b6       	in	r0, 0x3e	; 62
     c28:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     c2a:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     c2e:	a0 91 2d 08 	lds	r26, 0x082D	; 0x80082d <pxCurrentTCB>
     c32:	b0 91 2e 08 	lds	r27, 0x082E	; 0x80082e <pxCurrentTCB+0x1>
     c36:	cd 91       	ld	r28, X+
     c38:	cd bf       	out	0x3d, r28	; 61
     c3a:	dd 91       	ld	r29, X+
     c3c:	de bf       	out	0x3e, r29	; 62
     c3e:	ff 91       	pop	r31
     c40:	ef 91       	pop	r30
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	bf 91       	pop	r27
     c48:	af 91       	pop	r26
     c4a:	9f 91       	pop	r25
     c4c:	8f 91       	pop	r24
     c4e:	7f 91       	pop	r23
     c50:	6f 91       	pop	r22
     c52:	5f 91       	pop	r21
     c54:	4f 91       	pop	r20
     c56:	3f 91       	pop	r19
     c58:	2f 91       	pop	r18
     c5a:	1f 91       	pop	r17
     c5c:	0f 91       	pop	r16
     c5e:	ff 90       	pop	r15
     c60:	ef 90       	pop	r14
     c62:	df 90       	pop	r13
     c64:	cf 90       	pop	r12
     c66:	bf 90       	pop	r11
     c68:	af 90       	pop	r10
     c6a:	9f 90       	pop	r9
     c6c:	8f 90       	pop	r8
     c6e:	7f 90       	pop	r7
     c70:	6f 90       	pop	r6
     c72:	5f 90       	pop	r5
     c74:	4f 90       	pop	r4
     c76:	3f 90       	pop	r3
     c78:	2f 90       	pop	r2
     c7a:	1f 90       	pop	r1
     c7c:	0f 90       	pop	r0
     c7e:	0f be       	out	0x3f, r0	; 63
     c80:	0f 90       	pop	r0

	asm volatile ( "ret" );
     c82:	08 95       	ret

00000c84 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     c84:	0f 92       	push	r0
     c86:	0f b6       	in	r0, 0x3f	; 63
     c88:	f8 94       	cli
     c8a:	0f 92       	push	r0
     c8c:	1f 92       	push	r1
     c8e:	11 24       	eor	r1, r1
     c90:	2f 92       	push	r2
     c92:	3f 92       	push	r3
     c94:	4f 92       	push	r4
     c96:	5f 92       	push	r5
     c98:	6f 92       	push	r6
     c9a:	7f 92       	push	r7
     c9c:	8f 92       	push	r8
     c9e:	9f 92       	push	r9
     ca0:	af 92       	push	r10
     ca2:	bf 92       	push	r11
     ca4:	cf 92       	push	r12
     ca6:	df 92       	push	r13
     ca8:	ef 92       	push	r14
     caa:	ff 92       	push	r15
     cac:	0f 93       	push	r16
     cae:	1f 93       	push	r17
     cb0:	2f 93       	push	r18
     cb2:	3f 93       	push	r19
     cb4:	4f 93       	push	r20
     cb6:	5f 93       	push	r21
     cb8:	6f 93       	push	r22
     cba:	7f 93       	push	r23
     cbc:	8f 93       	push	r24
     cbe:	9f 93       	push	r25
     cc0:	af 93       	push	r26
     cc2:	bf 93       	push	r27
     cc4:	cf 93       	push	r28
     cc6:	df 93       	push	r29
     cc8:	ef 93       	push	r30
     cca:	ff 93       	push	r31
     ccc:	a0 91 2d 08 	lds	r26, 0x082D	; 0x80082d <pxCurrentTCB>
     cd0:	b0 91 2e 08 	lds	r27, 0x082E	; 0x80082e <pxCurrentTCB+0x1>
     cd4:	0d b6       	in	r0, 0x3d	; 61
     cd6:	0d 92       	st	X+, r0
     cd8:	0e b6       	in	r0, 0x3e	; 62
     cda:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     cdc:	0e 94 0b 0c 	call	0x1816	; 0x1816 <xTaskIncrementTick>
     ce0:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     ce2:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     ce6:	a0 91 2d 08 	lds	r26, 0x082D	; 0x80082d <pxCurrentTCB>
     cea:	b0 91 2e 08 	lds	r27, 0x082E	; 0x80082e <pxCurrentTCB+0x1>
     cee:	cd 91       	ld	r28, X+
     cf0:	cd bf       	out	0x3d, r28	; 61
     cf2:	dd 91       	ld	r29, X+
     cf4:	de bf       	out	0x3e, r29	; 62
     cf6:	ff 91       	pop	r31
     cf8:	ef 91       	pop	r30
     cfa:	df 91       	pop	r29
     cfc:	cf 91       	pop	r28
     cfe:	bf 91       	pop	r27
     d00:	af 91       	pop	r26
     d02:	9f 91       	pop	r25
     d04:	8f 91       	pop	r24
     d06:	7f 91       	pop	r23
     d08:	6f 91       	pop	r22
     d0a:	5f 91       	pop	r21
     d0c:	4f 91       	pop	r20
     d0e:	3f 91       	pop	r19
     d10:	2f 91       	pop	r18
     d12:	1f 91       	pop	r17
     d14:	0f 91       	pop	r16
     d16:	ff 90       	pop	r15
     d18:	ef 90       	pop	r14
     d1a:	df 90       	pop	r13
     d1c:	cf 90       	pop	r12
     d1e:	bf 90       	pop	r11
     d20:	af 90       	pop	r10
     d22:	9f 90       	pop	r9
     d24:	8f 90       	pop	r8
     d26:	7f 90       	pop	r7
     d28:	6f 90       	pop	r6
     d2a:	5f 90       	pop	r5
     d2c:	4f 90       	pop	r4
     d2e:	3f 90       	pop	r3
     d30:	2f 90       	pop	r2
     d32:	1f 90       	pop	r1
     d34:	0f 90       	pop	r0
     d36:	0f be       	out	0x3f, r0	; 63
     d38:	0f 90       	pop	r0

	asm volatile ( "ret" );
     d3a:	08 95       	ret

00000d3c <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     d3c:	0e 94 42 06 	call	0xc84	; 0xc84 <vPortYieldFromTick>
		asm volatile ( "reti" );
     d40:	18 95       	reti

00000d42 <PORT_voidInit>:
#include"PORT_private.h"
#include"PORT_interface.h"

void PORT_voidInit(void)
{
	DDRA=PORTA_DIR;
     d42:	8f ef       	ldi	r24, 0xFF	; 255
     d44:	8a bb       	out	0x1a, r24	; 26
    DDRB=PORTB_DIR;
     d46:	87 bb       	out	0x17, r24	; 23
    DDRC=PORTC_DIR;
     d48:	84 bb       	out	0x14, r24	; 20
    DDRD=PORTD_DIR;
     d4a:	81 ed       	ldi	r24, 0xD1	; 209
     d4c:	81 bb       	out	0x11, r24	; 17
	
	PORTA=PORTA_INITVAL ;
     d4e:	1b ba       	out	0x1b, r1	; 27
    PORTB=PORTB_INITVAL	;
     d50:	18 ba       	out	0x18, r1	; 24
    PORTC=PORTC_INITVAL	;
     d52:	15 ba       	out	0x15, r1	; 21
    PORTD=PORTD_INITVAL	;
     d54:	12 ba       	out	0x12, r1	; 18
     d56:	08 95       	ret

00000d58 <prvIsQueueEmpty>:
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
     d58:	0f b6       	in	r0, 0x3f	; 63
     d5a:	f8 94       	cli
     d5c:	0f 92       	push	r0
     d5e:	fc 01       	movw	r30, r24
     d60:	82 8d       	ldd	r24, Z+26	; 0x1a
     d62:	81 11       	cpse	r24, r1
     d64:	02 c0       	rjmp	.+4      	; 0xd6a <prvIsQueueEmpty+0x12>
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	01 c0       	rjmp	.+2      	; 0xd6c <prvIsQueueEmpty+0x14>
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	0f 90       	pop	r0
     d6e:	0f be       	out	0x3f, r0	; 63
     d70:	08 95       	ret

00000d72 <prvIsQueueFull>:
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	f8 94       	cli
     d76:	0f 92       	push	r0
     d78:	fc 01       	movw	r30, r24
     d7a:	22 8d       	ldd	r18, Z+26	; 0x1a
     d7c:	83 8d       	ldd	r24, Z+27	; 0x1b
     d7e:	28 13       	cpse	r18, r24
     d80:	02 c0       	rjmp	.+4      	; 0xd86 <prvIsQueueFull+0x14>
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	01 c0       	rjmp	.+2      	; 0xd88 <prvIsQueueFull+0x16>
     d86:	80 e0       	ldi	r24, 0x00	; 0
     d88:	0f 90       	pop	r0
     d8a:	0f be       	out	0x3f, r0	; 63
     d8c:	08 95       	ret

00000d8e <prvCopyDataToQueue>:
     d8e:	0f 93       	push	r16
     d90:	1f 93       	push	r17
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
     d96:	ec 01       	movw	r28, r24
     d98:	04 2f       	mov	r16, r20
     d9a:	1a 8d       	ldd	r17, Y+26	; 0x1a
     d9c:	4c 8d       	ldd	r20, Y+28	; 0x1c
     d9e:	44 23       	and	r20, r20
     da0:	b9 f1       	breq	.+110    	; 0xe10 <prvCopyDataToQueue+0x82>
     da2:	01 11       	cpse	r16, r1
     da4:	16 c0       	rjmp	.+44     	; 0xdd2 <prvCopyDataToQueue+0x44>
     da6:	50 e0       	ldi	r21, 0x00	; 0
     da8:	8a 81       	ldd	r24, Y+2	; 0x02
     daa:	9b 81       	ldd	r25, Y+3	; 0x03
     dac:	0e 94 05 12 	call	0x240a	; 0x240a <memcpy>
     db0:	2c 8d       	ldd	r18, Y+28	; 0x1c
     db2:	8a 81       	ldd	r24, Y+2	; 0x02
     db4:	9b 81       	ldd	r25, Y+3	; 0x03
     db6:	82 0f       	add	r24, r18
     db8:	91 1d       	adc	r25, r1
     dba:	9b 83       	std	Y+3, r25	; 0x03
     dbc:	8a 83       	std	Y+2, r24	; 0x02
     dbe:	2c 81       	ldd	r18, Y+4	; 0x04
     dc0:	3d 81       	ldd	r19, Y+5	; 0x05
     dc2:	82 17       	cp	r24, r18
     dc4:	93 07       	cpc	r25, r19
     dc6:	20 f1       	brcs	.+72     	; 0xe10 <prvCopyDataToQueue+0x82>
     dc8:	88 81       	ld	r24, Y
     dca:	99 81       	ldd	r25, Y+1	; 0x01
     dcc:	9b 83       	std	Y+3, r25	; 0x03
     dce:	8a 83       	std	Y+2, r24	; 0x02
     dd0:	1f c0       	rjmp	.+62     	; 0xe10 <prvCopyDataToQueue+0x82>
     dd2:	50 e0       	ldi	r21, 0x00	; 0
     dd4:	8e 81       	ldd	r24, Y+6	; 0x06
     dd6:	9f 81       	ldd	r25, Y+7	; 0x07
     dd8:	0e 94 05 12 	call	0x240a	; 0x240a <memcpy>
     ddc:	8c 8d       	ldd	r24, Y+28	; 0x1c
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	91 95       	neg	r25
     de2:	81 95       	neg	r24
     de4:	91 09       	sbc	r25, r1
     de6:	2e 81       	ldd	r18, Y+6	; 0x06
     de8:	3f 81       	ldd	r19, Y+7	; 0x07
     dea:	28 0f       	add	r18, r24
     dec:	39 1f       	adc	r19, r25
     dee:	3f 83       	std	Y+7, r19	; 0x07
     df0:	2e 83       	std	Y+6, r18	; 0x06
     df2:	48 81       	ld	r20, Y
     df4:	59 81       	ldd	r21, Y+1	; 0x01
     df6:	24 17       	cp	r18, r20
     df8:	35 07       	cpc	r19, r21
     dfa:	30 f4       	brcc	.+12     	; 0xe08 <prvCopyDataToQueue+0x7a>
     dfc:	2c 81       	ldd	r18, Y+4	; 0x04
     dfe:	3d 81       	ldd	r19, Y+5	; 0x05
     e00:	82 0f       	add	r24, r18
     e02:	93 1f       	adc	r25, r19
     e04:	9f 83       	std	Y+7, r25	; 0x07
     e06:	8e 83       	std	Y+6, r24	; 0x06
     e08:	02 30       	cpi	r16, 0x02	; 2
     e0a:	11 f4       	brne	.+4      	; 0xe10 <prvCopyDataToQueue+0x82>
     e0c:	11 11       	cpse	r17, r1
     e0e:	11 50       	subi	r17, 0x01	; 1
     e10:	1f 5f       	subi	r17, 0xFF	; 255
     e12:	1a 8f       	std	Y+26, r17	; 0x1a
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	df 91       	pop	r29
     e18:	cf 91       	pop	r28
     e1a:	1f 91       	pop	r17
     e1c:	0f 91       	pop	r16
     e1e:	08 95       	ret

00000e20 <prvUnlockQueue>:
     e20:	1f 93       	push	r17
     e22:	cf 93       	push	r28
     e24:	df 93       	push	r29
     e26:	ec 01       	movw	r28, r24
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	f8 94       	cli
     e2c:	0f 92       	push	r0
     e2e:	1e 8d       	ldd	r17, Y+30	; 0x1e
     e30:	0b c0       	rjmp	.+22     	; 0xe48 <prvUnlockQueue+0x28>
     e32:	89 89       	ldd	r24, Y+17	; 0x11
     e34:	88 23       	and	r24, r24
     e36:	51 f0       	breq	.+20     	; 0xe4c <prvUnlockQueue+0x2c>
     e38:	ce 01       	movw	r24, r28
     e3a:	41 96       	adiw	r24, 0x11	; 17
     e3c:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <xTaskRemoveFromEventList>
     e40:	81 11       	cpse	r24, r1
     e42:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <vTaskMissedYield>
     e46:	11 50       	subi	r17, 0x01	; 1
     e48:	11 16       	cp	r1, r17
     e4a:	9c f3       	brlt	.-26     	; 0xe32 <prvUnlockQueue+0x12>
     e4c:	8f ef       	ldi	r24, 0xFF	; 255
     e4e:	8e 8f       	std	Y+30, r24	; 0x1e
     e50:	0f 90       	pop	r0
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	f8 94       	cli
     e58:	0f 92       	push	r0
     e5a:	1d 8d       	ldd	r17, Y+29	; 0x1d
     e5c:	0b c0       	rjmp	.+22     	; 0xe74 <prvUnlockQueue+0x54>
     e5e:	88 85       	ldd	r24, Y+8	; 0x08
     e60:	88 23       	and	r24, r24
     e62:	51 f0       	breq	.+20     	; 0xe78 <prvUnlockQueue+0x58>
     e64:	ce 01       	movw	r24, r28
     e66:	08 96       	adiw	r24, 0x08	; 8
     e68:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <xTaskRemoveFromEventList>
     e6c:	81 11       	cpse	r24, r1
     e6e:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <vTaskMissedYield>
     e72:	11 50       	subi	r17, 0x01	; 1
     e74:	11 16       	cp	r1, r17
     e76:	9c f3       	brlt	.-26     	; 0xe5e <prvUnlockQueue+0x3e>
     e78:	8f ef       	ldi	r24, 0xFF	; 255
     e7a:	8d 8f       	std	Y+29, r24	; 0x1d
     e7c:	0f 90       	pop	r0
     e7e:	0f be       	out	0x3f, r0	; 63
     e80:	df 91       	pop	r29
     e82:	cf 91       	pop	r28
     e84:	1f 91       	pop	r17
     e86:	08 95       	ret

00000e88 <xQueueGenericReset>:
     e88:	0f 93       	push	r16
     e8a:	1f 93       	push	r17
     e8c:	cf 93       	push	r28
     e8e:	df 93       	push	r29
     e90:	fc 01       	movw	r30, r24
     e92:	36 2f       	mov	r19, r22
     e94:	89 2b       	or	r24, r25
     e96:	09 f4       	brne	.+2      	; 0xe9a <xQueueGenericReset+0x12>
     e98:	4d c0       	rjmp	.+154    	; 0xf34 <xQueueGenericReset+0xac>
     e9a:	23 8d       	ldd	r18, Z+27	; 0x1b
     e9c:	22 23       	and	r18, r18
     e9e:	09 f4       	brne	.+2      	; 0xea2 <xQueueGenericReset+0x1a>
     ea0:	4b c0       	rjmp	.+150    	; 0xf38 <xQueueGenericReset+0xb0>
     ea2:	02 2f       	mov	r16, r18
     ea4:	10 e0       	ldi	r17, 0x00	; 0
     ea6:	8f ef       	ldi	r24, 0xFF	; 255
     ea8:	9f ef       	ldi	r25, 0xFF	; 255
     eaa:	b8 01       	movw	r22, r16
     eac:	0e 94 cf 11 	call	0x239e	; 0x239e <__udivmodhi4>
     eb0:	44 8d       	ldd	r20, Z+28	; 0x1c
     eb2:	84 2f       	mov	r24, r20
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	68 17       	cp	r22, r24
     eb8:	79 07       	cpc	r23, r25
     eba:	08 f4       	brcc	.+2      	; 0xebe <xQueueGenericReset+0x36>
     ebc:	3f c0       	rjmp	.+126    	; 0xf3c <xQueueGenericReset+0xb4>
     ebe:	ef 01       	movw	r28, r30
     ec0:	0f b6       	in	r0, 0x3f	; 63
     ec2:	f8 94       	cli
     ec4:	0f 92       	push	r0
     ec6:	60 81       	ld	r22, Z
     ec8:	71 81       	ldd	r23, Z+1	; 0x01
     eca:	fb 01       	movw	r30, r22
     ecc:	24 9f       	mul	r18, r20
     ece:	e0 0d       	add	r30, r0
     ed0:	f1 1d       	adc	r31, r1
     ed2:	11 24       	eor	r1, r1
     ed4:	fd 83       	std	Y+5, r31	; 0x05
     ed6:	ec 83       	std	Y+4, r30	; 0x04
     ed8:	1a 8e       	std	Y+26, r1	; 0x1a
     eda:	7b 83       	std	Y+3, r23	; 0x03
     edc:	6a 83       	std	Y+2, r22	; 0x02
     ede:	01 50       	subi	r16, 0x01	; 1
     ee0:	11 09       	sbc	r17, r1
     ee2:	80 9f       	mul	r24, r16
     ee4:	a0 01       	movw	r20, r0
     ee6:	81 9f       	mul	r24, r17
     ee8:	50 0d       	add	r21, r0
     eea:	90 9f       	mul	r25, r16
     eec:	50 0d       	add	r21, r0
     eee:	11 24       	eor	r1, r1
     ef0:	cb 01       	movw	r24, r22
     ef2:	84 0f       	add	r24, r20
     ef4:	95 1f       	adc	r25, r21
     ef6:	9f 83       	std	Y+7, r25	; 0x07
     ef8:	8e 83       	std	Y+6, r24	; 0x06
     efa:	8f ef       	ldi	r24, 0xFF	; 255
     efc:	8d 8f       	std	Y+29, r24	; 0x1d
     efe:	8e 8f       	std	Y+30, r24	; 0x1e
     f00:	31 11       	cpse	r19, r1
     f02:	0c c0       	rjmp	.+24     	; 0xf1c <xQueueGenericReset+0x94>
     f04:	88 85       	ldd	r24, Y+8	; 0x08
     f06:	88 23       	and	r24, r24
     f08:	89 f0       	breq	.+34     	; 0xf2c <xQueueGenericReset+0xa4>
     f0a:	ce 01       	movw	r24, r28
     f0c:	08 96       	adiw	r24, 0x08	; 8
     f0e:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <xTaskRemoveFromEventList>
     f12:	88 23       	and	r24, r24
     f14:	59 f0       	breq	.+22     	; 0xf2c <xQueueGenericReset+0xa4>
     f16:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <vPortYield>
     f1a:	08 c0       	rjmp	.+16     	; 0xf2c <xQueueGenericReset+0xa4>
     f1c:	ce 01       	movw	r24, r28
     f1e:	08 96       	adiw	r24, 0x08	; 8
     f20:	0e 94 09 03 	call	0x612	; 0x612 <vListInitialise>
     f24:	ce 01       	movw	r24, r28
     f26:	41 96       	adiw	r24, 0x11	; 17
     f28:	0e 94 09 03 	call	0x612	; 0x612 <vListInitialise>
     f2c:	0f 90       	pop	r0
     f2e:	0f be       	out	0x3f, r0	; 63
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	05 c0       	rjmp	.+10     	; 0xf3e <xQueueGenericReset+0xb6>
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	03 c0       	rjmp	.+6      	; 0xf3e <xQueueGenericReset+0xb6>
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	01 c0       	rjmp	.+2      	; 0xf3e <xQueueGenericReset+0xb6>
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	1f 91       	pop	r17
     f44:	0f 91       	pop	r16
     f46:	08 95       	ret

00000f48 <prvInitialiseNewQueue>:
     f48:	0f 93       	push	r16
     f4a:	1f 93       	push	r17
     f4c:	f8 01       	movw	r30, r16
     f4e:	61 11       	cpse	r22, r1
     f50:	03 c0       	rjmp	.+6      	; 0xf58 <prvInitialiseNewQueue+0x10>
     f52:	11 83       	std	Z+1, r17	; 0x01
     f54:	00 83       	st	Z, r16
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <prvInitialiseNewQueue+0x14>
     f58:	51 83       	std	Z+1, r21	; 0x01
     f5a:	40 83       	st	Z, r20
     f5c:	83 8f       	std	Z+27, r24	; 0x1b
     f5e:	64 8f       	std	Z+28, r22	; 0x1c
     f60:	61 e0       	ldi	r22, 0x01	; 1
     f62:	cf 01       	movw	r24, r30
     f64:	0e 94 44 07 	call	0xe88	; 0xe88 <xQueueGenericReset>
     f68:	1f 91       	pop	r17
     f6a:	0f 91       	pop	r16
     f6c:	08 95       	ret

00000f6e <xQueueGenericCreate>:
     f6e:	df 92       	push	r13
     f70:	ef 92       	push	r14
     f72:	ff 92       	push	r15
     f74:	0f 93       	push	r16
     f76:	1f 93       	push	r17
     f78:	cf 93       	push	r28
     f7a:	df 93       	push	r29
     f7c:	38 2f       	mov	r19, r24
     f7e:	e6 2f       	mov	r30, r22
     f80:	88 23       	and	r24, r24
     f82:	29 f1       	breq	.+74     	; 0xfce <xQueueGenericCreate+0x60>
     f84:	68 2f       	mov	r22, r24
     f86:	70 e0       	ldi	r23, 0x00	; 0
     f88:	8f ef       	ldi	r24, 0xFF	; 255
     f8a:	9f ef       	ldi	r25, 0xFF	; 255
     f8c:	0e 94 cf 11 	call	0x239e	; 0x239e <__udivmodhi4>
     f90:	8e 2f       	mov	r24, r30
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	68 17       	cp	r22, r24
     f96:	79 07       	cpc	r23, r25
     f98:	e8 f0       	brcs	.+58     	; 0xfd4 <xQueueGenericCreate+0x66>
     f9a:	3e 9f       	mul	r19, r30
     f9c:	c0 01       	movw	r24, r0
     f9e:	11 24       	eor	r1, r1
     fa0:	81 3e       	cpi	r24, 0xE1	; 225
     fa2:	2f ef       	ldi	r18, 0xFF	; 255
     fa4:	92 07       	cpc	r25, r18
     fa6:	c8 f4       	brcc	.+50     	; 0xfda <xQueueGenericCreate+0x6c>
     fa8:	d4 2e       	mov	r13, r20
     faa:	de 2f       	mov	r29, r30
     fac:	c3 2f       	mov	r28, r19
     fae:	4f 96       	adiw	r24, 0x1f	; 31
     fb0:	0e 94 29 02 	call	0x452	; 0x452 <pvPortMalloc>
     fb4:	7c 01       	movw	r14, r24
     fb6:	00 97       	sbiw	r24, 0x00	; 0
     fb8:	91 f0       	breq	.+36     	; 0xfde <xQueueGenericCreate+0x70>
     fba:	8c 01       	movw	r16, r24
     fbc:	2d 2d       	mov	r18, r13
     fbe:	ac 01       	movw	r20, r24
     fc0:	41 5e       	subi	r20, 0xE1	; 225
     fc2:	5f 4f       	sbci	r21, 0xFF	; 255
     fc4:	6d 2f       	mov	r22, r29
     fc6:	8c 2f       	mov	r24, r28
     fc8:	0e 94 a4 07 	call	0xf48	; 0xf48 <prvInitialiseNewQueue>
     fcc:	08 c0       	rjmp	.+16     	; 0xfde <xQueueGenericCreate+0x70>
     fce:	e1 2c       	mov	r14, r1
     fd0:	f1 2c       	mov	r15, r1
     fd2:	05 c0       	rjmp	.+10     	; 0xfde <xQueueGenericCreate+0x70>
     fd4:	e1 2c       	mov	r14, r1
     fd6:	f1 2c       	mov	r15, r1
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <xQueueGenericCreate+0x70>
     fda:	e1 2c       	mov	r14, r1
     fdc:	f1 2c       	mov	r15, r1
     fde:	c7 01       	movw	r24, r14
     fe0:	df 91       	pop	r29
     fe2:	cf 91       	pop	r28
     fe4:	1f 91       	pop	r17
     fe6:	0f 91       	pop	r16
     fe8:	ff 90       	pop	r15
     fea:	ef 90       	pop	r14
     fec:	df 90       	pop	r13
     fee:	08 95       	ret

00000ff0 <xQueueGenericSend>:
     ff0:	cf 92       	push	r12
     ff2:	df 92       	push	r13
     ff4:	ef 92       	push	r14
     ff6:	ff 92       	push	r15
     ff8:	0f 93       	push	r16
     ffa:	1f 93       	push	r17
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29
    1000:	00 d0       	rcall	.+0      	; 0x1002 <xQueueGenericSend+0x12>
    1002:	00 d0       	rcall	.+0      	; 0x1004 <xQueueGenericSend+0x14>
    1004:	1f 92       	push	r1
    1006:	cd b7       	in	r28, 0x3d	; 61
    1008:	de b7       	in	r29, 0x3e	; 62
    100a:	8c 01       	movw	r16, r24
    100c:	7b 01       	movw	r14, r22
    100e:	5d 83       	std	Y+5, r21	; 0x05
    1010:	4c 83       	std	Y+4, r20	; 0x04
    1012:	c2 2e       	mov	r12, r18
    1014:	d1 2c       	mov	r13, r1
    1016:	0f b6       	in	r0, 0x3f	; 63
    1018:	f8 94       	cli
    101a:	0f 92       	push	r0
    101c:	f8 01       	movw	r30, r16
    101e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1020:	83 8d       	ldd	r24, Z+27	; 0x1b
    1022:	98 17       	cp	r25, r24
    1024:	18 f0       	brcs	.+6      	; 0x102c <xQueueGenericSend+0x3c>
    1026:	f2 e0       	ldi	r31, 0x02	; 2
    1028:	cf 12       	cpse	r12, r31
    102a:	19 c0       	rjmp	.+50     	; 0x105e <xQueueGenericSend+0x6e>
    102c:	4c 2d       	mov	r20, r12
    102e:	b7 01       	movw	r22, r14
    1030:	c8 01       	movw	r24, r16
    1032:	0e 94 c7 06 	call	0xd8e	; 0xd8e <prvCopyDataToQueue>
    1036:	f8 01       	movw	r30, r16
    1038:	91 89       	ldd	r25, Z+17	; 0x11
    103a:	99 23       	and	r25, r25
    103c:	49 f0       	breq	.+18     	; 0x1050 <xQueueGenericSend+0x60>
    103e:	c8 01       	movw	r24, r16
    1040:	41 96       	adiw	r24, 0x11	; 17
    1042:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <xTaskRemoveFromEventList>
    1046:	88 23       	and	r24, r24
    1048:	31 f0       	breq	.+12     	; 0x1056 <xQueueGenericSend+0x66>
    104a:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <vPortYield>
    104e:	03 c0       	rjmp	.+6      	; 0x1056 <xQueueGenericSend+0x66>
    1050:	81 11       	cpse	r24, r1
    1052:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <vPortYield>
    1056:	0f 90       	pop	r0
    1058:	0f be       	out	0x3f, r0	; 63
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	4d c0       	rjmp	.+154    	; 0x10f8 <xQueueGenericSend+0x108>
    105e:	8c 81       	ldd	r24, Y+4	; 0x04
    1060:	9d 81       	ldd	r25, Y+5	; 0x05
    1062:	89 2b       	or	r24, r25
    1064:	21 f4       	brne	.+8      	; 0x106e <xQueueGenericSend+0x7e>
    1066:	0f 90       	pop	r0
    1068:	0f be       	out	0x3f, r0	; 63
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	45 c0       	rjmp	.+138    	; 0x10f8 <xQueueGenericSend+0x108>
    106e:	d1 10       	cpse	r13, r1
    1070:	06 c0       	rjmp	.+12     	; 0x107e <xQueueGenericSend+0x8e>
    1072:	ce 01       	movw	r24, r28
    1074:	01 96       	adiw	r24, 0x01	; 1
    1076:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <vTaskInternalSetTimeOutState>
    107a:	dd 24       	eor	r13, r13
    107c:	d3 94       	inc	r13
    107e:	0f 90       	pop	r0
    1080:	0f be       	out	0x3f, r0	; 63
    1082:	0e 94 05 0c 	call	0x180a	; 0x180a <vTaskSuspendAll>
    1086:	0f b6       	in	r0, 0x3f	; 63
    1088:	f8 94       	cli
    108a:	0f 92       	push	r0
    108c:	f8 01       	movw	r30, r16
    108e:	85 8d       	ldd	r24, Z+29	; 0x1d
    1090:	8f 3f       	cpi	r24, 0xFF	; 255
    1092:	09 f4       	brne	.+2      	; 0x1096 <xQueueGenericSend+0xa6>
    1094:	15 8e       	std	Z+29, r1	; 0x1d
    1096:	f8 01       	movw	r30, r16
    1098:	86 8d       	ldd	r24, Z+30	; 0x1e
    109a:	8f 3f       	cpi	r24, 0xFF	; 255
    109c:	09 f4       	brne	.+2      	; 0x10a0 <xQueueGenericSend+0xb0>
    109e:	16 8e       	std	Z+30, r1	; 0x1e
    10a0:	0f 90       	pop	r0
    10a2:	0f be       	out	0x3f, r0	; 63
    10a4:	be 01       	movw	r22, r28
    10a6:	6c 5f       	subi	r22, 0xFC	; 252
    10a8:	7f 4f       	sbci	r23, 0xFF	; 255
    10aa:	ce 01       	movw	r24, r28
    10ac:	01 96       	adiw	r24, 0x01	; 1
    10ae:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <xTaskCheckForTimeOut>
    10b2:	81 11       	cpse	r24, r1
    10b4:	1b c0       	rjmp	.+54     	; 0x10ec <xQueueGenericSend+0xfc>
    10b6:	c8 01       	movw	r24, r16
    10b8:	0e 94 b9 06 	call	0xd72	; 0xd72 <prvIsQueueFull>
    10bc:	88 23       	and	r24, r24
    10be:	81 f0       	breq	.+32     	; 0x10e0 <xQueueGenericSend+0xf0>
    10c0:	6c 81       	ldd	r22, Y+4	; 0x04
    10c2:	7d 81       	ldd	r23, Y+5	; 0x05
    10c4:	c8 01       	movw	r24, r16
    10c6:	08 96       	adiw	r24, 0x08	; 8
    10c8:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <vTaskPlaceOnEventList>
    10cc:	c8 01       	movw	r24, r16
    10ce:	0e 94 10 07 	call	0xe20	; 0xe20 <prvUnlockQueue>
    10d2:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <xTaskResumeAll>
    10d6:	81 11       	cpse	r24, r1
    10d8:	9e cf       	rjmp	.-196    	; 0x1016 <xQueueGenericSend+0x26>
    10da:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <vPortYield>
    10de:	9b cf       	rjmp	.-202    	; 0x1016 <xQueueGenericSend+0x26>
    10e0:	c8 01       	movw	r24, r16
    10e2:	0e 94 10 07 	call	0xe20	; 0xe20 <prvUnlockQueue>
    10e6:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <xTaskResumeAll>
    10ea:	95 cf       	rjmp	.-214    	; 0x1016 <xQueueGenericSend+0x26>
    10ec:	c8 01       	movw	r24, r16
    10ee:	0e 94 10 07 	call	0xe20	; 0xe20 <prvUnlockQueue>
    10f2:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <xTaskResumeAll>
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	0f 90       	pop	r0
    10fa:	0f 90       	pop	r0
    10fc:	0f 90       	pop	r0
    10fe:	0f 90       	pop	r0
    1100:	0f 90       	pop	r0
    1102:	df 91       	pop	r29
    1104:	cf 91       	pop	r28
    1106:	1f 91       	pop	r17
    1108:	0f 91       	pop	r16
    110a:	ff 90       	pop	r15
    110c:	ef 90       	pop	r14
    110e:	df 90       	pop	r13
    1110:	cf 90       	pop	r12
    1112:	08 95       	ret

00001114 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
    1114:	ff 92       	push	r15
    1116:	0f 93       	push	r16
    1118:	1f 93       	push	r17
    111a:	cf 93       	push	r28
    111c:	df 93       	push	r29
    111e:	00 d0       	rcall	.+0      	; 0x1120 <xQueueSemaphoreTake+0xc>
    1120:	00 d0       	rcall	.+0      	; 0x1122 <xQueueSemaphoreTake+0xe>
    1122:	1f 92       	push	r1
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
    1128:	8c 01       	movw	r16, r24
    112a:	7d 83       	std	Y+5, r23	; 0x05
    112c:	6c 83       	std	Y+4, r22	; 0x04
    BaseType_t xEntryTimeSet = pdFALSE;
    112e:	f1 2c       	mov	r15, r1
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	f8 94       	cli
    1134:	0f 92       	push	r0
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
    1136:	f8 01       	movw	r30, r16
    1138:	82 8d       	ldd	r24, Z+26	; 0x1a

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
    113a:	88 23       	and	r24, r24
    113c:	81 f0       	breq	.+32     	; 0x115e <xQueueSemaphoreTake+0x4a>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
    113e:	81 50       	subi	r24, 0x01	; 1
    1140:	82 8f       	std	Z+26, r24	; 0x1a
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1142:	80 85       	ldd	r24, Z+8	; 0x08
    1144:	88 23       	and	r24, r24
    1146:	39 f0       	breq	.+14     	; 0x1156 <xQueueSemaphoreTake+0x42>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1148:	c8 01       	movw	r24, r16
    114a:	08 96       	adiw	r24, 0x08	; 8
    114c:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <xTaskRemoveFromEventList>
    1150:	81 11       	cpse	r24, r1
                    {
                        queueYIELD_IF_USING_PREEMPTION();
    1152:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
    1156:	0f 90       	pop	r0
    1158:	0f be       	out	0x3f, r0	; 63
                return pdPASS;
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	53 c0       	rjmp	.+166    	; 0x1204 <xQueueSemaphoreTake+0xf0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
    115e:	8c 81       	ldd	r24, Y+4	; 0x04
    1160:	9d 81       	ldd	r25, Y+5	; 0x05
    1162:	89 2b       	or	r24, r25
    1164:	21 f4       	brne	.+8      	; 0x116e <xQueueSemaphoreTake+0x5a>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
    1166:	0f 90       	pop	r0
    1168:	0f be       	out	0x3f, r0	; 63
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	4b c0       	rjmp	.+150    	; 0x1204 <xQueueSemaphoreTake+0xf0>
                }
                else if( xEntryTimeSet == pdFALSE )
    116e:	f1 10       	cpse	r15, r1
    1170:	06 c0       	rjmp	.+12     	; 0x117e <xQueueSemaphoreTake+0x6a>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
    1172:	ce 01       	movw	r24, r28
    1174:	01 96       	adiw	r24, 0x01	; 1
    1176:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
    117a:	ff 24       	eor	r15, r15
    117c:	f3 94       	inc	r15
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
    117e:	0f 90       	pop	r0
    1180:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
    1182:	0e 94 05 0c 	call	0x180a	; 0x180a <vTaskSuspendAll>
        prvLockQueue( pxQueue );
    1186:	0f b6       	in	r0, 0x3f	; 63
    1188:	f8 94       	cli
    118a:	0f 92       	push	r0
    118c:	f8 01       	movw	r30, r16
    118e:	85 8d       	ldd	r24, Z+29	; 0x1d
    1190:	8f 3f       	cpi	r24, 0xFF	; 255
    1192:	09 f4       	brne	.+2      	; 0x1196 <xQueueSemaphoreTake+0x82>
    1194:	15 8e       	std	Z+29, r1	; 0x1d
    1196:	f8 01       	movw	r30, r16
    1198:	86 8d       	ldd	r24, Z+30	; 0x1e
    119a:	8f 3f       	cpi	r24, 0xFF	; 255
    119c:	09 f4       	brne	.+2      	; 0x11a0 <xQueueSemaphoreTake+0x8c>
    119e:	16 8e       	std	Z+30, r1	; 0x1e
    11a0:	0f 90       	pop	r0
    11a2:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    11a4:	be 01       	movw	r22, r28
    11a6:	6c 5f       	subi	r22, 0xFC	; 252
    11a8:	7f 4f       	sbci	r23, 0xFF	; 255
    11aa:	ce 01       	movw	r24, r28
    11ac:	01 96       	adiw	r24, 0x01	; 1
    11ae:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <xTaskCheckForTimeOut>
    11b2:	81 11       	cpse	r24, r1
    11b4:	1b c0       	rjmp	.+54     	; 0x11ec <xQueueSemaphoreTake+0xd8>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    11b6:	c8 01       	movw	r24, r16
    11b8:	0e 94 ac 06 	call	0xd58	; 0xd58 <prvIsQueueEmpty>
    11bc:	88 23       	and	r24, r24
    11be:	81 f0       	breq	.+32     	; 0x11e0 <xQueueSemaphoreTake+0xcc>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    11c0:	6c 81       	ldd	r22, Y+4	; 0x04
    11c2:	7d 81       	ldd	r23, Y+5	; 0x05
    11c4:	c8 01       	movw	r24, r16
    11c6:	41 96       	adiw	r24, 0x11	; 17
    11c8:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
    11cc:	c8 01       	movw	r24, r16
    11ce:	0e 94 10 07 	call	0xe20	; 0xe20 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
    11d2:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <xTaskResumeAll>
    11d6:	81 11       	cpse	r24, r1
    11d8:	ab cf       	rjmp	.-170    	; 0x1130 <xQueueSemaphoreTake+0x1c>
                {
                    portYIELD_WITHIN_API();
    11da:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <vPortYield>
    11de:	a8 cf       	rjmp	.-176    	; 0x1130 <xQueueSemaphoreTake+0x1c>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
    11e0:	c8 01       	movw	r24, r16
    11e2:	0e 94 10 07 	call	0xe20	; 0xe20 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
    11e6:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <xTaskResumeAll>
    11ea:	a2 cf       	rjmp	.-188    	; 0x1130 <xQueueSemaphoreTake+0x1c>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
    11ec:	c8 01       	movw	r24, r16
    11ee:	0e 94 10 07 	call	0xe20	; 0xe20 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
    11f2:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    11f6:	c8 01       	movw	r24, r16
    11f8:	0e 94 ac 06 	call	0xd58	; 0xd58 <prvIsQueueEmpty>
    11fc:	88 23       	and	r24, r24
    11fe:	09 f4       	brne	.+2      	; 0x1202 <xQueueSemaphoreTake+0xee>
    1200:	97 cf       	rjmp	.-210    	; 0x1130 <xQueueSemaphoreTake+0x1c>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
    1202:	80 e0       	ldi	r24, 0x00	; 0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	df 91       	pop	r29
    1210:	cf 91       	pop	r28
    1212:	1f 91       	pop	r17
    1214:	0f 91       	pop	r16
    1216:	ff 90       	pop	r15
    1218:	08 95       	ret

0000121a <prvTaskIsTaskSuspended>:
    taskENTER_CRITICAL();
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
        pxTimeOut->xTimeOnEntering = xTickCount;
    }
    taskEXIT_CRITICAL();
    121a:	fc 01       	movw	r30, r24
    121c:	22 85       	ldd	r18, Z+10	; 0x0a
    121e:	33 85       	ldd	r19, Z+11	; 0x0b
    1220:	2c 5b       	subi	r18, 0xBC	; 188
    1222:	37 40       	sbci	r19, 0x07	; 7
    1224:	59 f4       	brne	.+22     	; 0x123c <prvTaskIsTaskSuspended+0x22>
    1226:	fc 01       	movw	r30, r24
    1228:	84 89       	ldd	r24, Z+20	; 0x14
    122a:	95 89       	ldd	r25, Z+21	; 0x15
    122c:	f7 e0       	ldi	r31, 0x07	; 7
    122e:	8f 3c       	cpi	r24, 0xCF	; 207
    1230:	9f 07       	cpc	r25, r31
    1232:	31 f0       	breq	.+12     	; 0x1240 <prvTaskIsTaskSuspended+0x26>
    1234:	89 2b       	or	r24, r25
    1236:	31 f0       	breq	.+12     	; 0x1244 <prvTaskIsTaskSuspended+0x2a>
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	08 95       	ret
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	08 95       	ret
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	08 95       	ret
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	08 95       	ret

00001248 <prvResetNextTaskUnblockTime>:
    1248:	e0 91 da 07 	lds	r30, 0x07DA	; 0x8007da <pxDelayedTaskList>
    124c:	f0 91 db 07 	lds	r31, 0x07DB	; 0x8007db <pxDelayedTaskList+0x1>
    1250:	80 81       	ld	r24, Z
    1252:	81 11       	cpse	r24, r1
    1254:	07 c0       	rjmp	.+14     	; 0x1264 <prvResetNextTaskUnblockTime+0x1c>
    1256:	8f ef       	ldi	r24, 0xFF	; 255
    1258:	9f ef       	ldi	r25, 0xFF	; 255
    125a:	90 93 b1 07 	sts	0x07B1, r25	; 0x8007b1 <xNextTaskUnblockTime+0x1>
    125e:	80 93 b0 07 	sts	0x07B0, r24	; 0x8007b0 <xNextTaskUnblockTime>
    1262:	08 95       	ret
    1264:	e0 91 da 07 	lds	r30, 0x07DA	; 0x8007da <pxDelayedTaskList>
    1268:	f0 91 db 07 	lds	r31, 0x07DB	; 0x8007db <pxDelayedTaskList+0x1>
    126c:	05 80       	ldd	r0, Z+5	; 0x05
    126e:	f6 81       	ldd	r31, Z+6	; 0x06
    1270:	e0 2d       	mov	r30, r0
    1272:	80 81       	ld	r24, Z
    1274:	91 81       	ldd	r25, Z+1	; 0x01
    1276:	90 93 b1 07 	sts	0x07B1, r25	; 0x8007b1 <xNextTaskUnblockTime+0x1>
    127a:	80 93 b0 07 	sts	0x07B0, r24	; 0x8007b0 <xNextTaskUnblockTime>
    127e:	08 95       	ret

00001280 <prvDeleteTCB>:
    1280:	cf 93       	push	r28
    1282:	df 93       	push	r29
    1284:	ec 01       	movw	r28, r24
    1286:	8f 89       	ldd	r24, Y+23	; 0x17
    1288:	98 8d       	ldd	r25, Y+24	; 0x18
    128a:	0e 94 c3 02 	call	0x586	; 0x586 <vPortFree>
    128e:	ce 01       	movw	r24, r28
    1290:	0e 94 c3 02 	call	0x586	; 0x586 <vPortFree>
    1294:	df 91       	pop	r29
    1296:	cf 91       	pop	r28
    1298:	08 95       	ret

0000129a <prvInitialiseNewTask>:
    129a:	6f 92       	push	r6
    129c:	7f 92       	push	r7
    129e:	8f 92       	push	r8
    12a0:	9f 92       	push	r9
    12a2:	af 92       	push	r10
    12a4:	bf 92       	push	r11
    12a6:	cf 92       	push	r12
    12a8:	df 92       	push	r13
    12aa:	ef 92       	push	r14
    12ac:	0f 93       	push	r16
    12ae:	1f 93       	push	r17
    12b0:	cf 93       	push	r28
    12b2:	df 93       	push	r29
    12b4:	cd b7       	in	r28, 0x3d	; 61
    12b6:	de b7       	in	r29, 0x3e	; 62
    12b8:	4c 01       	movw	r8, r24
    12ba:	f5 01       	movw	r30, r10
    12bc:	87 89       	ldd	r24, Z+23	; 0x17
    12be:	90 8d       	ldd	r25, Z+24	; 0x18
    12c0:	21 50       	subi	r18, 0x01	; 1
    12c2:	31 09       	sbc	r19, r1
    12c4:	3c 01       	movw	r6, r24
    12c6:	62 0e       	add	r6, r18
    12c8:	73 1e       	adc	r7, r19
    12ca:	61 15       	cp	r22, r1
    12cc:	71 05       	cpc	r23, r1
    12ce:	89 f4       	brne	.+34     	; 0x12f2 <prvInitialiseNewTask+0x58>
    12d0:	15 c0       	rjmp	.+42     	; 0x12fc <prvInitialiseNewTask+0x62>
    12d2:	82 2f       	mov	r24, r18
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	fb 01       	movw	r30, r22
    12d8:	e8 0f       	add	r30, r24
    12da:	f9 1f       	adc	r31, r25
    12dc:	30 81       	ld	r19, Z
    12de:	d5 01       	movw	r26, r10
    12e0:	a8 0f       	add	r26, r24
    12e2:	b9 1f       	adc	r27, r25
    12e4:	59 96       	adiw	r26, 0x19	; 25
    12e6:	3c 93       	st	X, r19
    12e8:	80 81       	ld	r24, Z
    12ea:	88 23       	and	r24, r24
    12ec:	29 f0       	breq	.+10     	; 0x12f8 <prvInitialiseNewTask+0x5e>
    12ee:	2f 5f       	subi	r18, 0xFF	; 255
    12f0:	01 c0       	rjmp	.+2      	; 0x12f4 <prvInitialiseNewTask+0x5a>
    12f2:	20 e0       	ldi	r18, 0x00	; 0
    12f4:	2a 30       	cpi	r18, 0x0A	; 10
    12f6:	68 f3       	brcs	.-38     	; 0x12d2 <prvInitialiseNewTask+0x38>
    12f8:	f5 01       	movw	r30, r10
    12fa:	12 a2       	std	Z+34, r1	; 0x22
    12fc:	f6 e0       	ldi	r31, 0x06	; 6
    12fe:	fe 15       	cp	r31, r14
    1300:	20 f4       	brcc	.+8      	; 0x130a <prvInitialiseNewTask+0x70>
    1302:	0f 2e       	mov	r0, r31
    1304:	f6 e0       	ldi	r31, 0x06	; 6
    1306:	ef 2e       	mov	r14, r31
    1308:	f0 2d       	mov	r31, r0
    130a:	f5 01       	movw	r30, r10
    130c:	e6 8a       	std	Z+22, r14	; 0x16
    130e:	c5 01       	movw	r24, r10
    1310:	02 96       	adiw	r24, 0x02	; 2
    1312:	0e 94 17 03 	call	0x62e	; 0x62e <vListInitialiseItem>
    1316:	c5 01       	movw	r24, r10
    1318:	0c 96       	adiw	r24, 0x0c	; 12
    131a:	0e 94 17 03 	call	0x62e	; 0x62e <vListInitialiseItem>
    131e:	f5 01       	movw	r30, r10
    1320:	b1 86       	std	Z+9, r11	; 0x09
    1322:	a0 86       	std	Z+8, r10	; 0x08
    1324:	87 e0       	ldi	r24, 0x07	; 7
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	8e 19       	sub	r24, r14
    132a:	91 09       	sbc	r25, r1
    132c:	95 87       	std	Z+13, r25	; 0x0d
    132e:	84 87       	std	Z+12, r24	; 0x0c
    1330:	b3 8a       	std	Z+19, r11	; 0x13
    1332:	a2 8a       	std	Z+18, r10	; 0x12
    1334:	a8 01       	movw	r20, r16
    1336:	b4 01       	movw	r22, r8
    1338:	c3 01       	movw	r24, r6
    133a:	0e 94 4e 05 	call	0xa9c	; 0xa9c <pxPortInitialiseStack>
    133e:	f5 01       	movw	r30, r10
    1340:	91 83       	std	Z+1, r25	; 0x01
    1342:	80 83       	st	Z, r24
    1344:	c1 14       	cp	r12, r1
    1346:	d1 04       	cpc	r13, r1
    1348:	19 f0       	breq	.+6      	; 0x1350 <prvInitialiseNewTask+0xb6>
    134a:	f6 01       	movw	r30, r12
    134c:	b1 82       	std	Z+1, r11	; 0x01
    134e:	a0 82       	st	Z, r10
    1350:	df 91       	pop	r29
    1352:	cf 91       	pop	r28
    1354:	1f 91       	pop	r17
    1356:	0f 91       	pop	r16
    1358:	ef 90       	pop	r14
    135a:	df 90       	pop	r13
    135c:	cf 90       	pop	r12
    135e:	bf 90       	pop	r11
    1360:	af 90       	pop	r10
    1362:	9f 90       	pop	r9
    1364:	8f 90       	pop	r8
    1366:	7f 90       	pop	r7
    1368:	6f 90       	pop	r6
    136a:	08 95       	ret

0000136c <prvInitialiseTaskLists>:
    136c:	cf 93       	push	r28
    136e:	c0 e0       	ldi	r28, 0x00	; 0
    1370:	10 c0       	rjmp	.+32     	; 0x1392 <prvInitialiseTaskLists+0x26>
    1372:	8c 2f       	mov	r24, r28
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	9c 01       	movw	r18, r24
    1378:	22 0f       	add	r18, r18
    137a:	33 1f       	adc	r19, r19
    137c:	22 0f       	add	r18, r18
    137e:	33 1f       	adc	r19, r19
    1380:	22 0f       	add	r18, r18
    1382:	33 1f       	adc	r19, r19
    1384:	82 0f       	add	r24, r18
    1386:	93 1f       	adc	r25, r19
    1388:	82 51       	subi	r24, 0x12	; 18
    138a:	98 4f       	sbci	r25, 0xF8	; 248
    138c:	0e 94 09 03 	call	0x612	; 0x612 <vListInitialise>
    1390:	cf 5f       	subi	r28, 0xFF	; 255
    1392:	c7 30       	cpi	r28, 0x07	; 7
    1394:	70 f3       	brcs	.-36     	; 0x1372 <prvInitialiseTaskLists+0x6>
    1396:	85 ee       	ldi	r24, 0xE5	; 229
    1398:	97 e0       	ldi	r25, 0x07	; 7
    139a:	0e 94 09 03 	call	0x612	; 0x612 <vListInitialise>
    139e:	8c ed       	ldi	r24, 0xDC	; 220
    13a0:	97 e0       	ldi	r25, 0x07	; 7
    13a2:	0e 94 09 03 	call	0x612	; 0x612 <vListInitialise>
    13a6:	8f ec       	ldi	r24, 0xCF	; 207
    13a8:	97 e0       	ldi	r25, 0x07	; 7
    13aa:	0e 94 09 03 	call	0x612	; 0x612 <vListInitialise>
    13ae:	86 ec       	ldi	r24, 0xC6	; 198
    13b0:	97 e0       	ldi	r25, 0x07	; 7
    13b2:	0e 94 09 03 	call	0x612	; 0x612 <vListInitialise>
    13b6:	8c eb       	ldi	r24, 0xBC	; 188
    13b8:	97 e0       	ldi	r25, 0x07	; 7
    13ba:	0e 94 09 03 	call	0x612	; 0x612 <vListInitialise>
    13be:	85 ee       	ldi	r24, 0xE5	; 229
    13c0:	97 e0       	ldi	r25, 0x07	; 7
    13c2:	90 93 db 07 	sts	0x07DB, r25	; 0x8007db <pxDelayedTaskList+0x1>
    13c6:	80 93 da 07 	sts	0x07DA, r24	; 0x8007da <pxDelayedTaskList>
    13ca:	8c ed       	ldi	r24, 0xDC	; 220
    13cc:	97 e0       	ldi	r25, 0x07	; 7
    13ce:	90 93 d9 07 	sts	0x07D9, r25	; 0x8007d9 <pxOverflowDelayedTaskList+0x1>
    13d2:	80 93 d8 07 	sts	0x07D8, r24	; 0x8007d8 <pxOverflowDelayedTaskList>
    13d6:	cf 91       	pop	r28
    13d8:	08 95       	ret

000013da <prvAddNewTaskToReadyList>:
    13da:	cf 93       	push	r28
    13dc:	df 93       	push	r29
    13de:	ec 01       	movw	r28, r24
    13e0:	0f b6       	in	r0, 0x3f	; 63
    13e2:	f8 94       	cli
    13e4:	0f 92       	push	r0
    13e6:	80 91 bb 07 	lds	r24, 0x07BB	; 0x8007bb <uxCurrentNumberOfTasks>
    13ea:	8f 5f       	subi	r24, 0xFF	; 255
    13ec:	80 93 bb 07 	sts	0x07BB, r24	; 0x8007bb <uxCurrentNumberOfTasks>
    13f0:	80 91 2d 08 	lds	r24, 0x082D	; 0x80082d <pxCurrentTCB>
    13f4:	90 91 2e 08 	lds	r25, 0x082E	; 0x80082e <pxCurrentTCB+0x1>
    13f8:	89 2b       	or	r24, r25
    13fa:	59 f4       	brne	.+22     	; 0x1412 <prvAddNewTaskToReadyList+0x38>
    13fc:	d0 93 2e 08 	sts	0x082E, r29	; 0x80082e <pxCurrentTCB+0x1>
    1400:	c0 93 2d 08 	sts	0x082D, r28	; 0x80082d <pxCurrentTCB>
    1404:	80 91 bb 07 	lds	r24, 0x07BB	; 0x8007bb <uxCurrentNumberOfTasks>
    1408:	81 30       	cpi	r24, 0x01	; 1
    140a:	99 f4       	brne	.+38     	; 0x1432 <prvAddNewTaskToReadyList+0x58>
    140c:	0e 94 b6 09 	call	0x136c	; 0x136c <prvInitialiseTaskLists>
    1410:	10 c0       	rjmp	.+32     	; 0x1432 <prvAddNewTaskToReadyList+0x58>
    1412:	80 91 b7 07 	lds	r24, 0x07B7	; 0x8007b7 <xSchedulerRunning>
    1416:	81 11       	cpse	r24, r1
    1418:	0c c0       	rjmp	.+24     	; 0x1432 <prvAddNewTaskToReadyList+0x58>
    141a:	e0 91 2d 08 	lds	r30, 0x082D	; 0x80082d <pxCurrentTCB>
    141e:	f0 91 2e 08 	lds	r31, 0x082E	; 0x80082e <pxCurrentTCB+0x1>
    1422:	96 89       	ldd	r25, Z+22	; 0x16
    1424:	8e 89       	ldd	r24, Y+22	; 0x16
    1426:	89 17       	cp	r24, r25
    1428:	20 f0       	brcs	.+8      	; 0x1432 <prvAddNewTaskToReadyList+0x58>
    142a:	d0 93 2e 08 	sts	0x082E, r29	; 0x80082e <pxCurrentTCB+0x1>
    142e:	c0 93 2d 08 	sts	0x082D, r28	; 0x80082d <pxCurrentTCB>
    1432:	80 91 b2 07 	lds	r24, 0x07B2	; 0x8007b2 <uxTaskNumber>
    1436:	8f 5f       	subi	r24, 0xFF	; 255
    1438:	80 93 b2 07 	sts	0x07B2, r24	; 0x8007b2 <uxTaskNumber>
    143c:	8e 89       	ldd	r24, Y+22	; 0x16
    143e:	90 91 b8 07 	lds	r25, 0x07B8	; 0x8007b8 <uxTopReadyPriority>
    1442:	98 17       	cp	r25, r24
    1444:	10 f4       	brcc	.+4      	; 0x144a <prvAddNewTaskToReadyList+0x70>
    1446:	80 93 b8 07 	sts	0x07B8, r24	; 0x8007b8 <uxTopReadyPriority>
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	fc 01       	movw	r30, r24
    144e:	ee 0f       	add	r30, r30
    1450:	ff 1f       	adc	r31, r31
    1452:	ee 0f       	add	r30, r30
    1454:	ff 1f       	adc	r31, r31
    1456:	ee 0f       	add	r30, r30
    1458:	ff 1f       	adc	r31, r31
    145a:	8e 0f       	add	r24, r30
    145c:	9f 1f       	adc	r25, r31
    145e:	fc 01       	movw	r30, r24
    1460:	e2 51       	subi	r30, 0x12	; 18
    1462:	f8 4f       	sbci	r31, 0xF8	; 248
    1464:	01 80       	ldd	r0, Z+1	; 0x01
    1466:	f2 81       	ldd	r31, Z+2	; 0x02
    1468:	e0 2d       	mov	r30, r0
    146a:	fd 83       	std	Y+5, r31	; 0x05
    146c:	ec 83       	std	Y+4, r30	; 0x04
    146e:	84 81       	ldd	r24, Z+4	; 0x04
    1470:	95 81       	ldd	r25, Z+5	; 0x05
    1472:	9f 83       	std	Y+7, r25	; 0x07
    1474:	8e 83       	std	Y+6, r24	; 0x06
    1476:	a4 81       	ldd	r26, Z+4	; 0x04
    1478:	b5 81       	ldd	r27, Z+5	; 0x05
    147a:	ce 01       	movw	r24, r28
    147c:	02 96       	adiw	r24, 0x02	; 2
    147e:	13 96       	adiw	r26, 0x03	; 3
    1480:	9c 93       	st	X, r25
    1482:	8e 93       	st	-X, r24
    1484:	12 97       	sbiw	r26, 0x02	; 2
    1486:	95 83       	std	Z+5, r25	; 0x05
    1488:	84 83       	std	Z+4, r24	; 0x04
    148a:	ee 89       	ldd	r30, Y+22	; 0x16
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	cf 01       	movw	r24, r30
    1490:	88 0f       	add	r24, r24
    1492:	99 1f       	adc	r25, r25
    1494:	88 0f       	add	r24, r24
    1496:	99 1f       	adc	r25, r25
    1498:	88 0f       	add	r24, r24
    149a:	99 1f       	adc	r25, r25
    149c:	e8 0f       	add	r30, r24
    149e:	f9 1f       	adc	r31, r25
    14a0:	e2 51       	subi	r30, 0x12	; 18
    14a2:	f8 4f       	sbci	r31, 0xF8	; 248
    14a4:	fb 87       	std	Y+11, r31	; 0x0b
    14a6:	ea 87       	std	Y+10, r30	; 0x0a
    14a8:	80 81       	ld	r24, Z
    14aa:	8f 5f       	subi	r24, 0xFF	; 255
    14ac:	80 83       	st	Z, r24
    14ae:	0f 90       	pop	r0
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	80 91 b7 07 	lds	r24, 0x07B7	; 0x8007b7 <xSchedulerRunning>
    14b6:	88 23       	and	r24, r24
    14b8:	51 f0       	breq	.+20     	; 0x14ce <prvAddNewTaskToReadyList+0xf4>
    14ba:	e0 91 2d 08 	lds	r30, 0x082D	; 0x80082d <pxCurrentTCB>
    14be:	f0 91 2e 08 	lds	r31, 0x082E	; 0x80082e <pxCurrentTCB+0x1>
    14c2:	96 89       	ldd	r25, Z+22	; 0x16
    14c4:	8e 89       	ldd	r24, Y+22	; 0x16
    14c6:	98 17       	cp	r25, r24
    14c8:	10 f4       	brcc	.+4      	; 0x14ce <prvAddNewTaskToReadyList+0xf4>
    14ca:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <vPortYield>
    14ce:	df 91       	pop	r29
    14d0:	cf 91       	pop	r28
    14d2:	08 95       	ret

000014d4 <prvCheckTasksWaitingTermination>:
    14d4:	cf 93       	push	r28
    14d6:	df 93       	push	r29
    14d8:	1c c0       	rjmp	.+56     	; 0x1512 <prvCheckTasksWaitingTermination+0x3e>
    14da:	0f b6       	in	r0, 0x3f	; 63
    14dc:	f8 94       	cli
    14de:	0f 92       	push	r0
    14e0:	e0 91 cb 07 	lds	r30, 0x07CB	; 0x8007cb <xTasksWaitingTermination+0x5>
    14e4:	f0 91 cc 07 	lds	r31, 0x07CC	; 0x8007cc <xTasksWaitingTermination+0x6>
    14e8:	c6 81       	ldd	r28, Z+6	; 0x06
    14ea:	d7 81       	ldd	r29, Z+7	; 0x07
    14ec:	ce 01       	movw	r24, r28
    14ee:	02 96       	adiw	r24, 0x02	; 2
    14f0:	0e 94 6d 03 	call	0x6da	; 0x6da <uxListRemove>
    14f4:	80 91 bb 07 	lds	r24, 0x07BB	; 0x8007bb <uxCurrentNumberOfTasks>
    14f8:	81 50       	subi	r24, 0x01	; 1
    14fa:	80 93 bb 07 	sts	0x07BB, r24	; 0x8007bb <uxCurrentNumberOfTasks>
    14fe:	80 91 c5 07 	lds	r24, 0x07C5	; 0x8007c5 <uxDeletedTasksWaitingCleanUp>
    1502:	81 50       	subi	r24, 0x01	; 1
    1504:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <uxDeletedTasksWaitingCleanUp>
    1508:	0f 90       	pop	r0
    150a:	0f be       	out	0x3f, r0	; 63
    150c:	ce 01       	movw	r24, r28
    150e:	0e 94 40 09 	call	0x1280	; 0x1280 <prvDeleteTCB>
    1512:	80 91 c5 07 	lds	r24, 0x07C5	; 0x8007c5 <uxDeletedTasksWaitingCleanUp>
    1516:	81 11       	cpse	r24, r1
    1518:	e0 cf       	rjmp	.-64     	; 0x14da <prvCheckTasksWaitingTermination+0x6>
    151a:	df 91       	pop	r29
    151c:	cf 91       	pop	r28
    151e:	08 95       	ret

00001520 <prvIdleTask>:
    1520:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <prvCheckTasksWaitingTermination>
    1524:	80 91 ee 07 	lds	r24, 0x07EE	; 0x8007ee <pxReadyTasksLists>
    1528:	82 30       	cpi	r24, 0x02	; 2
    152a:	d0 f3       	brcs	.-12     	; 0x1520 <prvIdleTask>
    152c:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <vPortYield>
    1530:	f7 cf       	rjmp	.-18     	; 0x1520 <prvIdleTask>

00001532 <prvAddCurrentTaskToDelayedList>:
    1532:	ff 92       	push	r15
    1534:	0f 93       	push	r16
    1536:	1f 93       	push	r17
    1538:	cf 93       	push	r28
    153a:	df 93       	push	r29
    153c:	ec 01       	movw	r28, r24
    153e:	f6 2e       	mov	r15, r22
    1540:	00 91 b9 07 	lds	r16, 0x07B9	; 0x8007b9 <xTickCount>
    1544:	10 91 ba 07 	lds	r17, 0x07BA	; 0x8007ba <xTickCount+0x1>
    1548:	80 91 2d 08 	lds	r24, 0x082D	; 0x80082d <pxCurrentTCB>
    154c:	90 91 2e 08 	lds	r25, 0x082E	; 0x80082e <pxCurrentTCB+0x1>
    1550:	02 96       	adiw	r24, 0x02	; 2
    1552:	0e 94 6d 03 	call	0x6da	; 0x6da <uxListRemove>
    1556:	cf 3f       	cpi	r28, 0xFF	; 255
    1558:	8f ef       	ldi	r24, 0xFF	; 255
    155a:	d8 07       	cpc	r29, r24
    155c:	b1 f5       	brne	.+108    	; 0x15ca <prvAddCurrentTaskToDelayedList+0x98>
    155e:	ff 20       	and	r15, r15
    1560:	a1 f1       	breq	.+104    	; 0x15ca <prvAddCurrentTaskToDelayedList+0x98>
    1562:	ec eb       	ldi	r30, 0xBC	; 188
    1564:	f7 e0       	ldi	r31, 0x07	; 7
    1566:	a1 81       	ldd	r26, Z+1	; 0x01
    1568:	b2 81       	ldd	r27, Z+2	; 0x02
    156a:	c0 91 2d 08 	lds	r28, 0x082D	; 0x80082d <pxCurrentTCB>
    156e:	d0 91 2e 08 	lds	r29, 0x082E	; 0x80082e <pxCurrentTCB+0x1>
    1572:	bd 83       	std	Y+5, r27	; 0x05
    1574:	ac 83       	std	Y+4, r26	; 0x04
    1576:	c0 91 2d 08 	lds	r28, 0x082D	; 0x80082d <pxCurrentTCB>
    157a:	d0 91 2e 08 	lds	r29, 0x082E	; 0x80082e <pxCurrentTCB+0x1>
    157e:	14 96       	adiw	r26, 0x04	; 4
    1580:	8d 91       	ld	r24, X+
    1582:	9c 91       	ld	r25, X
    1584:	15 97       	sbiw	r26, 0x05	; 5
    1586:	9f 83       	std	Y+7, r25	; 0x07
    1588:	8e 83       	std	Y+6, r24	; 0x06
    158a:	14 96       	adiw	r26, 0x04	; 4
    158c:	cd 91       	ld	r28, X+
    158e:	dc 91       	ld	r29, X
    1590:	15 97       	sbiw	r26, 0x05	; 5
    1592:	80 91 2d 08 	lds	r24, 0x082D	; 0x80082d <pxCurrentTCB>
    1596:	90 91 2e 08 	lds	r25, 0x082E	; 0x80082e <pxCurrentTCB+0x1>
    159a:	02 96       	adiw	r24, 0x02	; 2
    159c:	9b 83       	std	Y+3, r25	; 0x03
    159e:	8a 83       	std	Y+2, r24	; 0x02
    15a0:	80 91 2d 08 	lds	r24, 0x082D	; 0x80082d <pxCurrentTCB>
    15a4:	90 91 2e 08 	lds	r25, 0x082E	; 0x80082e <pxCurrentTCB+0x1>
    15a8:	02 96       	adiw	r24, 0x02	; 2
    15aa:	15 96       	adiw	r26, 0x05	; 5
    15ac:	9c 93       	st	X, r25
    15ae:	8e 93       	st	-X, r24
    15b0:	14 97       	sbiw	r26, 0x04	; 4
    15b2:	a0 91 2d 08 	lds	r26, 0x082D	; 0x80082d <pxCurrentTCB>
    15b6:	b0 91 2e 08 	lds	r27, 0x082E	; 0x80082e <pxCurrentTCB+0x1>
    15ba:	1b 96       	adiw	r26, 0x0b	; 11
    15bc:	fc 93       	st	X, r31
    15be:	ee 93       	st	-X, r30
    15c0:	1a 97       	sbiw	r26, 0x0a	; 10
    15c2:	80 81       	ld	r24, Z
    15c4:	8f 5f       	subi	r24, 0xFF	; 255
    15c6:	80 83       	st	Z, r24
    15c8:	2f c0       	rjmp	.+94     	; 0x1628 <prvAddCurrentTaskToDelayedList+0xf6>
    15ca:	c0 0f       	add	r28, r16
    15cc:	d1 1f       	adc	r29, r17
    15ce:	e0 91 2d 08 	lds	r30, 0x082D	; 0x80082d <pxCurrentTCB>
    15d2:	f0 91 2e 08 	lds	r31, 0x082E	; 0x80082e <pxCurrentTCB+0x1>
    15d6:	d3 83       	std	Z+3, r29	; 0x03
    15d8:	c2 83       	std	Z+2, r28	; 0x02
    15da:	c0 17       	cp	r28, r16
    15dc:	d1 07       	cpc	r29, r17
    15de:	68 f4       	brcc	.+26     	; 0x15fa <prvAddCurrentTaskToDelayedList+0xc8>
    15e0:	60 91 2d 08 	lds	r22, 0x082D	; 0x80082d <pxCurrentTCB>
    15e4:	70 91 2e 08 	lds	r23, 0x082E	; 0x80082e <pxCurrentTCB+0x1>
    15e8:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <pxOverflowDelayedTaskList>
    15ec:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <pxOverflowDelayedTaskList+0x1>
    15f0:	6e 5f       	subi	r22, 0xFE	; 254
    15f2:	7f 4f       	sbci	r23, 0xFF	; 255
    15f4:	0e 94 3c 03 	call	0x678	; 0x678 <vListInsert>
    15f8:	17 c0       	rjmp	.+46     	; 0x1628 <prvAddCurrentTaskToDelayedList+0xf6>
    15fa:	60 91 2d 08 	lds	r22, 0x082D	; 0x80082d <pxCurrentTCB>
    15fe:	70 91 2e 08 	lds	r23, 0x082E	; 0x80082e <pxCurrentTCB+0x1>
    1602:	80 91 da 07 	lds	r24, 0x07DA	; 0x8007da <pxDelayedTaskList>
    1606:	90 91 db 07 	lds	r25, 0x07DB	; 0x8007db <pxDelayedTaskList+0x1>
    160a:	6e 5f       	subi	r22, 0xFE	; 254
    160c:	7f 4f       	sbci	r23, 0xFF	; 255
    160e:	0e 94 3c 03 	call	0x678	; 0x678 <vListInsert>
    1612:	80 91 b0 07 	lds	r24, 0x07B0	; 0x8007b0 <xNextTaskUnblockTime>
    1616:	90 91 b1 07 	lds	r25, 0x07B1	; 0x8007b1 <xNextTaskUnblockTime+0x1>
    161a:	c8 17       	cp	r28, r24
    161c:	d9 07       	cpc	r29, r25
    161e:	20 f4       	brcc	.+8      	; 0x1628 <prvAddCurrentTaskToDelayedList+0xf6>
    1620:	d0 93 b1 07 	sts	0x07B1, r29	; 0x8007b1 <xNextTaskUnblockTime+0x1>
    1624:	c0 93 b0 07 	sts	0x07B0, r28	; 0x8007b0 <xNextTaskUnblockTime>
    1628:	df 91       	pop	r29
    162a:	cf 91       	pop	r28
    162c:	1f 91       	pop	r17
    162e:	0f 91       	pop	r16
    1630:	ff 90       	pop	r15
    1632:	08 95       	ret

00001634 <xTaskCreate>:
    1634:	2f 92       	push	r2
    1636:	3f 92       	push	r3
    1638:	4f 92       	push	r4
    163a:	5f 92       	push	r5
    163c:	6f 92       	push	r6
    163e:	7f 92       	push	r7
    1640:	8f 92       	push	r8
    1642:	9f 92       	push	r9
    1644:	af 92       	push	r10
    1646:	bf 92       	push	r11
    1648:	cf 92       	push	r12
    164a:	df 92       	push	r13
    164c:	ef 92       	push	r14
    164e:	ff 92       	push	r15
    1650:	0f 93       	push	r16
    1652:	1f 93       	push	r17
    1654:	cf 93       	push	r28
    1656:	df 93       	push	r29
    1658:	3c 01       	movw	r6, r24
    165a:	1b 01       	movw	r2, r22
    165c:	5a 01       	movw	r10, r20
    165e:	29 01       	movw	r4, r18
    1660:	ca 01       	movw	r24, r20
    1662:	0e 94 29 02 	call	0x452	; 0x452 <pvPortMalloc>
    1666:	6c 01       	movw	r12, r24
    1668:	89 2b       	or	r24, r25
    166a:	99 f0       	breq	.+38     	; 0x1692 <xTaskCreate+0x5e>
    166c:	88 e2       	ldi	r24, 0x28	; 40
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	0e 94 29 02 	call	0x452	; 0x452 <pvPortMalloc>
    1674:	ec 01       	movw	r28, r24
    1676:	89 2b       	or	r24, r25
    1678:	41 f0       	breq	.+16     	; 0x168a <xTaskCreate+0x56>
    167a:	88 e2       	ldi	r24, 0x28	; 40
    167c:	fe 01       	movw	r30, r28
    167e:	11 92       	st	Z+, r1
    1680:	8a 95       	dec	r24
    1682:	e9 f7       	brne	.-6      	; 0x167e <xTaskCreate+0x4a>
    1684:	d8 8e       	std	Y+24, r13	; 0x18
    1686:	cf 8a       	std	Y+23, r12	; 0x17
    1688:	06 c0       	rjmp	.+12     	; 0x1696 <xTaskCreate+0x62>
    168a:	c6 01       	movw	r24, r12
    168c:	0e 94 c3 02 	call	0x586	; 0x586 <vPortFree>
    1690:	02 c0       	rjmp	.+4      	; 0x1696 <xTaskCreate+0x62>
    1692:	c0 e0       	ldi	r28, 0x00	; 0
    1694:	d0 e0       	ldi	r29, 0x00	; 0
    1696:	20 97       	sbiw	r28, 0x00	; 0
    1698:	91 f0       	breq	.+36     	; 0x16be <xTaskCreate+0x8a>
    169a:	95 01       	movw	r18, r10
    169c:	40 e0       	ldi	r20, 0x00	; 0
    169e:	50 e0       	ldi	r21, 0x00	; 0
    16a0:	81 2c       	mov	r8, r1
    16a2:	91 2c       	mov	r9, r1
    16a4:	5e 01       	movw	r10, r28
    16a6:	67 01       	movw	r12, r14
    16a8:	e0 2e       	mov	r14, r16
    16aa:	82 01       	movw	r16, r4
    16ac:	b1 01       	movw	r22, r2
    16ae:	c3 01       	movw	r24, r6
    16b0:	0e 94 4d 09 	call	0x129a	; 0x129a <prvInitialiseNewTask>
    16b4:	ce 01       	movw	r24, r28
    16b6:	0e 94 ed 09 	call	0x13da	; 0x13da <prvAddNewTaskToReadyList>
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	01 c0       	rjmp	.+2      	; 0x16c0 <xTaskCreate+0x8c>
    16be:	8f ef       	ldi	r24, 0xFF	; 255
    16c0:	df 91       	pop	r29
    16c2:	cf 91       	pop	r28
    16c4:	1f 91       	pop	r17
    16c6:	0f 91       	pop	r16
    16c8:	ff 90       	pop	r15
    16ca:	ef 90       	pop	r14
    16cc:	df 90       	pop	r13
    16ce:	cf 90       	pop	r12
    16d0:	bf 90       	pop	r11
    16d2:	af 90       	pop	r10
    16d4:	9f 90       	pop	r9
    16d6:	8f 90       	pop	r8
    16d8:	7f 90       	pop	r7
    16da:	6f 90       	pop	r6
    16dc:	5f 90       	pop	r5
    16de:	4f 90       	pop	r4
    16e0:	3f 90       	pop	r3
    16e2:	2f 90       	pop	r2
    16e4:	08 95       	ret

000016e6 <vTaskResume>:
    16e6:	0f 93       	push	r16
    16e8:	1f 93       	push	r17
    16ea:	cf 93       	push	r28
    16ec:	df 93       	push	r29
    16ee:	20 91 2d 08 	lds	r18, 0x082D	; 0x80082d <pxCurrentTCB>
    16f2:	30 91 2e 08 	lds	r19, 0x082E	; 0x80082e <pxCurrentTCB+0x1>
    16f6:	82 17       	cp	r24, r18
    16f8:	93 07       	cpc	r25, r19
    16fa:	09 f4       	brne	.+2      	; 0x16fe <vTaskResume+0x18>
    16fc:	55 c0       	rjmp	.+170    	; 0x17a8 <vTaskResume+0xc2>
    16fe:	00 97       	sbiw	r24, 0x00	; 0
    1700:	09 f4       	brne	.+2      	; 0x1704 <vTaskResume+0x1e>
    1702:	52 c0       	rjmp	.+164    	; 0x17a8 <vTaskResume+0xc2>
    1704:	ec 01       	movw	r28, r24
    1706:	0f b6       	in	r0, 0x3f	; 63
    1708:	f8 94       	cli
    170a:	0f 92       	push	r0
    170c:	0e 94 0d 09 	call	0x121a	; 0x121a <prvTaskIsTaskSuspended>
    1710:	88 23       	and	r24, r24
    1712:	09 f4       	brne	.+2      	; 0x1716 <vTaskResume+0x30>
    1714:	47 c0       	rjmp	.+142    	; 0x17a4 <vTaskResume+0xbe>
    1716:	8e 01       	movw	r16, r28
    1718:	0e 5f       	subi	r16, 0xFE	; 254
    171a:	1f 4f       	sbci	r17, 0xFF	; 255
    171c:	c8 01       	movw	r24, r16
    171e:	0e 94 6d 03 	call	0x6da	; 0x6da <uxListRemove>
    1722:	8e 89       	ldd	r24, Y+22	; 0x16
    1724:	90 91 b8 07 	lds	r25, 0x07B8	; 0x8007b8 <uxTopReadyPriority>
    1728:	98 17       	cp	r25, r24
    172a:	10 f4       	brcc	.+4      	; 0x1730 <vTaskResume+0x4a>
    172c:	80 93 b8 07 	sts	0x07B8, r24	; 0x8007b8 <uxTopReadyPriority>
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	fc 01       	movw	r30, r24
    1734:	ee 0f       	add	r30, r30
    1736:	ff 1f       	adc	r31, r31
    1738:	ee 0f       	add	r30, r30
    173a:	ff 1f       	adc	r31, r31
    173c:	ee 0f       	add	r30, r30
    173e:	ff 1f       	adc	r31, r31
    1740:	8e 0f       	add	r24, r30
    1742:	9f 1f       	adc	r25, r31
    1744:	fc 01       	movw	r30, r24
    1746:	e2 51       	subi	r30, 0x12	; 18
    1748:	f8 4f       	sbci	r31, 0xF8	; 248
    174a:	01 80       	ldd	r0, Z+1	; 0x01
    174c:	f2 81       	ldd	r31, Z+2	; 0x02
    174e:	e0 2d       	mov	r30, r0
    1750:	fd 83       	std	Y+5, r31	; 0x05
    1752:	ec 83       	std	Y+4, r30	; 0x04
    1754:	84 81       	ldd	r24, Z+4	; 0x04
    1756:	95 81       	ldd	r25, Z+5	; 0x05
    1758:	9f 83       	std	Y+7, r25	; 0x07
    175a:	8e 83       	std	Y+6, r24	; 0x06
    175c:	a4 81       	ldd	r26, Z+4	; 0x04
    175e:	b5 81       	ldd	r27, Z+5	; 0x05
    1760:	13 96       	adiw	r26, 0x03	; 3
    1762:	1c 93       	st	X, r17
    1764:	0e 93       	st	-X, r16
    1766:	12 97       	sbiw	r26, 0x02	; 2
    1768:	15 83       	std	Z+5, r17	; 0x05
    176a:	04 83       	std	Z+4, r16	; 0x04
    176c:	ee 89       	ldd	r30, Y+22	; 0x16
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	cf 01       	movw	r24, r30
    1772:	88 0f       	add	r24, r24
    1774:	99 1f       	adc	r25, r25
    1776:	88 0f       	add	r24, r24
    1778:	99 1f       	adc	r25, r25
    177a:	88 0f       	add	r24, r24
    177c:	99 1f       	adc	r25, r25
    177e:	e8 0f       	add	r30, r24
    1780:	f9 1f       	adc	r31, r25
    1782:	e2 51       	subi	r30, 0x12	; 18
    1784:	f8 4f       	sbci	r31, 0xF8	; 248
    1786:	fb 87       	std	Y+11, r31	; 0x0b
    1788:	ea 87       	std	Y+10, r30	; 0x0a
    178a:	80 81       	ld	r24, Z
    178c:	8f 5f       	subi	r24, 0xFF	; 255
    178e:	80 83       	st	Z, r24
    1790:	9e 89       	ldd	r25, Y+22	; 0x16
    1792:	e0 91 2d 08 	lds	r30, 0x082D	; 0x80082d <pxCurrentTCB>
    1796:	f0 91 2e 08 	lds	r31, 0x082E	; 0x80082e <pxCurrentTCB+0x1>
    179a:	86 89       	ldd	r24, Z+22	; 0x16
    179c:	98 17       	cp	r25, r24
    179e:	10 f0       	brcs	.+4      	; 0x17a4 <vTaskResume+0xbe>
    17a0:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <vPortYield>
    17a4:	0f 90       	pop	r0
    17a6:	0f be       	out	0x3f, r0	; 63
    17a8:	df 91       	pop	r29
    17aa:	cf 91       	pop	r28
    17ac:	1f 91       	pop	r17
    17ae:	0f 91       	pop	r16
    17b0:	08 95       	ret

000017b2 <vTaskStartScheduler>:
    17b2:	ef 92       	push	r14
    17b4:	ff 92       	push	r15
    17b6:	0f 93       	push	r16
    17b8:	0f 2e       	mov	r0, r31
    17ba:	fe ea       	ldi	r31, 0xAE	; 174
    17bc:	ef 2e       	mov	r14, r31
    17be:	f7 e0       	ldi	r31, 0x07	; 7
    17c0:	ff 2e       	mov	r15, r31
    17c2:	f0 2d       	mov	r31, r0
    17c4:	00 e0       	ldi	r16, 0x00	; 0
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	4c e2       	ldi	r20, 0x2C	; 44
    17cc:	51 e0       	ldi	r21, 0x01	; 1
    17ce:	6e ee       	ldi	r22, 0xEE	; 238
    17d0:	70 e0       	ldi	r23, 0x00	; 0
    17d2:	80 e9       	ldi	r24, 0x90	; 144
    17d4:	9a e0       	ldi	r25, 0x0A	; 10
    17d6:	0e 94 1a 0b 	call	0x1634	; 0x1634 <xTaskCreate>
    17da:	81 30       	cpi	r24, 0x01	; 1
    17dc:	81 f4       	brne	.+32     	; 0x17fe <vTaskStartScheduler+0x4c>
    17de:	f8 94       	cli
    17e0:	8f ef       	ldi	r24, 0xFF	; 255
    17e2:	9f ef       	ldi	r25, 0xFF	; 255
    17e4:	90 93 b1 07 	sts	0x07B1, r25	; 0x8007b1 <xNextTaskUnblockTime+0x1>
    17e8:	80 93 b0 07 	sts	0x07B0, r24	; 0x8007b0 <xNextTaskUnblockTime>
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	80 93 b7 07 	sts	0x07B7, r24	; 0x8007b7 <xSchedulerRunning>
    17f2:	10 92 ba 07 	sts	0x07BA, r1	; 0x8007ba <xTickCount+0x1>
    17f6:	10 92 b9 07 	sts	0x07B9, r1	; 0x8007b9 <xTickCount>
    17fa:	0e 94 ba 05 	call	0xb74	; 0xb74 <xPortStartScheduler>
    17fe:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <uxTopUsedPriority>
    1802:	0f 91       	pop	r16
    1804:	ff 90       	pop	r15
    1806:	ef 90       	pop	r14
    1808:	08 95       	ret

0000180a <vTaskSuspendAll>:
    180a:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <uxSchedulerSuspended>
    180e:	8f 5f       	subi	r24, 0xFF	; 255
    1810:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <uxSchedulerSuspended>
    1814:	08 95       	ret

00001816 <xTaskIncrementTick>:
    1816:	0f 93       	push	r16
    1818:	1f 93       	push	r17
    181a:	cf 93       	push	r28
    181c:	df 93       	push	r29
    181e:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <uxSchedulerSuspended>
    1822:	81 11       	cpse	r24, r1
    1824:	01 c1       	rjmp	.+514    	; 0x1a28 <xTaskIncrementTick+0x212>
    1826:	c0 91 b9 07 	lds	r28, 0x07B9	; 0x8007b9 <xTickCount>
    182a:	d0 91 ba 07 	lds	r29, 0x07BA	; 0x8007ba <xTickCount+0x1>
    182e:	8e 01       	movw	r16, r28
    1830:	0f 5f       	subi	r16, 0xFF	; 255
    1832:	1f 4f       	sbci	r17, 0xFF	; 255
    1834:	10 93 ba 07 	sts	0x07BA, r17	; 0x8007ba <xTickCount+0x1>
    1838:	00 93 b9 07 	sts	0x07B9, r16	; 0x8007b9 <xTickCount>
    183c:	01 15       	cp	r16, r1
    183e:	11 05       	cpc	r17, r1
    1840:	b9 f4       	brne	.+46     	; 0x1870 <xTaskIncrementTick+0x5a>
    1842:	80 91 da 07 	lds	r24, 0x07DA	; 0x8007da <pxDelayedTaskList>
    1846:	90 91 db 07 	lds	r25, 0x07DB	; 0x8007db <pxDelayedTaskList+0x1>
    184a:	20 91 d8 07 	lds	r18, 0x07D8	; 0x8007d8 <pxOverflowDelayedTaskList>
    184e:	30 91 d9 07 	lds	r19, 0x07D9	; 0x8007d9 <pxOverflowDelayedTaskList+0x1>
    1852:	30 93 db 07 	sts	0x07DB, r19	; 0x8007db <pxDelayedTaskList+0x1>
    1856:	20 93 da 07 	sts	0x07DA, r18	; 0x8007da <pxDelayedTaskList>
    185a:	90 93 d9 07 	sts	0x07D9, r25	; 0x8007d9 <pxOverflowDelayedTaskList+0x1>
    185e:	80 93 d8 07 	sts	0x07D8, r24	; 0x8007d8 <pxOverflowDelayedTaskList>
    1862:	80 91 b3 07 	lds	r24, 0x07B3	; 0x8007b3 <xNumOfOverflows>
    1866:	8f 5f       	subi	r24, 0xFF	; 255
    1868:	80 93 b3 07 	sts	0x07B3, r24	; 0x8007b3 <xNumOfOverflows>
    186c:	0e 94 24 09 	call	0x1248	; 0x1248 <prvResetNextTaskUnblockTime>
    1870:	80 91 b0 07 	lds	r24, 0x07B0	; 0x8007b0 <xNextTaskUnblockTime>
    1874:	90 91 b1 07 	lds	r25, 0x07B1	; 0x8007b1 <xNextTaskUnblockTime+0x1>
    1878:	08 17       	cp	r16, r24
    187a:	19 07       	cpc	r17, r25
    187c:	20 f4       	brcc	.+8      	; 0x1886 <xTaskIncrementTick+0x70>
    187e:	80 e0       	ldi	r24, 0x00	; 0
    1880:	b8 c0       	rjmp	.+368    	; 0x19f2 <xTaskIncrementTick+0x1dc>
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	01 c0       	rjmp	.+2      	; 0x1888 <xTaskIncrementTick+0x72>
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	e0 91 da 07 	lds	r30, 0x07DA	; 0x8007da <pxDelayedTaskList>
    188c:	f0 91 db 07 	lds	r31, 0x07DB	; 0x8007db <pxDelayedTaskList+0x1>
    1890:	90 81       	ld	r25, Z
    1892:	91 11       	cpse	r25, r1
    1894:	07 c0       	rjmp	.+14     	; 0x18a4 <xTaskIncrementTick+0x8e>
    1896:	2f ef       	ldi	r18, 0xFF	; 255
    1898:	3f ef       	ldi	r19, 0xFF	; 255
    189a:	30 93 b1 07 	sts	0x07B1, r19	; 0x8007b1 <xNextTaskUnblockTime+0x1>
    189e:	20 93 b0 07 	sts	0x07B0, r18	; 0x8007b0 <xNextTaskUnblockTime>
    18a2:	a7 c0       	rjmp	.+334    	; 0x19f2 <xTaskIncrementTick+0x1dc>
    18a4:	e0 91 da 07 	lds	r30, 0x07DA	; 0x8007da <pxDelayedTaskList>
    18a8:	f0 91 db 07 	lds	r31, 0x07DB	; 0x8007db <pxDelayedTaskList+0x1>
    18ac:	05 80       	ldd	r0, Z+5	; 0x05
    18ae:	f6 81       	ldd	r31, Z+6	; 0x06
    18b0:	e0 2d       	mov	r30, r0
    18b2:	06 80       	ldd	r0, Z+6	; 0x06
    18b4:	f7 81       	ldd	r31, Z+7	; 0x07
    18b6:	e0 2d       	mov	r30, r0
    18b8:	22 81       	ldd	r18, Z+2	; 0x02
    18ba:	33 81       	ldd	r19, Z+3	; 0x03
    18bc:	02 17       	cp	r16, r18
    18be:	13 07       	cpc	r17, r19
    18c0:	28 f4       	brcc	.+10     	; 0x18cc <xTaskIncrementTick+0xb6>
    18c2:	30 93 b1 07 	sts	0x07B1, r19	; 0x8007b1 <xNextTaskUnblockTime+0x1>
    18c6:	20 93 b0 07 	sts	0x07B0, r18	; 0x8007b0 <xNextTaskUnblockTime>
    18ca:	93 c0       	rjmp	.+294    	; 0x19f2 <xTaskIncrementTick+0x1dc>
    18cc:	a2 85       	ldd	r26, Z+10	; 0x0a
    18ce:	b3 85       	ldd	r27, Z+11	; 0x0b
    18d0:	24 81       	ldd	r18, Z+4	; 0x04
    18d2:	35 81       	ldd	r19, Z+5	; 0x05
    18d4:	46 81       	ldd	r20, Z+6	; 0x06
    18d6:	57 81       	ldd	r21, Z+7	; 0x07
    18d8:	e9 01       	movw	r28, r18
    18da:	5d 83       	std	Y+5, r21	; 0x05
    18dc:	4c 83       	std	Y+4, r20	; 0x04
    18de:	26 81       	ldd	r18, Z+6	; 0x06
    18e0:	37 81       	ldd	r19, Z+7	; 0x07
    18e2:	44 81       	ldd	r20, Z+4	; 0x04
    18e4:	55 81       	ldd	r21, Z+5	; 0x05
    18e6:	e9 01       	movw	r28, r18
    18e8:	5b 83       	std	Y+3, r21	; 0x03
    18ea:	4a 83       	std	Y+2, r20	; 0x02
    18ec:	11 96       	adiw	r26, 0x01	; 1
    18ee:	2d 91       	ld	r18, X+
    18f0:	3c 91       	ld	r19, X
    18f2:	12 97       	sbiw	r26, 0x02	; 2
    18f4:	af 01       	movw	r20, r30
    18f6:	4e 5f       	subi	r20, 0xFE	; 254
    18f8:	5f 4f       	sbci	r21, 0xFF	; 255
    18fa:	24 17       	cp	r18, r20
    18fc:	35 07       	cpc	r19, r21
    18fe:	31 f4       	brne	.+12     	; 0x190c <xTaskIncrementTick+0xf6>
    1900:	26 81       	ldd	r18, Z+6	; 0x06
    1902:	37 81       	ldd	r19, Z+7	; 0x07
    1904:	12 96       	adiw	r26, 0x02	; 2
    1906:	3c 93       	st	X, r19
    1908:	2e 93       	st	-X, r18
    190a:	11 97       	sbiw	r26, 0x01	; 1
    190c:	13 86       	std	Z+11, r1	; 0x0b
    190e:	12 86       	std	Z+10, r1	; 0x0a
    1910:	9c 91       	ld	r25, X
    1912:	91 50       	subi	r25, 0x01	; 1
    1914:	9c 93       	st	X, r25
    1916:	a4 89       	ldd	r26, Z+20	; 0x14
    1918:	b5 89       	ldd	r27, Z+21	; 0x15
    191a:	10 97       	sbiw	r26, 0x00	; 0
    191c:	19 f1       	breq	.+70     	; 0x1964 <xTaskIncrementTick+0x14e>
    191e:	26 85       	ldd	r18, Z+14	; 0x0e
    1920:	37 85       	ldd	r19, Z+15	; 0x0f
    1922:	60 89       	ldd	r22, Z+16	; 0x10
    1924:	71 89       	ldd	r23, Z+17	; 0x11
    1926:	e9 01       	movw	r28, r18
    1928:	7d 83       	std	Y+5, r23	; 0x05
    192a:	6c 83       	std	Y+4, r22	; 0x04
    192c:	20 89       	ldd	r18, Z+16	; 0x10
    192e:	31 89       	ldd	r19, Z+17	; 0x11
    1930:	66 85       	ldd	r22, Z+14	; 0x0e
    1932:	77 85       	ldd	r23, Z+15	; 0x0f
    1934:	e9 01       	movw	r28, r18
    1936:	7b 83       	std	Y+3, r23	; 0x03
    1938:	6a 83       	std	Y+2, r22	; 0x02
    193a:	11 96       	adiw	r26, 0x01	; 1
    193c:	6d 91       	ld	r22, X+
    193e:	7c 91       	ld	r23, X
    1940:	12 97       	sbiw	r26, 0x02	; 2
    1942:	9f 01       	movw	r18, r30
    1944:	24 5f       	subi	r18, 0xF4	; 244
    1946:	3f 4f       	sbci	r19, 0xFF	; 255
    1948:	62 17       	cp	r22, r18
    194a:	73 07       	cpc	r23, r19
    194c:	31 f4       	brne	.+12     	; 0x195a <xTaskIncrementTick+0x144>
    194e:	20 89       	ldd	r18, Z+16	; 0x10
    1950:	31 89       	ldd	r19, Z+17	; 0x11
    1952:	12 96       	adiw	r26, 0x02	; 2
    1954:	3c 93       	st	X, r19
    1956:	2e 93       	st	-X, r18
    1958:	11 97       	sbiw	r26, 0x01	; 1
    195a:	15 8a       	std	Z+21, r1	; 0x15
    195c:	14 8a       	std	Z+20, r1	; 0x14
    195e:	9c 91       	ld	r25, X
    1960:	91 50       	subi	r25, 0x01	; 1
    1962:	9c 93       	st	X, r25
    1964:	26 89       	ldd	r18, Z+22	; 0x16
    1966:	90 91 b8 07 	lds	r25, 0x07B8	; 0x8007b8 <uxTopReadyPriority>
    196a:	92 17       	cp	r25, r18
    196c:	10 f4       	brcc	.+4      	; 0x1972 <xTaskIncrementTick+0x15c>
    196e:	20 93 b8 07 	sts	0x07B8, r18	; 0x8007b8 <uxTopReadyPriority>
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	d9 01       	movw	r26, r18
    1976:	aa 0f       	add	r26, r26
    1978:	bb 1f       	adc	r27, r27
    197a:	aa 0f       	add	r26, r26
    197c:	bb 1f       	adc	r27, r27
    197e:	aa 0f       	add	r26, r26
    1980:	bb 1f       	adc	r27, r27
    1982:	2a 0f       	add	r18, r26
    1984:	3b 1f       	adc	r19, r27
    1986:	d9 01       	movw	r26, r18
    1988:	a2 51       	subi	r26, 0x12	; 18
    198a:	b8 4f       	sbci	r27, 0xF8	; 248
    198c:	11 96       	adiw	r26, 0x01	; 1
    198e:	0d 90       	ld	r0, X+
    1990:	bc 91       	ld	r27, X
    1992:	a0 2d       	mov	r26, r0
    1994:	b5 83       	std	Z+5, r27	; 0x05
    1996:	a4 83       	std	Z+4, r26	; 0x04
    1998:	14 96       	adiw	r26, 0x04	; 4
    199a:	2d 91       	ld	r18, X+
    199c:	3c 91       	ld	r19, X
    199e:	15 97       	sbiw	r26, 0x05	; 5
    19a0:	37 83       	std	Z+7, r19	; 0x07
    19a2:	26 83       	std	Z+6, r18	; 0x06
    19a4:	14 96       	adiw	r26, 0x04	; 4
    19a6:	2d 91       	ld	r18, X+
    19a8:	3c 91       	ld	r19, X
    19aa:	15 97       	sbiw	r26, 0x05	; 5
    19ac:	e9 01       	movw	r28, r18
    19ae:	5b 83       	std	Y+3, r21	; 0x03
    19b0:	4a 83       	std	Y+2, r20	; 0x02
    19b2:	15 96       	adiw	r26, 0x05	; 5
    19b4:	5c 93       	st	X, r21
    19b6:	4e 93       	st	-X, r20
    19b8:	14 97       	sbiw	r26, 0x04	; 4
    19ba:	a6 89       	ldd	r26, Z+22	; 0x16
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	9d 01       	movw	r18, r26
    19c0:	22 0f       	add	r18, r18
    19c2:	33 1f       	adc	r19, r19
    19c4:	22 0f       	add	r18, r18
    19c6:	33 1f       	adc	r19, r19
    19c8:	22 0f       	add	r18, r18
    19ca:	33 1f       	adc	r19, r19
    19cc:	a2 0f       	add	r26, r18
    19ce:	b3 1f       	adc	r27, r19
    19d0:	a2 51       	subi	r26, 0x12	; 18
    19d2:	b8 4f       	sbci	r27, 0xF8	; 248
    19d4:	b3 87       	std	Z+11, r27	; 0x0b
    19d6:	a2 87       	std	Z+10, r26	; 0x0a
    19d8:	9c 91       	ld	r25, X
    19da:	9f 5f       	subi	r25, 0xFF	; 255
    19dc:	9c 93       	st	X, r25
    19de:	26 89       	ldd	r18, Z+22	; 0x16
    19e0:	e0 91 2d 08 	lds	r30, 0x082D	; 0x80082d <pxCurrentTCB>
    19e4:	f0 91 2e 08 	lds	r31, 0x082E	; 0x80082e <pxCurrentTCB+0x1>
    19e8:	96 89       	ldd	r25, Z+22	; 0x16
    19ea:	92 17       	cp	r25, r18
    19ec:	08 f4       	brcc	.+2      	; 0x19f0 <xTaskIncrementTick+0x1da>
    19ee:	49 cf       	rjmp	.-366    	; 0x1882 <xTaskIncrementTick+0x6c>
    19f0:	4b cf       	rjmp	.-362    	; 0x1888 <xTaskIncrementTick+0x72>
    19f2:	e0 91 2d 08 	lds	r30, 0x082D	; 0x80082d <pxCurrentTCB>
    19f6:	f0 91 2e 08 	lds	r31, 0x082E	; 0x80082e <pxCurrentTCB+0x1>
    19fa:	26 89       	ldd	r18, Z+22	; 0x16
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	f9 01       	movw	r30, r18
    1a00:	ee 0f       	add	r30, r30
    1a02:	ff 1f       	adc	r31, r31
    1a04:	ee 0f       	add	r30, r30
    1a06:	ff 1f       	adc	r31, r31
    1a08:	ee 0f       	add	r30, r30
    1a0a:	ff 1f       	adc	r31, r31
    1a0c:	2e 0f       	add	r18, r30
    1a0e:	3f 1f       	adc	r19, r31
    1a10:	f9 01       	movw	r30, r18
    1a12:	e2 51       	subi	r30, 0x12	; 18
    1a14:	f8 4f       	sbci	r31, 0xF8	; 248
    1a16:	90 81       	ld	r25, Z
    1a18:	92 30       	cpi	r25, 0x02	; 2
    1a1a:	08 f0       	brcs	.+2      	; 0x1a1e <xTaskIncrementTick+0x208>
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	90 91 b4 07 	lds	r25, 0x07B4	; 0x8007b4 <xYieldPending>
    1a22:	91 11       	cpse	r25, r1
    1a24:	0c c0       	rjmp	.+24     	; 0x1a3e <xTaskIncrementTick+0x228>
    1a26:	0c c0       	rjmp	.+24     	; 0x1a40 <xTaskIncrementTick+0x22a>
    1a28:	80 91 b5 07 	lds	r24, 0x07B5	; 0x8007b5 <xPendedTicks>
    1a2c:	90 91 b6 07 	lds	r25, 0x07B6	; 0x8007b6 <xPendedTicks+0x1>
    1a30:	01 96       	adiw	r24, 0x01	; 1
    1a32:	90 93 b6 07 	sts	0x07B6, r25	; 0x8007b6 <xPendedTicks+0x1>
    1a36:	80 93 b5 07 	sts	0x07B5, r24	; 0x8007b5 <xPendedTicks>
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	01 c0       	rjmp	.+2      	; 0x1a40 <xTaskIncrementTick+0x22a>
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	df 91       	pop	r29
    1a42:	cf 91       	pop	r28
    1a44:	1f 91       	pop	r17
    1a46:	0f 91       	pop	r16
    1a48:	08 95       	ret

00001a4a <xTaskResumeAll>:
    1a4a:	cf 93       	push	r28
    1a4c:	df 93       	push	r29
    1a4e:	0f b6       	in	r0, 0x3f	; 63
    1a50:	f8 94       	cli
    1a52:	0f 92       	push	r0
    1a54:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <uxSchedulerSuspended>
    1a58:	81 50       	subi	r24, 0x01	; 1
    1a5a:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <uxSchedulerSuspended>
    1a5e:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <uxSchedulerSuspended>
    1a62:	81 11       	cpse	r24, r1
    1a64:	bf c0       	rjmp	.+382    	; 0x1be4 <xTaskResumeAll+0x19a>
    1a66:	80 91 bb 07 	lds	r24, 0x07BB	; 0x8007bb <uxCurrentNumberOfTasks>
    1a6a:	81 11       	cpse	r24, r1
    1a6c:	96 c0       	rjmp	.+300    	; 0x1b9a <xTaskResumeAll+0x150>
    1a6e:	bd c0       	rjmp	.+378    	; 0x1bea <xTaskResumeAll+0x1a0>
    1a70:	e0 91 d4 07 	lds	r30, 0x07D4	; 0x8007d4 <xPendingReadyList+0x5>
    1a74:	f0 91 d5 07 	lds	r31, 0x07D5	; 0x8007d5 <xPendingReadyList+0x6>
    1a78:	06 80       	ldd	r0, Z+6	; 0x06
    1a7a:	f7 81       	ldd	r31, Z+7	; 0x07
    1a7c:	e0 2d       	mov	r30, r0
    1a7e:	a4 89       	ldd	r26, Z+20	; 0x14
    1a80:	b5 89       	ldd	r27, Z+21	; 0x15
    1a82:	c6 85       	ldd	r28, Z+14	; 0x0e
    1a84:	d7 85       	ldd	r29, Z+15	; 0x0f
    1a86:	80 89       	ldd	r24, Z+16	; 0x10
    1a88:	91 89       	ldd	r25, Z+17	; 0x11
    1a8a:	9d 83       	std	Y+5, r25	; 0x05
    1a8c:	8c 83       	std	Y+4, r24	; 0x04
    1a8e:	c0 89       	ldd	r28, Z+16	; 0x10
    1a90:	d1 89       	ldd	r29, Z+17	; 0x11
    1a92:	86 85       	ldd	r24, Z+14	; 0x0e
    1a94:	97 85       	ldd	r25, Z+15	; 0x0f
    1a96:	9b 83       	std	Y+3, r25	; 0x03
    1a98:	8a 83       	std	Y+2, r24	; 0x02
    1a9a:	11 96       	adiw	r26, 0x01	; 1
    1a9c:	2d 91       	ld	r18, X+
    1a9e:	3c 91       	ld	r19, X
    1aa0:	12 97       	sbiw	r26, 0x02	; 2
    1aa2:	cf 01       	movw	r24, r30
    1aa4:	0c 96       	adiw	r24, 0x0c	; 12
    1aa6:	28 17       	cp	r18, r24
    1aa8:	39 07       	cpc	r19, r25
    1aaa:	31 f4       	brne	.+12     	; 0x1ab8 <xTaskResumeAll+0x6e>
    1aac:	80 89       	ldd	r24, Z+16	; 0x10
    1aae:	91 89       	ldd	r25, Z+17	; 0x11
    1ab0:	12 96       	adiw	r26, 0x02	; 2
    1ab2:	9c 93       	st	X, r25
    1ab4:	8e 93       	st	-X, r24
    1ab6:	11 97       	sbiw	r26, 0x01	; 1
    1ab8:	15 8a       	std	Z+21, r1	; 0x15
    1aba:	14 8a       	std	Z+20, r1	; 0x14
    1abc:	8c 91       	ld	r24, X
    1abe:	81 50       	subi	r24, 0x01	; 1
    1ac0:	8c 93       	st	X, r24
    1ac2:	a2 85       	ldd	r26, Z+10	; 0x0a
    1ac4:	b3 85       	ldd	r27, Z+11	; 0x0b
    1ac6:	c4 81       	ldd	r28, Z+4	; 0x04
    1ac8:	d5 81       	ldd	r29, Z+5	; 0x05
    1aca:	86 81       	ldd	r24, Z+6	; 0x06
    1acc:	97 81       	ldd	r25, Z+7	; 0x07
    1ace:	9d 83       	std	Y+5, r25	; 0x05
    1ad0:	8c 83       	std	Y+4, r24	; 0x04
    1ad2:	c6 81       	ldd	r28, Z+6	; 0x06
    1ad4:	d7 81       	ldd	r29, Z+7	; 0x07
    1ad6:	84 81       	ldd	r24, Z+4	; 0x04
    1ad8:	95 81       	ldd	r25, Z+5	; 0x05
    1ada:	9b 83       	std	Y+3, r25	; 0x03
    1adc:	8a 83       	std	Y+2, r24	; 0x02
    1ade:	11 96       	adiw	r26, 0x01	; 1
    1ae0:	8d 91       	ld	r24, X+
    1ae2:	9c 91       	ld	r25, X
    1ae4:	12 97       	sbiw	r26, 0x02	; 2
    1ae6:	9f 01       	movw	r18, r30
    1ae8:	2e 5f       	subi	r18, 0xFE	; 254
    1aea:	3f 4f       	sbci	r19, 0xFF	; 255
    1aec:	82 17       	cp	r24, r18
    1aee:	93 07       	cpc	r25, r19
    1af0:	31 f4       	brne	.+12     	; 0x1afe <xTaskResumeAll+0xb4>
    1af2:	86 81       	ldd	r24, Z+6	; 0x06
    1af4:	97 81       	ldd	r25, Z+7	; 0x07
    1af6:	12 96       	adiw	r26, 0x02	; 2
    1af8:	9c 93       	st	X, r25
    1afa:	8e 93       	st	-X, r24
    1afc:	11 97       	sbiw	r26, 0x01	; 1
    1afe:	13 86       	std	Z+11, r1	; 0x0b
    1b00:	12 86       	std	Z+10, r1	; 0x0a
    1b02:	8c 91       	ld	r24, X
    1b04:	81 50       	subi	r24, 0x01	; 1
    1b06:	8c 93       	st	X, r24
    1b08:	86 89       	ldd	r24, Z+22	; 0x16
    1b0a:	90 91 b8 07 	lds	r25, 0x07B8	; 0x8007b8 <uxTopReadyPriority>
    1b0e:	98 17       	cp	r25, r24
    1b10:	10 f4       	brcc	.+4      	; 0x1b16 <xTaskResumeAll+0xcc>
    1b12:	80 93 b8 07 	sts	0x07B8, r24	; 0x8007b8 <uxTopReadyPriority>
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	dc 01       	movw	r26, r24
    1b1a:	aa 0f       	add	r26, r26
    1b1c:	bb 1f       	adc	r27, r27
    1b1e:	aa 0f       	add	r26, r26
    1b20:	bb 1f       	adc	r27, r27
    1b22:	aa 0f       	add	r26, r26
    1b24:	bb 1f       	adc	r27, r27
    1b26:	8a 0f       	add	r24, r26
    1b28:	9b 1f       	adc	r25, r27
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	a2 51       	subi	r26, 0x12	; 18
    1b2e:	b8 4f       	sbci	r27, 0xF8	; 248
    1b30:	11 96       	adiw	r26, 0x01	; 1
    1b32:	0d 90       	ld	r0, X+
    1b34:	bc 91       	ld	r27, X
    1b36:	a0 2d       	mov	r26, r0
    1b38:	b5 83       	std	Z+5, r27	; 0x05
    1b3a:	a4 83       	std	Z+4, r26	; 0x04
    1b3c:	14 96       	adiw	r26, 0x04	; 4
    1b3e:	8d 91       	ld	r24, X+
    1b40:	9c 91       	ld	r25, X
    1b42:	15 97       	sbiw	r26, 0x05	; 5
    1b44:	97 83       	std	Z+7, r25	; 0x07
    1b46:	86 83       	std	Z+6, r24	; 0x06
    1b48:	14 96       	adiw	r26, 0x04	; 4
    1b4a:	cd 91       	ld	r28, X+
    1b4c:	dc 91       	ld	r29, X
    1b4e:	15 97       	sbiw	r26, 0x05	; 5
    1b50:	3b 83       	std	Y+3, r19	; 0x03
    1b52:	2a 83       	std	Y+2, r18	; 0x02
    1b54:	15 96       	adiw	r26, 0x05	; 5
    1b56:	3c 93       	st	X, r19
    1b58:	2e 93       	st	-X, r18
    1b5a:	14 97       	sbiw	r26, 0x04	; 4
    1b5c:	a6 89       	ldd	r26, Z+22	; 0x16
    1b5e:	b0 e0       	ldi	r27, 0x00	; 0
    1b60:	cd 01       	movw	r24, r26
    1b62:	88 0f       	add	r24, r24
    1b64:	99 1f       	adc	r25, r25
    1b66:	88 0f       	add	r24, r24
    1b68:	99 1f       	adc	r25, r25
    1b6a:	88 0f       	add	r24, r24
    1b6c:	99 1f       	adc	r25, r25
    1b6e:	a8 0f       	add	r26, r24
    1b70:	b9 1f       	adc	r27, r25
    1b72:	a2 51       	subi	r26, 0x12	; 18
    1b74:	b8 4f       	sbci	r27, 0xF8	; 248
    1b76:	b3 87       	std	Z+11, r27	; 0x0b
    1b78:	a2 87       	std	Z+10, r26	; 0x0a
    1b7a:	8c 91       	ld	r24, X
    1b7c:	8f 5f       	subi	r24, 0xFF	; 255
    1b7e:	8c 93       	st	X, r24
    1b80:	96 89       	ldd	r25, Z+22	; 0x16
    1b82:	a0 91 2d 08 	lds	r26, 0x082D	; 0x80082d <pxCurrentTCB>
    1b86:	b0 91 2e 08 	lds	r27, 0x082E	; 0x80082e <pxCurrentTCB+0x1>
    1b8a:	56 96       	adiw	r26, 0x16	; 22
    1b8c:	8c 91       	ld	r24, X
    1b8e:	98 17       	cp	r25, r24
    1b90:	30 f0       	brcs	.+12     	; 0x1b9e <xTaskResumeAll+0x154>
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	80 93 b4 07 	sts	0x07B4, r24	; 0x8007b4 <xYieldPending>
    1b98:	02 c0       	rjmp	.+4      	; 0x1b9e <xTaskResumeAll+0x154>
    1b9a:	e0 e0       	ldi	r30, 0x00	; 0
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	80 91 cf 07 	lds	r24, 0x07CF	; 0x8007cf <xPendingReadyList>
    1ba2:	81 11       	cpse	r24, r1
    1ba4:	65 cf       	rjmp	.-310    	; 0x1a70 <xTaskResumeAll+0x26>
    1ba6:	ef 2b       	or	r30, r31
    1ba8:	11 f0       	breq	.+4      	; 0x1bae <xTaskResumeAll+0x164>
    1baa:	0e 94 24 09 	call	0x1248	; 0x1248 <prvResetNextTaskUnblockTime>
    1bae:	c0 91 b5 07 	lds	r28, 0x07B5	; 0x8007b5 <xPendedTicks>
    1bb2:	d0 91 b6 07 	lds	r29, 0x07B6	; 0x8007b6 <xPendedTicks+0x1>
    1bb6:	20 97       	sbiw	r28, 0x00	; 0
    1bb8:	69 f0       	breq	.+26     	; 0x1bd4 <xTaskResumeAll+0x18a>
    1bba:	0e 94 0b 0c 	call	0x1816	; 0x1816 <xTaskIncrementTick>
    1bbe:	88 23       	and	r24, r24
    1bc0:	19 f0       	breq	.+6      	; 0x1bc8 <xTaskResumeAll+0x17e>
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	80 93 b4 07 	sts	0x07B4, r24	; 0x8007b4 <xYieldPending>
    1bc8:	21 97       	sbiw	r28, 0x01	; 1
    1bca:	b9 f7       	brne	.-18     	; 0x1bba <xTaskResumeAll+0x170>
    1bcc:	10 92 b6 07 	sts	0x07B6, r1	; 0x8007b6 <xPendedTicks+0x1>
    1bd0:	10 92 b5 07 	sts	0x07B5, r1	; 0x8007b5 <xPendedTicks>
    1bd4:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <xYieldPending>
    1bd8:	88 23       	and	r24, r24
    1bda:	31 f0       	breq	.+12     	; 0x1be8 <xTaskResumeAll+0x19e>
    1bdc:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <vPortYield>
    1be0:	81 e0       	ldi	r24, 0x01	; 1
    1be2:	03 c0       	rjmp	.+6      	; 0x1bea <xTaskResumeAll+0x1a0>
    1be4:	80 e0       	ldi	r24, 0x00	; 0
    1be6:	01 c0       	rjmp	.+2      	; 0x1bea <xTaskResumeAll+0x1a0>
    1be8:	80 e0       	ldi	r24, 0x00	; 0
    1bea:	0f 90       	pop	r0
    1bec:	0f be       	out	0x3f, r0	; 63
    1bee:	df 91       	pop	r29
    1bf0:	cf 91       	pop	r28
    1bf2:	08 95       	ret

00001bf4 <vTaskDelay>:
    1bf4:	cf 93       	push	r28
    1bf6:	df 93       	push	r29
    1bf8:	ec 01       	movw	r28, r24
    1bfa:	89 2b       	or	r24, r25
    1bfc:	49 f0       	breq	.+18     	; 0x1c10 <vTaskDelay+0x1c>
    1bfe:	0e 94 05 0c 	call	0x180a	; 0x180a <vTaskSuspendAll>
    1c02:	60 e0       	ldi	r22, 0x00	; 0
    1c04:	ce 01       	movw	r24, r28
    1c06:	0e 94 99 0a 	call	0x1532	; 0x1532 <prvAddCurrentTaskToDelayedList>
    1c0a:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <xTaskResumeAll>
    1c0e:	01 c0       	rjmp	.+2      	; 0x1c12 <vTaskDelay+0x1e>
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	81 11       	cpse	r24, r1
    1c14:	02 c0       	rjmp	.+4      	; 0x1c1a <vTaskDelay+0x26>
    1c16:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <vPortYield>
    1c1a:	df 91       	pop	r29
    1c1c:	cf 91       	pop	r28
    1c1e:	08 95       	ret

00001c20 <vTaskSwitchContext>:
    1c20:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <uxSchedulerSuspended>
    1c24:	88 23       	and	r24, r24
    1c26:	21 f0       	breq	.+8      	; 0x1c30 <vTaskSwitchContext+0x10>
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	80 93 b4 07 	sts	0x07B4, r24	; 0x8007b4 <xYieldPending>
    1c2e:	08 95       	ret
    1c30:	10 92 b4 07 	sts	0x07B4, r1	; 0x8007b4 <xYieldPending>
    1c34:	20 91 b8 07 	lds	r18, 0x07B8	; 0x8007b8 <uxTopReadyPriority>
    1c38:	01 c0       	rjmp	.+2      	; 0x1c3c <vTaskSwitchContext+0x1c>
    1c3a:	21 50       	subi	r18, 0x01	; 1
    1c3c:	82 2f       	mov	r24, r18
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	fc 01       	movw	r30, r24
    1c42:	ee 0f       	add	r30, r30
    1c44:	ff 1f       	adc	r31, r31
    1c46:	ee 0f       	add	r30, r30
    1c48:	ff 1f       	adc	r31, r31
    1c4a:	ee 0f       	add	r30, r30
    1c4c:	ff 1f       	adc	r31, r31
    1c4e:	e8 0f       	add	r30, r24
    1c50:	f9 1f       	adc	r31, r25
    1c52:	e2 51       	subi	r30, 0x12	; 18
    1c54:	f8 4f       	sbci	r31, 0xF8	; 248
    1c56:	30 81       	ld	r19, Z
    1c58:	33 23       	and	r19, r19
    1c5a:	79 f3       	breq	.-34     	; 0x1c3a <vTaskSwitchContext+0x1a>
    1c5c:	ac 01       	movw	r20, r24
    1c5e:	44 0f       	add	r20, r20
    1c60:	55 1f       	adc	r21, r21
    1c62:	44 0f       	add	r20, r20
    1c64:	55 1f       	adc	r21, r21
    1c66:	44 0f       	add	r20, r20
    1c68:	55 1f       	adc	r21, r21
    1c6a:	48 0f       	add	r20, r24
    1c6c:	59 1f       	adc	r21, r25
    1c6e:	df 01       	movw	r26, r30
    1c70:	01 80       	ldd	r0, Z+1	; 0x01
    1c72:	f2 81       	ldd	r31, Z+2	; 0x02
    1c74:	e0 2d       	mov	r30, r0
    1c76:	02 80       	ldd	r0, Z+2	; 0x02
    1c78:	f3 81       	ldd	r31, Z+3	; 0x03
    1c7a:	e0 2d       	mov	r30, r0
    1c7c:	12 96       	adiw	r26, 0x02	; 2
    1c7e:	fc 93       	st	X, r31
    1c80:	ee 93       	st	-X, r30
    1c82:	11 97       	sbiw	r26, 0x01	; 1
    1c84:	4f 50       	subi	r20, 0x0F	; 15
    1c86:	58 4f       	sbci	r21, 0xF8	; 248
    1c88:	e4 17       	cp	r30, r20
    1c8a:	f5 07       	cpc	r31, r21
    1c8c:	29 f4       	brne	.+10     	; 0x1c98 <vTaskSwitchContext+0x78>
    1c8e:	42 81       	ldd	r20, Z+2	; 0x02
    1c90:	53 81       	ldd	r21, Z+3	; 0x03
    1c92:	fd 01       	movw	r30, r26
    1c94:	52 83       	std	Z+2, r21	; 0x02
    1c96:	41 83       	std	Z+1, r20	; 0x01
    1c98:	fc 01       	movw	r30, r24
    1c9a:	ee 0f       	add	r30, r30
    1c9c:	ff 1f       	adc	r31, r31
    1c9e:	ee 0f       	add	r30, r30
    1ca0:	ff 1f       	adc	r31, r31
    1ca2:	ee 0f       	add	r30, r30
    1ca4:	ff 1f       	adc	r31, r31
    1ca6:	8e 0f       	add	r24, r30
    1ca8:	9f 1f       	adc	r25, r31
    1caa:	fc 01       	movw	r30, r24
    1cac:	e2 51       	subi	r30, 0x12	; 18
    1cae:	f8 4f       	sbci	r31, 0xF8	; 248
    1cb0:	01 80       	ldd	r0, Z+1	; 0x01
    1cb2:	f2 81       	ldd	r31, Z+2	; 0x02
    1cb4:	e0 2d       	mov	r30, r0
    1cb6:	86 81       	ldd	r24, Z+6	; 0x06
    1cb8:	97 81       	ldd	r25, Z+7	; 0x07
    1cba:	90 93 2e 08 	sts	0x082E, r25	; 0x80082e <pxCurrentTCB+0x1>
    1cbe:	80 93 2d 08 	sts	0x082D, r24	; 0x80082d <pxCurrentTCB>
    1cc2:	20 93 b8 07 	sts	0x07B8, r18	; 0x8007b8 <uxTopReadyPriority>
    1cc6:	08 95       	ret

00001cc8 <vTaskSuspend>:
    1cc8:	0f 93       	push	r16
    1cca:	1f 93       	push	r17
    1ccc:	cf 93       	push	r28
    1cce:	df 93       	push	r29
    1cd0:	ec 01       	movw	r28, r24
    1cd2:	0f b6       	in	r0, 0x3f	; 63
    1cd4:	f8 94       	cli
    1cd6:	0f 92       	push	r0
    1cd8:	89 2b       	or	r24, r25
    1cda:	21 f4       	brne	.+8      	; 0x1ce4 <vTaskSuspend+0x1c>
    1cdc:	c0 91 2d 08 	lds	r28, 0x082D	; 0x80082d <pxCurrentTCB>
    1ce0:	d0 91 2e 08 	lds	r29, 0x082E	; 0x80082e <pxCurrentTCB+0x1>
    1ce4:	8e 01       	movw	r16, r28
    1ce6:	0e 5f       	subi	r16, 0xFE	; 254
    1ce8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cea:	c8 01       	movw	r24, r16
    1cec:	0e 94 6d 03 	call	0x6da	; 0x6da <uxListRemove>
    1cf0:	8c 89       	ldd	r24, Y+20	; 0x14
    1cf2:	9d 89       	ldd	r25, Y+21	; 0x15
    1cf4:	89 2b       	or	r24, r25
    1cf6:	21 f0       	breq	.+8      	; 0x1d00 <vTaskSuspend+0x38>
    1cf8:	ce 01       	movw	r24, r28
    1cfa:	0c 96       	adiw	r24, 0x0c	; 12
    1cfc:	0e 94 6d 03 	call	0x6da	; 0x6da <uxListRemove>
    1d00:	b8 01       	movw	r22, r16
    1d02:	8c eb       	ldi	r24, 0xBC	; 188
    1d04:	97 e0       	ldi	r25, 0x07	; 7
    1d06:	0e 94 1b 03 	call	0x636	; 0x636 <vListInsertEnd>
    1d0a:	80 e0       	ldi	r24, 0x00	; 0
    1d0c:	0f c0       	rjmp	.+30     	; 0x1d2c <vTaskSuspend+0x64>
    1d0e:	28 2f       	mov	r18, r24
    1d10:	08 2e       	mov	r0, r24
    1d12:	00 0c       	add	r0, r0
    1d14:	33 0b       	sbc	r19, r19
    1d16:	fe 01       	movw	r30, r28
    1d18:	e2 0f       	add	r30, r18
    1d1a:	f3 1f       	adc	r31, r19
    1d1c:	97 a1       	ldd	r25, Z+39	; 0x27
    1d1e:	91 30       	cpi	r25, 0x01	; 1
    1d20:	21 f4       	brne	.+8      	; 0x1d2a <vTaskSuspend+0x62>
    1d22:	fe 01       	movw	r30, r28
    1d24:	e2 0f       	add	r30, r18
    1d26:	f3 1f       	adc	r31, r19
    1d28:	17 a2       	std	Z+39, r1	; 0x27
    1d2a:	8f 5f       	subi	r24, 0xFF	; 255
    1d2c:	18 16       	cp	r1, r24
    1d2e:	7c f7       	brge	.-34     	; 0x1d0e <vTaskSuspend+0x46>
    1d30:	0f 90       	pop	r0
    1d32:	0f be       	out	0x3f, r0	; 63
    1d34:	80 91 b7 07 	lds	r24, 0x07B7	; 0x8007b7 <xSchedulerRunning>
    1d38:	88 23       	and	r24, r24
    1d3a:	39 f0       	breq	.+14     	; 0x1d4a <vTaskSuspend+0x82>
    1d3c:	0f b6       	in	r0, 0x3f	; 63
    1d3e:	f8 94       	cli
    1d40:	0f 92       	push	r0
    1d42:	0e 94 24 09 	call	0x1248	; 0x1248 <prvResetNextTaskUnblockTime>
    1d46:	0f 90       	pop	r0
    1d48:	0f be       	out	0x3f, r0	; 63
    1d4a:	80 91 2d 08 	lds	r24, 0x082D	; 0x80082d <pxCurrentTCB>
    1d4e:	90 91 2e 08 	lds	r25, 0x082E	; 0x80082e <pxCurrentTCB+0x1>
    1d52:	c8 17       	cp	r28, r24
    1d54:	d9 07       	cpc	r29, r25
    1d56:	a1 f4       	brne	.+40     	; 0x1d80 <vTaskSuspend+0xb8>
    1d58:	80 91 b7 07 	lds	r24, 0x07B7	; 0x8007b7 <xSchedulerRunning>
    1d5c:	88 23       	and	r24, r24
    1d5e:	19 f0       	breq	.+6      	; 0x1d66 <vTaskSuspend+0x9e>
    1d60:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <vPortYield>
    1d64:	0d c0       	rjmp	.+26     	; 0x1d80 <vTaskSuspend+0xb8>
    1d66:	90 91 bc 07 	lds	r25, 0x07BC	; 0x8007bc <xSuspendedTaskList>
    1d6a:	80 91 bb 07 	lds	r24, 0x07BB	; 0x8007bb <uxCurrentNumberOfTasks>
    1d6e:	98 13       	cpse	r25, r24
    1d70:	05 c0       	rjmp	.+10     	; 0x1d7c <vTaskSuspend+0xb4>
    1d72:	10 92 2e 08 	sts	0x082E, r1	; 0x80082e <pxCurrentTCB+0x1>
    1d76:	10 92 2d 08 	sts	0x082D, r1	; 0x80082d <pxCurrentTCB>
    1d7a:	02 c0       	rjmp	.+4      	; 0x1d80 <vTaskSuspend+0xb8>
    1d7c:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <vTaskSwitchContext>
    1d80:	df 91       	pop	r29
    1d82:	cf 91       	pop	r28
    1d84:	1f 91       	pop	r17
    1d86:	0f 91       	pop	r16
    1d88:	08 95       	ret

00001d8a <vTaskPlaceOnEventList>:
    1d8a:	cf 93       	push	r28
    1d8c:	df 93       	push	r29
    1d8e:	eb 01       	movw	r28, r22
    1d90:	60 91 2d 08 	lds	r22, 0x082D	; 0x80082d <pxCurrentTCB>
    1d94:	70 91 2e 08 	lds	r23, 0x082E	; 0x80082e <pxCurrentTCB+0x1>
    1d98:	64 5f       	subi	r22, 0xF4	; 244
    1d9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d9c:	0e 94 3c 03 	call	0x678	; 0x678 <vListInsert>
    1da0:	61 e0       	ldi	r22, 0x01	; 1
    1da2:	ce 01       	movw	r24, r28
    1da4:	0e 94 99 0a 	call	0x1532	; 0x1532 <prvAddCurrentTaskToDelayedList>
    1da8:	df 91       	pop	r29
    1daa:	cf 91       	pop	r28
    1dac:	08 95       	ret

00001dae <xTaskRemoveFromEventList>:
    1dae:	cf 93       	push	r28
    1db0:	df 93       	push	r29
    1db2:	dc 01       	movw	r26, r24
    1db4:	15 96       	adiw	r26, 0x05	; 5
    1db6:	ed 91       	ld	r30, X+
    1db8:	fc 91       	ld	r31, X
    1dba:	16 97       	sbiw	r26, 0x06	; 6
    1dbc:	06 80       	ldd	r0, Z+6	; 0x06
    1dbe:	f7 81       	ldd	r31, Z+7	; 0x07
    1dc0:	e0 2d       	mov	r30, r0
    1dc2:	a4 89       	ldd	r26, Z+20	; 0x14
    1dc4:	b5 89       	ldd	r27, Z+21	; 0x15
    1dc6:	c6 85       	ldd	r28, Z+14	; 0x0e
    1dc8:	d7 85       	ldd	r29, Z+15	; 0x0f
    1dca:	80 89       	ldd	r24, Z+16	; 0x10
    1dcc:	91 89       	ldd	r25, Z+17	; 0x11
    1dce:	9d 83       	std	Y+5, r25	; 0x05
    1dd0:	8c 83       	std	Y+4, r24	; 0x04
    1dd2:	c0 89       	ldd	r28, Z+16	; 0x10
    1dd4:	d1 89       	ldd	r29, Z+17	; 0x11
    1dd6:	86 85       	ldd	r24, Z+14	; 0x0e
    1dd8:	97 85       	ldd	r25, Z+15	; 0x0f
    1dda:	9b 83       	std	Y+3, r25	; 0x03
    1ddc:	8a 83       	std	Y+2, r24	; 0x02
    1dde:	11 96       	adiw	r26, 0x01	; 1
    1de0:	8d 91       	ld	r24, X+
    1de2:	9c 91       	ld	r25, X
    1de4:	12 97       	sbiw	r26, 0x02	; 2
    1de6:	9f 01       	movw	r18, r30
    1de8:	24 5f       	subi	r18, 0xF4	; 244
    1dea:	3f 4f       	sbci	r19, 0xFF	; 255
    1dec:	82 17       	cp	r24, r18
    1dee:	93 07       	cpc	r25, r19
    1df0:	31 f4       	brne	.+12     	; 0x1dfe <xTaskRemoveFromEventList+0x50>
    1df2:	80 89       	ldd	r24, Z+16	; 0x10
    1df4:	91 89       	ldd	r25, Z+17	; 0x11
    1df6:	12 96       	adiw	r26, 0x02	; 2
    1df8:	9c 93       	st	X, r25
    1dfa:	8e 93       	st	-X, r24
    1dfc:	11 97       	sbiw	r26, 0x01	; 1
    1dfe:	15 8a       	std	Z+21, r1	; 0x15
    1e00:	14 8a       	std	Z+20, r1	; 0x14
    1e02:	8c 91       	ld	r24, X
    1e04:	81 50       	subi	r24, 0x01	; 1
    1e06:	8c 93       	st	X, r24
    1e08:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <uxSchedulerSuspended>
    1e0c:	81 11       	cpse	r24, r1
    1e0e:	60 c0       	rjmp	.+192    	; 0x1ed0 <xTaskRemoveFromEventList+0x122>
    1e10:	a2 85       	ldd	r26, Z+10	; 0x0a
    1e12:	b3 85       	ldd	r27, Z+11	; 0x0b
    1e14:	c4 81       	ldd	r28, Z+4	; 0x04
    1e16:	d5 81       	ldd	r29, Z+5	; 0x05
    1e18:	86 81       	ldd	r24, Z+6	; 0x06
    1e1a:	97 81       	ldd	r25, Z+7	; 0x07
    1e1c:	9d 83       	std	Y+5, r25	; 0x05
    1e1e:	8c 83       	std	Y+4, r24	; 0x04
    1e20:	c6 81       	ldd	r28, Z+6	; 0x06
    1e22:	d7 81       	ldd	r29, Z+7	; 0x07
    1e24:	84 81       	ldd	r24, Z+4	; 0x04
    1e26:	95 81       	ldd	r25, Z+5	; 0x05
    1e28:	9b 83       	std	Y+3, r25	; 0x03
    1e2a:	8a 83       	std	Y+2, r24	; 0x02
    1e2c:	11 96       	adiw	r26, 0x01	; 1
    1e2e:	8d 91       	ld	r24, X+
    1e30:	9c 91       	ld	r25, X
    1e32:	12 97       	sbiw	r26, 0x02	; 2
    1e34:	9f 01       	movw	r18, r30
    1e36:	2e 5f       	subi	r18, 0xFE	; 254
    1e38:	3f 4f       	sbci	r19, 0xFF	; 255
    1e3a:	82 17       	cp	r24, r18
    1e3c:	93 07       	cpc	r25, r19
    1e3e:	31 f4       	brne	.+12     	; 0x1e4c <xTaskRemoveFromEventList+0x9e>
    1e40:	86 81       	ldd	r24, Z+6	; 0x06
    1e42:	97 81       	ldd	r25, Z+7	; 0x07
    1e44:	12 96       	adiw	r26, 0x02	; 2
    1e46:	9c 93       	st	X, r25
    1e48:	8e 93       	st	-X, r24
    1e4a:	11 97       	sbiw	r26, 0x01	; 1
    1e4c:	13 86       	std	Z+11, r1	; 0x0b
    1e4e:	12 86       	std	Z+10, r1	; 0x0a
    1e50:	8c 91       	ld	r24, X
    1e52:	81 50       	subi	r24, 0x01	; 1
    1e54:	8c 93       	st	X, r24
    1e56:	86 89       	ldd	r24, Z+22	; 0x16
    1e58:	90 91 b8 07 	lds	r25, 0x07B8	; 0x8007b8 <uxTopReadyPriority>
    1e5c:	98 17       	cp	r25, r24
    1e5e:	10 f4       	brcc	.+4      	; 0x1e64 <xTaskRemoveFromEventList+0xb6>
    1e60:	80 93 b8 07 	sts	0x07B8, r24	; 0x8007b8 <uxTopReadyPriority>
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	dc 01       	movw	r26, r24
    1e68:	aa 0f       	add	r26, r26
    1e6a:	bb 1f       	adc	r27, r27
    1e6c:	aa 0f       	add	r26, r26
    1e6e:	bb 1f       	adc	r27, r27
    1e70:	aa 0f       	add	r26, r26
    1e72:	bb 1f       	adc	r27, r27
    1e74:	8a 0f       	add	r24, r26
    1e76:	9b 1f       	adc	r25, r27
    1e78:	dc 01       	movw	r26, r24
    1e7a:	a2 51       	subi	r26, 0x12	; 18
    1e7c:	b8 4f       	sbci	r27, 0xF8	; 248
    1e7e:	11 96       	adiw	r26, 0x01	; 1
    1e80:	0d 90       	ld	r0, X+
    1e82:	bc 91       	ld	r27, X
    1e84:	a0 2d       	mov	r26, r0
    1e86:	b5 83       	std	Z+5, r27	; 0x05
    1e88:	a4 83       	std	Z+4, r26	; 0x04
    1e8a:	14 96       	adiw	r26, 0x04	; 4
    1e8c:	8d 91       	ld	r24, X+
    1e8e:	9c 91       	ld	r25, X
    1e90:	15 97       	sbiw	r26, 0x05	; 5
    1e92:	97 83       	std	Z+7, r25	; 0x07
    1e94:	86 83       	std	Z+6, r24	; 0x06
    1e96:	14 96       	adiw	r26, 0x04	; 4
    1e98:	cd 91       	ld	r28, X+
    1e9a:	dc 91       	ld	r29, X
    1e9c:	15 97       	sbiw	r26, 0x05	; 5
    1e9e:	3b 83       	std	Y+3, r19	; 0x03
    1ea0:	2a 83       	std	Y+2, r18	; 0x02
    1ea2:	15 96       	adiw	r26, 0x05	; 5
    1ea4:	3c 93       	st	X, r19
    1ea6:	2e 93       	st	-X, r18
    1ea8:	14 97       	sbiw	r26, 0x04	; 4
    1eaa:	a6 89       	ldd	r26, Z+22	; 0x16
    1eac:	b0 e0       	ldi	r27, 0x00	; 0
    1eae:	cd 01       	movw	r24, r26
    1eb0:	88 0f       	add	r24, r24
    1eb2:	99 1f       	adc	r25, r25
    1eb4:	88 0f       	add	r24, r24
    1eb6:	99 1f       	adc	r25, r25
    1eb8:	88 0f       	add	r24, r24
    1eba:	99 1f       	adc	r25, r25
    1ebc:	a8 0f       	add	r26, r24
    1ebe:	b9 1f       	adc	r27, r25
    1ec0:	a2 51       	subi	r26, 0x12	; 18
    1ec2:	b8 4f       	sbci	r27, 0xF8	; 248
    1ec4:	b3 87       	std	Z+11, r27	; 0x0b
    1ec6:	a2 87       	std	Z+10, r26	; 0x0a
    1ec8:	8c 91       	ld	r24, X
    1eca:	8f 5f       	subi	r24, 0xFF	; 255
    1ecc:	8c 93       	st	X, r24
    1ece:	1c c0       	rjmp	.+56     	; 0x1f08 <xTaskRemoveFromEventList+0x15a>
    1ed0:	4f ec       	ldi	r20, 0xCF	; 207
    1ed2:	57 e0       	ldi	r21, 0x07	; 7
    1ed4:	da 01       	movw	r26, r20
    1ed6:	11 96       	adiw	r26, 0x01	; 1
    1ed8:	cd 91       	ld	r28, X+
    1eda:	dc 91       	ld	r29, X
    1edc:	12 97       	sbiw	r26, 0x02	; 2
    1ede:	d7 87       	std	Z+15, r29	; 0x0f
    1ee0:	c6 87       	std	Z+14, r28	; 0x0e
    1ee2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ee6:	91 8b       	std	Z+17, r25	; 0x11
    1ee8:	80 8b       	std	Z+16, r24	; 0x10
    1eea:	8c 81       	ldd	r24, Y+4	; 0x04
    1eec:	9d 81       	ldd	r25, Y+5	; 0x05
    1eee:	dc 01       	movw	r26, r24
    1ef0:	13 96       	adiw	r26, 0x03	; 3
    1ef2:	3c 93       	st	X, r19
    1ef4:	2e 93       	st	-X, r18
    1ef6:	12 97       	sbiw	r26, 0x02	; 2
    1ef8:	3d 83       	std	Y+5, r19	; 0x05
    1efa:	2c 83       	std	Y+4, r18	; 0x04
    1efc:	55 8b       	std	Z+21, r21	; 0x15
    1efe:	44 8b       	std	Z+20, r20	; 0x14
    1f00:	da 01       	movw	r26, r20
    1f02:	8c 91       	ld	r24, X
    1f04:	8f 5f       	subi	r24, 0xFF	; 255
    1f06:	8c 93       	st	X, r24
    1f08:	96 89       	ldd	r25, Z+22	; 0x16
    1f0a:	e0 91 2d 08 	lds	r30, 0x082D	; 0x80082d <pxCurrentTCB>
    1f0e:	f0 91 2e 08 	lds	r31, 0x082E	; 0x80082e <pxCurrentTCB+0x1>
    1f12:	86 89       	ldd	r24, Z+22	; 0x16
    1f14:	89 17       	cp	r24, r25
    1f16:	20 f4       	brcc	.+8      	; 0x1f20 <xTaskRemoveFromEventList+0x172>
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	80 93 b4 07 	sts	0x07B4, r24	; 0x8007b4 <xYieldPending>
    1f1e:	01 c0       	rjmp	.+2      	; 0x1f22 <xTaskRemoveFromEventList+0x174>
    1f20:	80 e0       	ldi	r24, 0x00	; 0
    1f22:	df 91       	pop	r29
    1f24:	cf 91       	pop	r28
    1f26:	08 95       	ret

00001f28 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
    1f28:	20 91 b3 07 	lds	r18, 0x07B3	; 0x8007b3 <xNumOfOverflows>
    1f2c:	fc 01       	movw	r30, r24
    1f2e:	20 83       	st	Z, r18
    pxTimeOut->xTimeOnEntering = xTickCount;
    1f30:	20 91 b9 07 	lds	r18, 0x07B9	; 0x8007b9 <xTickCount>
    1f34:	30 91 ba 07 	lds	r19, 0x07BA	; 0x8007ba <xTickCount+0x1>
    1f38:	32 83       	std	Z+2, r19	; 0x02
    1f3a:	21 83       	std	Z+1, r18	; 0x01
    1f3c:	08 95       	ret

00001f3e <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
    1f3e:	1f 93       	push	r17
    1f40:	cf 93       	push	r28
    1f42:	df 93       	push	r29
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
    1f44:	0f b6       	in	r0, 0x3f	; 63
    1f46:	f8 94       	cli
    1f48:	0f 92       	push	r0
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
    1f4a:	e0 91 b9 07 	lds	r30, 0x07B9	; 0x8007b9 <xTickCount>
    1f4e:	f0 91 ba 07 	lds	r31, 0x07BA	; 0x8007ba <xTickCount+0x1>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    1f52:	dc 01       	movw	r26, r24
    1f54:	11 96       	adiw	r26, 0x01	; 1
    1f56:	4d 91       	ld	r20, X+
    1f58:	5c 91       	ld	r21, X
    1f5a:	12 97       	sbiw	r26, 0x02	; 2
    1f5c:	df 01       	movw	r26, r30
    1f5e:	a4 1b       	sub	r26, r20
    1f60:	b5 0b       	sbc	r27, r21
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
    1f62:	eb 01       	movw	r28, r22
    1f64:	28 81       	ld	r18, Y
    1f66:	39 81       	ldd	r19, Y+1	; 0x01
    1f68:	2f 3f       	cpi	r18, 0xFF	; 255
    1f6a:	df ef       	ldi	r29, 0xFF	; 255
    1f6c:	3d 07       	cpc	r19, r29
    1f6e:	f9 f0       	breq	.+62     	; 0x1fae <xTaskCheckForTimeOut+0x70>
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    1f70:	ec 01       	movw	r28, r24
    1f72:	18 81       	ld	r17, Y
    1f74:	c0 91 b3 07 	lds	r28, 0x07B3	; 0x8007b3 <xNumOfOverflows>
    1f78:	1c 17       	cp	r17, r28
    1f7a:	41 f0       	breq	.+16     	; 0x1f8c <xTaskCheckForTimeOut+0x4e>
    1f7c:	e4 17       	cp	r30, r20
    1f7e:	f5 07       	cpc	r31, r21
    1f80:	28 f0       	brcs	.+10     	; 0x1f8c <xTaskCheckForTimeOut+0x4e>
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
            *pxTicksToWait = ( TickType_t ) 0;
    1f82:	fb 01       	movw	r30, r22
    1f84:	11 82       	std	Z+1, r1	; 0x01
    1f86:	10 82       	st	Z, r1
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
    1f88:	81 e0       	ldi	r24, 0x01	; 1
            *pxTicksToWait = ( TickType_t ) 0;
    1f8a:	12 c0       	rjmp	.+36     	; 0x1fb0 <xTaskCheckForTimeOut+0x72>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    1f8c:	a2 17       	cp	r26, r18
    1f8e:	b3 07       	cpc	r27, r19
    1f90:	48 f4       	brcc	.+18     	; 0x1fa4 <xTaskCheckForTimeOut+0x66>
    1f92:	fb 01       	movw	r30, r22
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
    1f94:	2a 1b       	sub	r18, r26
    1f96:	3b 0b       	sbc	r19, r27
    1f98:	31 83       	std	Z+1, r19	; 0x01
    1f9a:	20 83       	st	Z, r18
            vTaskInternalSetTimeOutState( pxTimeOut );
    1f9c:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
    1fa0:	80 e0       	ldi	r24, 0x00	; 0
    1fa2:	06 c0       	rjmp	.+12     	; 0x1fb0 <xTaskCheckForTimeOut+0x72>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
    1fa4:	db 01       	movw	r26, r22
    1fa6:	1d 92       	st	X+, r1
    1fa8:	1c 92       	st	X, r1
            xReturn = pdTRUE;
    1faa:	81 e0       	ldi	r24, 0x01	; 1
    1fac:	01 c0       	rjmp	.+2      	; 0x1fb0 <xTaskCheckForTimeOut+0x72>
            if( *pxTicksToWait == portMAX_DELAY )
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
    1fae:	80 e0       	ldi	r24, 0x00	; 0
        {
            *pxTicksToWait = ( TickType_t ) 0;
            xReturn = pdTRUE;
        }
    }
    taskEXIT_CRITICAL();
    1fb0:	0f 90       	pop	r0
    1fb2:	0f be       	out	0x3f, r0	; 63

    return xReturn;
}
    1fb4:	df 91       	pop	r29
    1fb6:	cf 91       	pop	r28
    1fb8:	1f 91       	pop	r17
    1fba:	08 95       	ret

00001fbc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    xYieldPending = pdTRUE;
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	80 93 b4 07 	sts	0x07B4, r24	; 0x8007b4 <xYieldPending>
    1fc2:	08 95       	ret

00001fc4 <UART_VidInt>:
}

u8 UART_u8RecieveData(void){
	while(GET_BIT(UCSRA, RXC)!=1);
	return UDR;
}
    1fc4:	86 e8       	ldi	r24, 0x86	; 134
    1fc6:	80 bd       	out	0x20, r24	; 32
    1fc8:	83 e3       	ldi	r24, 0x33	; 51
    1fca:	89 b9       	out	0x09, r24	; 9
    1fcc:	8a b1       	in	r24, 0x0a	; 10
    1fce:	88 60       	ori	r24, 0x08	; 8
    1fd0:	8a b9       	out	0x0a, r24	; 10
    1fd2:	8a b1       	in	r24, 0x0a	; 10
    1fd4:	80 61       	ori	r24, 0x10	; 16
    1fd6:	8a b9       	out	0x0a, r24	; 10
    1fd8:	08 95       	ret

00001fda <UART_VidSendData>:
    1fda:	5d 9b       	sbis	0x0b, 5	; 11
    1fdc:	fe cf       	rjmp	.-4      	; 0x1fda <UART_VidSendData>
    1fde:	8c b9       	out	0x0c, r24	; 12
    1fe0:	08 95       	ret

00001fe2 <UART_Vid_SendString>:


void UART_Vid_SendString(u8 *user)
{
    1fe2:	0f 93       	push	r16
    1fe4:	1f 93       	push	r17
    1fe6:	cf 93       	push	r28
    1fe8:	8c 01       	movw	r16, r24
	u8 i = 0;
	UART_VidSendData(user[i]);
    1fea:	fc 01       	movw	r30, r24
    1fec:	80 81       	ld	r24, Z
    1fee:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <UART_VidSendData>
}


void UART_Vid_SendString(u8 *user)
{
	u8 i = 0;
    1ff2:	c0 e0       	ldi	r28, 0x00	; 0
	UART_VidSendData(user[i]);
	while(user[i] != '\0')
    1ff4:	07 c0       	rjmp	.+14     	; 0x2004 <UART_Vid_SendString+0x22>
	{
		i++;
    1ff6:	cf 5f       	subi	r28, 0xFF	; 255
		UART_VidSendData(user[i]);
    1ff8:	f8 01       	movw	r30, r16
    1ffa:	ec 0f       	add	r30, r28
    1ffc:	f1 1d       	adc	r31, r1
    1ffe:	80 81       	ld	r24, Z
    2000:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <UART_VidSendData>

void UART_Vid_SendString(u8 *user)
{
	u8 i = 0;
	UART_VidSendData(user[i]);
	while(user[i] != '\0')
    2004:	f8 01       	movw	r30, r16
    2006:	ec 0f       	add	r30, r28
    2008:	f1 1d       	adc	r31, r1
    200a:	80 81       	ld	r24, Z
    200c:	81 11       	cpse	r24, r1
    200e:	f3 cf       	rjmp	.-26     	; 0x1ff6 <UART_Vid_SendString+0x14>
	{
		i++;
		UART_VidSendData(user[i]);
	}
}
    2010:	cf 91       	pop	r28
    2012:	1f 91       	pop	r17
    2014:	0f 91       	pop	r16
    2016:	08 95       	ret

00002018 <UART_Vid_SendInt>:

void UART_Vid_SendInt(u32 Copy_U32Number){
    2018:	cf 93       	push	r28


    if(Copy_U32Number == 0)
    201a:	61 15       	cp	r22, r1
    201c:	71 05       	cpc	r23, r1
    201e:	81 05       	cpc	r24, r1
    2020:	91 05       	cpc	r25, r1
    2022:	21 f4       	brne	.+8      	; 0x202c <UART_Vid_SendInt+0x14>
	{
		UART_VidSendData('0');
    2024:	80 e3       	ldi	r24, 0x30	; 48
    2026:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <UART_VidSendData>
		return ;
    202a:	14 c0       	rjmp	.+40     	; 0x2054 <UART_Vid_SendInt+0x3c>
	}
	else if(Copy_U32Number != 0){
    202c:	61 15       	cp	r22, r1
    202e:	71 05       	cpc	r23, r1
    2030:	81 05       	cpc	r24, r1
    2032:	91 05       	cpc	r25, r1
    2034:	79 f0       	breq	.+30     	; 0x2054 <UART_Vid_SendInt+0x3c>
		UART_Vid_SendInt(Copy_U32Number/10);
    2036:	2a e0       	ldi	r18, 0x0A	; 10
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	40 e0       	ldi	r20, 0x00	; 0
    203c:	50 e0       	ldi	r21, 0x00	; 0
    203e:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__udivmodsi4>
    2042:	c6 2f       	mov	r28, r22
    2044:	ca 01       	movw	r24, r20
    2046:	b9 01       	movw	r22, r18
    2048:	0e 94 0c 10 	call	0x2018	; 0x2018 <UART_Vid_SendInt>
		UART_VidSendData((Copy_U32Number%10)+'0');
    204c:	80 e3       	ldi	r24, 0x30	; 48
    204e:	8c 0f       	add	r24, r28
    2050:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <UART_VidSendData>
		return ;
	}

}
    2054:	cf 91       	pop	r28
    2056:	08 95       	ret

00002058 <__divsf3>:
    2058:	0e 94 40 10 	call	0x2080	; 0x2080 <__divsf3x>
    205c:	0c 94 28 11 	jmp	0x2250	; 0x2250 <__fp_round>
    2060:	0e 94 21 11 	call	0x2242	; 0x2242 <__fp_pscB>
    2064:	58 f0       	brcs	.+22     	; 0x207c <__divsf3+0x24>
    2066:	0e 94 1a 11 	call	0x2234	; 0x2234 <__fp_pscA>
    206a:	40 f0       	brcs	.+16     	; 0x207c <__divsf3+0x24>
    206c:	29 f4       	brne	.+10     	; 0x2078 <__divsf3+0x20>
    206e:	5f 3f       	cpi	r21, 0xFF	; 255
    2070:	29 f0       	breq	.+10     	; 0x207c <__divsf3+0x24>
    2072:	0c 94 11 11 	jmp	0x2222	; 0x2222 <__fp_inf>
    2076:	51 11       	cpse	r21, r1
    2078:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <__fp_szero>
    207c:	0c 94 17 11 	jmp	0x222e	; 0x222e <__fp_nan>

00002080 <__divsf3x>:
    2080:	0e 94 39 11 	call	0x2272	; 0x2272 <__fp_split3>
    2084:	68 f3       	brcs	.-38     	; 0x2060 <__divsf3+0x8>

00002086 <__divsf3_pse>:
    2086:	99 23       	and	r25, r25
    2088:	b1 f3       	breq	.-20     	; 0x2076 <__divsf3+0x1e>
    208a:	55 23       	and	r21, r21
    208c:	91 f3       	breq	.-28     	; 0x2072 <__divsf3+0x1a>
    208e:	95 1b       	sub	r25, r21
    2090:	55 0b       	sbc	r21, r21
    2092:	bb 27       	eor	r27, r27
    2094:	aa 27       	eor	r26, r26
    2096:	62 17       	cp	r22, r18
    2098:	73 07       	cpc	r23, r19
    209a:	84 07       	cpc	r24, r20
    209c:	38 f0       	brcs	.+14     	; 0x20ac <__divsf3_pse+0x26>
    209e:	9f 5f       	subi	r25, 0xFF	; 255
    20a0:	5f 4f       	sbci	r21, 0xFF	; 255
    20a2:	22 0f       	add	r18, r18
    20a4:	33 1f       	adc	r19, r19
    20a6:	44 1f       	adc	r20, r20
    20a8:	aa 1f       	adc	r26, r26
    20aa:	a9 f3       	breq	.-22     	; 0x2096 <__divsf3_pse+0x10>
    20ac:	35 d0       	rcall	.+106    	; 0x2118 <__divsf3_pse+0x92>
    20ae:	0e 2e       	mov	r0, r30
    20b0:	3a f0       	brmi	.+14     	; 0x20c0 <__divsf3_pse+0x3a>
    20b2:	e0 e8       	ldi	r30, 0x80	; 128
    20b4:	32 d0       	rcall	.+100    	; 0x211a <__divsf3_pse+0x94>
    20b6:	91 50       	subi	r25, 0x01	; 1
    20b8:	50 40       	sbci	r21, 0x00	; 0
    20ba:	e6 95       	lsr	r30
    20bc:	00 1c       	adc	r0, r0
    20be:	ca f7       	brpl	.-14     	; 0x20b2 <__divsf3_pse+0x2c>
    20c0:	2b d0       	rcall	.+86     	; 0x2118 <__divsf3_pse+0x92>
    20c2:	fe 2f       	mov	r31, r30
    20c4:	29 d0       	rcall	.+82     	; 0x2118 <__divsf3_pse+0x92>
    20c6:	66 0f       	add	r22, r22
    20c8:	77 1f       	adc	r23, r23
    20ca:	88 1f       	adc	r24, r24
    20cc:	bb 1f       	adc	r27, r27
    20ce:	26 17       	cp	r18, r22
    20d0:	37 07       	cpc	r19, r23
    20d2:	48 07       	cpc	r20, r24
    20d4:	ab 07       	cpc	r26, r27
    20d6:	b0 e8       	ldi	r27, 0x80	; 128
    20d8:	09 f0       	breq	.+2      	; 0x20dc <__divsf3_pse+0x56>
    20da:	bb 0b       	sbc	r27, r27
    20dc:	80 2d       	mov	r24, r0
    20de:	bf 01       	movw	r22, r30
    20e0:	ff 27       	eor	r31, r31
    20e2:	93 58       	subi	r25, 0x83	; 131
    20e4:	5f 4f       	sbci	r21, 0xFF	; 255
    20e6:	3a f0       	brmi	.+14     	; 0x20f6 <__divsf3_pse+0x70>
    20e8:	9e 3f       	cpi	r25, 0xFE	; 254
    20ea:	51 05       	cpc	r21, r1
    20ec:	78 f0       	brcs	.+30     	; 0x210c <__divsf3_pse+0x86>
    20ee:	0c 94 11 11 	jmp	0x2222	; 0x2222 <__fp_inf>
    20f2:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <__fp_szero>
    20f6:	5f 3f       	cpi	r21, 0xFF	; 255
    20f8:	e4 f3       	brlt	.-8      	; 0x20f2 <__divsf3_pse+0x6c>
    20fa:	98 3e       	cpi	r25, 0xE8	; 232
    20fc:	d4 f3       	brlt	.-12     	; 0x20f2 <__divsf3_pse+0x6c>
    20fe:	86 95       	lsr	r24
    2100:	77 95       	ror	r23
    2102:	67 95       	ror	r22
    2104:	b7 95       	ror	r27
    2106:	f7 95       	ror	r31
    2108:	9f 5f       	subi	r25, 0xFF	; 255
    210a:	c9 f7       	brne	.-14     	; 0x20fe <__divsf3_pse+0x78>
    210c:	88 0f       	add	r24, r24
    210e:	91 1d       	adc	r25, r1
    2110:	96 95       	lsr	r25
    2112:	87 95       	ror	r24
    2114:	97 f9       	bld	r25, 7
    2116:	08 95       	ret
    2118:	e1 e0       	ldi	r30, 0x01	; 1
    211a:	66 0f       	add	r22, r22
    211c:	77 1f       	adc	r23, r23
    211e:	88 1f       	adc	r24, r24
    2120:	bb 1f       	adc	r27, r27
    2122:	62 17       	cp	r22, r18
    2124:	73 07       	cpc	r23, r19
    2126:	84 07       	cpc	r24, r20
    2128:	ba 07       	cpc	r27, r26
    212a:	20 f0       	brcs	.+8      	; 0x2134 <__divsf3_pse+0xae>
    212c:	62 1b       	sub	r22, r18
    212e:	73 0b       	sbc	r23, r19
    2130:	84 0b       	sbc	r24, r20
    2132:	ba 0b       	sbc	r27, r26
    2134:	ee 1f       	adc	r30, r30
    2136:	88 f7       	brcc	.-30     	; 0x211a <__divsf3_pse+0x94>
    2138:	e0 95       	com	r30
    213a:	08 95       	ret

0000213c <__fixsfsi>:
    213c:	0e 94 a5 10 	call	0x214a	; 0x214a <__fixunssfsi>
    2140:	68 94       	set
    2142:	b1 11       	cpse	r27, r1
    2144:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <__fp_szero>
    2148:	08 95       	ret

0000214a <__fixunssfsi>:
    214a:	0e 94 41 11 	call	0x2282	; 0x2282 <__fp_splitA>
    214e:	88 f0       	brcs	.+34     	; 0x2172 <__fixunssfsi+0x28>
    2150:	9f 57       	subi	r25, 0x7F	; 127
    2152:	98 f0       	brcs	.+38     	; 0x217a <__fixunssfsi+0x30>
    2154:	b9 2f       	mov	r27, r25
    2156:	99 27       	eor	r25, r25
    2158:	b7 51       	subi	r27, 0x17	; 23
    215a:	b0 f0       	brcs	.+44     	; 0x2188 <__fixunssfsi+0x3e>
    215c:	e1 f0       	breq	.+56     	; 0x2196 <__fixunssfsi+0x4c>
    215e:	66 0f       	add	r22, r22
    2160:	77 1f       	adc	r23, r23
    2162:	88 1f       	adc	r24, r24
    2164:	99 1f       	adc	r25, r25
    2166:	1a f0       	brmi	.+6      	; 0x216e <__fixunssfsi+0x24>
    2168:	ba 95       	dec	r27
    216a:	c9 f7       	brne	.-14     	; 0x215e <__fixunssfsi+0x14>
    216c:	14 c0       	rjmp	.+40     	; 0x2196 <__fixunssfsi+0x4c>
    216e:	b1 30       	cpi	r27, 0x01	; 1
    2170:	91 f0       	breq	.+36     	; 0x2196 <__fixunssfsi+0x4c>
    2172:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <__fp_zero>
    2176:	b1 e0       	ldi	r27, 0x01	; 1
    2178:	08 95       	ret
    217a:	0c 94 5b 11 	jmp	0x22b6	; 0x22b6 <__fp_zero>
    217e:	67 2f       	mov	r22, r23
    2180:	78 2f       	mov	r23, r24
    2182:	88 27       	eor	r24, r24
    2184:	b8 5f       	subi	r27, 0xF8	; 248
    2186:	39 f0       	breq	.+14     	; 0x2196 <__fixunssfsi+0x4c>
    2188:	b9 3f       	cpi	r27, 0xF9	; 249
    218a:	cc f3       	brlt	.-14     	; 0x217e <__fixunssfsi+0x34>
    218c:	86 95       	lsr	r24
    218e:	77 95       	ror	r23
    2190:	67 95       	ror	r22
    2192:	b3 95       	inc	r27
    2194:	d9 f7       	brne	.-10     	; 0x218c <__fixunssfsi+0x42>
    2196:	3e f4       	brtc	.+14     	; 0x21a6 <__fixunssfsi+0x5c>
    2198:	90 95       	com	r25
    219a:	80 95       	com	r24
    219c:	70 95       	com	r23
    219e:	61 95       	neg	r22
    21a0:	7f 4f       	sbci	r23, 0xFF	; 255
    21a2:	8f 4f       	sbci	r24, 0xFF	; 255
    21a4:	9f 4f       	sbci	r25, 0xFF	; 255
    21a6:	08 95       	ret

000021a8 <__floatunsisf>:
    21a8:	e8 94       	clt
    21aa:	09 c0       	rjmp	.+18     	; 0x21be <__floatsisf+0x12>

000021ac <__floatsisf>:
    21ac:	97 fb       	bst	r25, 7
    21ae:	3e f4       	brtc	.+14     	; 0x21be <__floatsisf+0x12>
    21b0:	90 95       	com	r25
    21b2:	80 95       	com	r24
    21b4:	70 95       	com	r23
    21b6:	61 95       	neg	r22
    21b8:	7f 4f       	sbci	r23, 0xFF	; 255
    21ba:	8f 4f       	sbci	r24, 0xFF	; 255
    21bc:	9f 4f       	sbci	r25, 0xFF	; 255
    21be:	99 23       	and	r25, r25
    21c0:	a9 f0       	breq	.+42     	; 0x21ec <__floatsisf+0x40>
    21c2:	f9 2f       	mov	r31, r25
    21c4:	96 e9       	ldi	r25, 0x96	; 150
    21c6:	bb 27       	eor	r27, r27
    21c8:	93 95       	inc	r25
    21ca:	f6 95       	lsr	r31
    21cc:	87 95       	ror	r24
    21ce:	77 95       	ror	r23
    21d0:	67 95       	ror	r22
    21d2:	b7 95       	ror	r27
    21d4:	f1 11       	cpse	r31, r1
    21d6:	f8 cf       	rjmp	.-16     	; 0x21c8 <__floatsisf+0x1c>
    21d8:	fa f4       	brpl	.+62     	; 0x2218 <__floatsisf+0x6c>
    21da:	bb 0f       	add	r27, r27
    21dc:	11 f4       	brne	.+4      	; 0x21e2 <__floatsisf+0x36>
    21de:	60 ff       	sbrs	r22, 0
    21e0:	1b c0       	rjmp	.+54     	; 0x2218 <__floatsisf+0x6c>
    21e2:	6f 5f       	subi	r22, 0xFF	; 255
    21e4:	7f 4f       	sbci	r23, 0xFF	; 255
    21e6:	8f 4f       	sbci	r24, 0xFF	; 255
    21e8:	9f 4f       	sbci	r25, 0xFF	; 255
    21ea:	16 c0       	rjmp	.+44     	; 0x2218 <__floatsisf+0x6c>
    21ec:	88 23       	and	r24, r24
    21ee:	11 f0       	breq	.+4      	; 0x21f4 <__floatsisf+0x48>
    21f0:	96 e9       	ldi	r25, 0x96	; 150
    21f2:	11 c0       	rjmp	.+34     	; 0x2216 <__floatsisf+0x6a>
    21f4:	77 23       	and	r23, r23
    21f6:	21 f0       	breq	.+8      	; 0x2200 <__floatsisf+0x54>
    21f8:	9e e8       	ldi	r25, 0x8E	; 142
    21fa:	87 2f       	mov	r24, r23
    21fc:	76 2f       	mov	r23, r22
    21fe:	05 c0       	rjmp	.+10     	; 0x220a <__floatsisf+0x5e>
    2200:	66 23       	and	r22, r22
    2202:	71 f0       	breq	.+28     	; 0x2220 <__floatsisf+0x74>
    2204:	96 e8       	ldi	r25, 0x86	; 134
    2206:	86 2f       	mov	r24, r22
    2208:	70 e0       	ldi	r23, 0x00	; 0
    220a:	60 e0       	ldi	r22, 0x00	; 0
    220c:	2a f0       	brmi	.+10     	; 0x2218 <__floatsisf+0x6c>
    220e:	9a 95       	dec	r25
    2210:	66 0f       	add	r22, r22
    2212:	77 1f       	adc	r23, r23
    2214:	88 1f       	adc	r24, r24
    2216:	da f7       	brpl	.-10     	; 0x220e <__floatsisf+0x62>
    2218:	88 0f       	add	r24, r24
    221a:	96 95       	lsr	r25
    221c:	87 95       	ror	r24
    221e:	97 f9       	bld	r25, 7
    2220:	08 95       	ret

00002222 <__fp_inf>:
    2222:	97 f9       	bld	r25, 7
    2224:	9f 67       	ori	r25, 0x7F	; 127
    2226:	80 e8       	ldi	r24, 0x80	; 128
    2228:	70 e0       	ldi	r23, 0x00	; 0
    222a:	60 e0       	ldi	r22, 0x00	; 0
    222c:	08 95       	ret

0000222e <__fp_nan>:
    222e:	9f ef       	ldi	r25, 0xFF	; 255
    2230:	80 ec       	ldi	r24, 0xC0	; 192
    2232:	08 95       	ret

00002234 <__fp_pscA>:
    2234:	00 24       	eor	r0, r0
    2236:	0a 94       	dec	r0
    2238:	16 16       	cp	r1, r22
    223a:	17 06       	cpc	r1, r23
    223c:	18 06       	cpc	r1, r24
    223e:	09 06       	cpc	r0, r25
    2240:	08 95       	ret

00002242 <__fp_pscB>:
    2242:	00 24       	eor	r0, r0
    2244:	0a 94       	dec	r0
    2246:	12 16       	cp	r1, r18
    2248:	13 06       	cpc	r1, r19
    224a:	14 06       	cpc	r1, r20
    224c:	05 06       	cpc	r0, r21
    224e:	08 95       	ret

00002250 <__fp_round>:
    2250:	09 2e       	mov	r0, r25
    2252:	03 94       	inc	r0
    2254:	00 0c       	add	r0, r0
    2256:	11 f4       	brne	.+4      	; 0x225c <__fp_round+0xc>
    2258:	88 23       	and	r24, r24
    225a:	52 f0       	brmi	.+20     	; 0x2270 <__fp_round+0x20>
    225c:	bb 0f       	add	r27, r27
    225e:	40 f4       	brcc	.+16     	; 0x2270 <__fp_round+0x20>
    2260:	bf 2b       	or	r27, r31
    2262:	11 f4       	brne	.+4      	; 0x2268 <__fp_round+0x18>
    2264:	60 ff       	sbrs	r22, 0
    2266:	04 c0       	rjmp	.+8      	; 0x2270 <__fp_round+0x20>
    2268:	6f 5f       	subi	r22, 0xFF	; 255
    226a:	7f 4f       	sbci	r23, 0xFF	; 255
    226c:	8f 4f       	sbci	r24, 0xFF	; 255
    226e:	9f 4f       	sbci	r25, 0xFF	; 255
    2270:	08 95       	ret

00002272 <__fp_split3>:
    2272:	57 fd       	sbrc	r21, 7
    2274:	90 58       	subi	r25, 0x80	; 128
    2276:	44 0f       	add	r20, r20
    2278:	55 1f       	adc	r21, r21
    227a:	59 f0       	breq	.+22     	; 0x2292 <__fp_splitA+0x10>
    227c:	5f 3f       	cpi	r21, 0xFF	; 255
    227e:	71 f0       	breq	.+28     	; 0x229c <__fp_splitA+0x1a>
    2280:	47 95       	ror	r20

00002282 <__fp_splitA>:
    2282:	88 0f       	add	r24, r24
    2284:	97 fb       	bst	r25, 7
    2286:	99 1f       	adc	r25, r25
    2288:	61 f0       	breq	.+24     	; 0x22a2 <__fp_splitA+0x20>
    228a:	9f 3f       	cpi	r25, 0xFF	; 255
    228c:	79 f0       	breq	.+30     	; 0x22ac <__fp_splitA+0x2a>
    228e:	87 95       	ror	r24
    2290:	08 95       	ret
    2292:	12 16       	cp	r1, r18
    2294:	13 06       	cpc	r1, r19
    2296:	14 06       	cpc	r1, r20
    2298:	55 1f       	adc	r21, r21
    229a:	f2 cf       	rjmp	.-28     	; 0x2280 <__fp_split3+0xe>
    229c:	46 95       	lsr	r20
    229e:	f1 df       	rcall	.-30     	; 0x2282 <__fp_splitA>
    22a0:	08 c0       	rjmp	.+16     	; 0x22b2 <__fp_splitA+0x30>
    22a2:	16 16       	cp	r1, r22
    22a4:	17 06       	cpc	r1, r23
    22a6:	18 06       	cpc	r1, r24
    22a8:	99 1f       	adc	r25, r25
    22aa:	f1 cf       	rjmp	.-30     	; 0x228e <__fp_splitA+0xc>
    22ac:	86 95       	lsr	r24
    22ae:	71 05       	cpc	r23, r1
    22b0:	61 05       	cpc	r22, r1
    22b2:	08 94       	sec
    22b4:	08 95       	ret

000022b6 <__fp_zero>:
    22b6:	e8 94       	clt

000022b8 <__fp_szero>:
    22b8:	bb 27       	eor	r27, r27
    22ba:	66 27       	eor	r22, r22
    22bc:	77 27       	eor	r23, r23
    22be:	cb 01       	movw	r24, r22
    22c0:	97 f9       	bld	r25, 7
    22c2:	08 95       	ret

000022c4 <__mulsf3>:
    22c4:	0e 94 75 11 	call	0x22ea	; 0x22ea <__mulsf3x>
    22c8:	0c 94 28 11 	jmp	0x2250	; 0x2250 <__fp_round>
    22cc:	0e 94 1a 11 	call	0x2234	; 0x2234 <__fp_pscA>
    22d0:	38 f0       	brcs	.+14     	; 0x22e0 <__mulsf3+0x1c>
    22d2:	0e 94 21 11 	call	0x2242	; 0x2242 <__fp_pscB>
    22d6:	20 f0       	brcs	.+8      	; 0x22e0 <__mulsf3+0x1c>
    22d8:	95 23       	and	r25, r21
    22da:	11 f0       	breq	.+4      	; 0x22e0 <__mulsf3+0x1c>
    22dc:	0c 94 11 11 	jmp	0x2222	; 0x2222 <__fp_inf>
    22e0:	0c 94 17 11 	jmp	0x222e	; 0x222e <__fp_nan>
    22e4:	11 24       	eor	r1, r1
    22e6:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <__fp_szero>

000022ea <__mulsf3x>:
    22ea:	0e 94 39 11 	call	0x2272	; 0x2272 <__fp_split3>
    22ee:	70 f3       	brcs	.-36     	; 0x22cc <__mulsf3+0x8>

000022f0 <__mulsf3_pse>:
    22f0:	95 9f       	mul	r25, r21
    22f2:	c1 f3       	breq	.-16     	; 0x22e4 <__mulsf3+0x20>
    22f4:	95 0f       	add	r25, r21
    22f6:	50 e0       	ldi	r21, 0x00	; 0
    22f8:	55 1f       	adc	r21, r21
    22fa:	62 9f       	mul	r22, r18
    22fc:	f0 01       	movw	r30, r0
    22fe:	72 9f       	mul	r23, r18
    2300:	bb 27       	eor	r27, r27
    2302:	f0 0d       	add	r31, r0
    2304:	b1 1d       	adc	r27, r1
    2306:	63 9f       	mul	r22, r19
    2308:	aa 27       	eor	r26, r26
    230a:	f0 0d       	add	r31, r0
    230c:	b1 1d       	adc	r27, r1
    230e:	aa 1f       	adc	r26, r26
    2310:	64 9f       	mul	r22, r20
    2312:	66 27       	eor	r22, r22
    2314:	b0 0d       	add	r27, r0
    2316:	a1 1d       	adc	r26, r1
    2318:	66 1f       	adc	r22, r22
    231a:	82 9f       	mul	r24, r18
    231c:	22 27       	eor	r18, r18
    231e:	b0 0d       	add	r27, r0
    2320:	a1 1d       	adc	r26, r1
    2322:	62 1f       	adc	r22, r18
    2324:	73 9f       	mul	r23, r19
    2326:	b0 0d       	add	r27, r0
    2328:	a1 1d       	adc	r26, r1
    232a:	62 1f       	adc	r22, r18
    232c:	83 9f       	mul	r24, r19
    232e:	a0 0d       	add	r26, r0
    2330:	61 1d       	adc	r22, r1
    2332:	22 1f       	adc	r18, r18
    2334:	74 9f       	mul	r23, r20
    2336:	33 27       	eor	r19, r19
    2338:	a0 0d       	add	r26, r0
    233a:	61 1d       	adc	r22, r1
    233c:	23 1f       	adc	r18, r19
    233e:	84 9f       	mul	r24, r20
    2340:	60 0d       	add	r22, r0
    2342:	21 1d       	adc	r18, r1
    2344:	82 2f       	mov	r24, r18
    2346:	76 2f       	mov	r23, r22
    2348:	6a 2f       	mov	r22, r26
    234a:	11 24       	eor	r1, r1
    234c:	9f 57       	subi	r25, 0x7F	; 127
    234e:	50 40       	sbci	r21, 0x00	; 0
    2350:	9a f0       	brmi	.+38     	; 0x2378 <__mulsf3_pse+0x88>
    2352:	f1 f0       	breq	.+60     	; 0x2390 <__mulsf3_pse+0xa0>
    2354:	88 23       	and	r24, r24
    2356:	4a f0       	brmi	.+18     	; 0x236a <__mulsf3_pse+0x7a>
    2358:	ee 0f       	add	r30, r30
    235a:	ff 1f       	adc	r31, r31
    235c:	bb 1f       	adc	r27, r27
    235e:	66 1f       	adc	r22, r22
    2360:	77 1f       	adc	r23, r23
    2362:	88 1f       	adc	r24, r24
    2364:	91 50       	subi	r25, 0x01	; 1
    2366:	50 40       	sbci	r21, 0x00	; 0
    2368:	a9 f7       	brne	.-22     	; 0x2354 <__mulsf3_pse+0x64>
    236a:	9e 3f       	cpi	r25, 0xFE	; 254
    236c:	51 05       	cpc	r21, r1
    236e:	80 f0       	brcs	.+32     	; 0x2390 <__mulsf3_pse+0xa0>
    2370:	0c 94 11 11 	jmp	0x2222	; 0x2222 <__fp_inf>
    2374:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <__fp_szero>
    2378:	5f 3f       	cpi	r21, 0xFF	; 255
    237a:	e4 f3       	brlt	.-8      	; 0x2374 <__mulsf3_pse+0x84>
    237c:	98 3e       	cpi	r25, 0xE8	; 232
    237e:	d4 f3       	brlt	.-12     	; 0x2374 <__mulsf3_pse+0x84>
    2380:	86 95       	lsr	r24
    2382:	77 95       	ror	r23
    2384:	67 95       	ror	r22
    2386:	b7 95       	ror	r27
    2388:	f7 95       	ror	r31
    238a:	e7 95       	ror	r30
    238c:	9f 5f       	subi	r25, 0xFF	; 255
    238e:	c1 f7       	brne	.-16     	; 0x2380 <__mulsf3_pse+0x90>
    2390:	fe 2b       	or	r31, r30
    2392:	88 0f       	add	r24, r24
    2394:	91 1d       	adc	r25, r1
    2396:	96 95       	lsr	r25
    2398:	87 95       	ror	r24
    239a:	97 f9       	bld	r25, 7
    239c:	08 95       	ret

0000239e <__udivmodhi4>:
    239e:	aa 1b       	sub	r26, r26
    23a0:	bb 1b       	sub	r27, r27
    23a2:	51 e1       	ldi	r21, 0x11	; 17
    23a4:	07 c0       	rjmp	.+14     	; 0x23b4 <__udivmodhi4_ep>

000023a6 <__udivmodhi4_loop>:
    23a6:	aa 1f       	adc	r26, r26
    23a8:	bb 1f       	adc	r27, r27
    23aa:	a6 17       	cp	r26, r22
    23ac:	b7 07       	cpc	r27, r23
    23ae:	10 f0       	brcs	.+4      	; 0x23b4 <__udivmodhi4_ep>
    23b0:	a6 1b       	sub	r26, r22
    23b2:	b7 0b       	sbc	r27, r23

000023b4 <__udivmodhi4_ep>:
    23b4:	88 1f       	adc	r24, r24
    23b6:	99 1f       	adc	r25, r25
    23b8:	5a 95       	dec	r21
    23ba:	a9 f7       	brne	.-22     	; 0x23a6 <__udivmodhi4_loop>
    23bc:	80 95       	com	r24
    23be:	90 95       	com	r25
    23c0:	bc 01       	movw	r22, r24
    23c2:	cd 01       	movw	r24, r26
    23c4:	08 95       	ret

000023c6 <__udivmodsi4>:
    23c6:	a1 e2       	ldi	r26, 0x21	; 33
    23c8:	1a 2e       	mov	r1, r26
    23ca:	aa 1b       	sub	r26, r26
    23cc:	bb 1b       	sub	r27, r27
    23ce:	fd 01       	movw	r30, r26
    23d0:	0d c0       	rjmp	.+26     	; 0x23ec <__udivmodsi4_ep>

000023d2 <__udivmodsi4_loop>:
    23d2:	aa 1f       	adc	r26, r26
    23d4:	bb 1f       	adc	r27, r27
    23d6:	ee 1f       	adc	r30, r30
    23d8:	ff 1f       	adc	r31, r31
    23da:	a2 17       	cp	r26, r18
    23dc:	b3 07       	cpc	r27, r19
    23de:	e4 07       	cpc	r30, r20
    23e0:	f5 07       	cpc	r31, r21
    23e2:	20 f0       	brcs	.+8      	; 0x23ec <__udivmodsi4_ep>
    23e4:	a2 1b       	sub	r26, r18
    23e6:	b3 0b       	sbc	r27, r19
    23e8:	e4 0b       	sbc	r30, r20
    23ea:	f5 0b       	sbc	r31, r21

000023ec <__udivmodsi4_ep>:
    23ec:	66 1f       	adc	r22, r22
    23ee:	77 1f       	adc	r23, r23
    23f0:	88 1f       	adc	r24, r24
    23f2:	99 1f       	adc	r25, r25
    23f4:	1a 94       	dec	r1
    23f6:	69 f7       	brne	.-38     	; 0x23d2 <__udivmodsi4_loop>
    23f8:	60 95       	com	r22
    23fa:	70 95       	com	r23
    23fc:	80 95       	com	r24
    23fe:	90 95       	com	r25
    2400:	9b 01       	movw	r18, r22
    2402:	ac 01       	movw	r20, r24
    2404:	bd 01       	movw	r22, r26
    2406:	cf 01       	movw	r24, r30
    2408:	08 95       	ret

0000240a <memcpy>:
    240a:	fb 01       	movw	r30, r22
    240c:	dc 01       	movw	r26, r24
    240e:	02 c0       	rjmp	.+4      	; 0x2414 <memcpy+0xa>
    2410:	01 90       	ld	r0, Z+
    2412:	0d 92       	st	X+, r0
    2414:	41 50       	subi	r20, 0x01	; 1
    2416:	50 40       	sbci	r21, 0x00	; 0
    2418:	d8 f7       	brcc	.-10     	; 0x2410 <memcpy+0x6>
    241a:	08 95       	ret

0000241c <itoa>:
    241c:	45 32       	cpi	r20, 0x25	; 37
    241e:	51 05       	cpc	r21, r1
    2420:	20 f4       	brcc	.+8      	; 0x242a <itoa+0xe>
    2422:	42 30       	cpi	r20, 0x02	; 2
    2424:	10 f0       	brcs	.+4      	; 0x242a <itoa+0xe>
    2426:	0c 94 19 12 	jmp	0x2432	; 0x2432 <__itoa_ncheck>
    242a:	fb 01       	movw	r30, r22
    242c:	10 82       	st	Z, r1
    242e:	cb 01       	movw	r24, r22
    2430:	08 95       	ret

00002432 <__itoa_ncheck>:
    2432:	bb 27       	eor	r27, r27
    2434:	4a 30       	cpi	r20, 0x0A	; 10
    2436:	31 f4       	brne	.+12     	; 0x2444 <__itoa_ncheck+0x12>
    2438:	99 23       	and	r25, r25
    243a:	22 f4       	brpl	.+8      	; 0x2444 <__itoa_ncheck+0x12>
    243c:	bd e2       	ldi	r27, 0x2D	; 45
    243e:	90 95       	com	r25
    2440:	81 95       	neg	r24
    2442:	9f 4f       	sbci	r25, 0xFF	; 255
    2444:	0c 94 25 12 	jmp	0x244a	; 0x244a <__utoa_common>

00002448 <__utoa_ncheck>:
    2448:	bb 27       	eor	r27, r27

0000244a <__utoa_common>:
    244a:	fb 01       	movw	r30, r22
    244c:	55 27       	eor	r21, r21
    244e:	aa 27       	eor	r26, r26
    2450:	88 0f       	add	r24, r24
    2452:	99 1f       	adc	r25, r25
    2454:	aa 1f       	adc	r26, r26
    2456:	a4 17       	cp	r26, r20
    2458:	10 f0       	brcs	.+4      	; 0x245e <__utoa_common+0x14>
    245a:	a4 1b       	sub	r26, r20
    245c:	83 95       	inc	r24
    245e:	50 51       	subi	r21, 0x10	; 16
    2460:	b9 f7       	brne	.-18     	; 0x2450 <__utoa_common+0x6>
    2462:	a0 5d       	subi	r26, 0xD0	; 208
    2464:	aa 33       	cpi	r26, 0x3A	; 58
    2466:	08 f0       	brcs	.+2      	; 0x246a <__utoa_common+0x20>
    2468:	a9 5d       	subi	r26, 0xD9	; 217
    246a:	a1 93       	st	Z+, r26
    246c:	00 97       	sbiw	r24, 0x00	; 0
    246e:	79 f7       	brne	.-34     	; 0x244e <__utoa_common+0x4>
    2470:	b1 11       	cpse	r27, r1
    2472:	b1 93       	st	Z+, r27
    2474:	11 92       	st	Z+, r1
    2476:	cb 01       	movw	r24, r22
    2478:	0c 94 3e 12 	jmp	0x247c	; 0x247c <strrev>

0000247c <strrev>:
    247c:	dc 01       	movw	r26, r24
    247e:	fc 01       	movw	r30, r24
    2480:	67 2f       	mov	r22, r23
    2482:	71 91       	ld	r23, Z+
    2484:	77 23       	and	r23, r23
    2486:	e1 f7       	brne	.-8      	; 0x2480 <strrev+0x4>
    2488:	32 97       	sbiw	r30, 0x02	; 2
    248a:	04 c0       	rjmp	.+8      	; 0x2494 <strrev+0x18>
    248c:	7c 91       	ld	r23, X
    248e:	6d 93       	st	X+, r22
    2490:	70 83       	st	Z, r23
    2492:	62 91       	ld	r22, -Z
    2494:	ae 17       	cp	r26, r30
    2496:	bf 07       	cpc	r27, r31
    2498:	c8 f3       	brcs	.-14     	; 0x248c <strrev+0x10>
    249a:	08 95       	ret

0000249c <_exit>:
    249c:	f8 94       	cli

0000249e <__stop_program>:
    249e:	ff cf       	rjmp	.-2      	; 0x249e <__stop_program>
