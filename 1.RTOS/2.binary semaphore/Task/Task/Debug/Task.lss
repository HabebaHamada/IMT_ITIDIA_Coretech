
Task.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000018f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  000018f4  00001988  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000649  00800098  00800098  000019c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000019c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000019f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f8  00000000  00000000  00001a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004b81  00000000  00000000  00001e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001147  00000000  00000000  000069a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000029e3  00000000  00000000  00007aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bbc  00000000  00000000  0000a4d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001676  00000000  00000000  0000b08c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000045f0  00000000  00000000  0000c702  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003f0  00000000  00000000  00010cf2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 43 04 	jmp	0x886	; 0x886 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ef       	ldi	r30, 0xF4	; 244
      68:	f8 e1       	ldi	r31, 0x18	; 24
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 39       	cpi	r26, 0x98	; 152
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	26 e0       	ldi	r18, 0x06	; 6
      78:	a8 e9       	ldi	r26, 0x98	; 152
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3e       	cpi	r26, 0xE1	; 225
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ad 02 	call	0x55a	; 0x55a <main>
      8a:	0c 94 78 0c 	jmp	0x18f0	; 0x18f0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <CLCD_voidSendCommand>:
{
	/* For the second line display add 0x40 to the Address */
	u8 Local_u8Address = (Copy_u8XPosition * 0x40) + (Copy_u8YPosition);
	
	/* Set bit 7 for DDRAM Address Command then send the Command */
	CLCD2_voidSendCommand(Local_u8Address + 128);
      92:	cf 93       	push	r28
      94:	c8 2f       	mov	r28, r24
      96:	40 e0       	ldi	r20, 0x00	; 0
      98:	61 e0       	ldi	r22, 0x01	; 1
      9a:	80 e0       	ldi	r24, 0x00	; 0
      9c:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_u8WritePinValue>
      a0:	40 e0       	ldi	r20, 0x00	; 0
      a2:	61 e0       	ldi	r22, 0x01	; 1
      a4:	81 e0       	ldi	r24, 0x01	; 1
      a6:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_u8WritePinValue>
      aa:	6c 2f       	mov	r22, r28
      ac:	80 e0       	ldi	r24, 0x00	; 0
      ae:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_u8WritePortValue>
      b2:	41 e0       	ldi	r20, 0x01	; 1
      b4:	61 e0       	ldi	r22, 0x01	; 1
      b6:	82 e0       	ldi	r24, 0x02	; 2
      b8:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_u8WritePinValue>
      bc:	8f e9       	ldi	r24, 0x9F	; 159
      be:	9f e0       	ldi	r25, 0x0F	; 15
      c0:	01 97       	sbiw	r24, 0x01	; 1
      c2:	f1 f7       	brne	.-4      	; 0xc0 <CLCD_voidSendCommand+0x2e>
      c4:	00 c0       	rjmp	.+0      	; 0xc6 <CLCD_voidSendCommand+0x34>
      c6:	00 00       	nop
      c8:	40 e0       	ldi	r20, 0x00	; 0
      ca:	61 e0       	ldi	r22, 0x01	; 1
      cc:	82 e0       	ldi	r24, 0x02	; 2
      ce:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_u8WritePinValue>
      d2:	cf 91       	pop	r28
      d4:	08 95       	ret

000000d6 <CLCD_voidInit>:
      d6:	2f ef       	ldi	r18, 0xFF	; 255
      d8:	89 ef       	ldi	r24, 0xF9	; 249
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	21 50       	subi	r18, 0x01	; 1
      de:	80 40       	sbci	r24, 0x00	; 0
      e0:	90 40       	sbci	r25, 0x00	; 0
      e2:	e1 f7       	brne	.-8      	; 0xdc <CLCD_voidInit+0x6>
      e4:	00 c0       	rjmp	.+0      	; 0xe6 <CLCD_voidInit+0x10>
      e6:	00 00       	nop
      e8:	88 e3       	ldi	r24, 0x38	; 56
      ea:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>
      ee:	8c e0       	ldi	r24, 0x0C	; 12
      f0:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>
      f4:	81 e0       	ldi	r24, 0x01	; 1
      f6:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>
      fa:	08 95       	ret

000000fc <CLCD_voidSendData>:
      fc:	cf 93       	push	r28
      fe:	c8 2f       	mov	r28, r24
     100:	41 e0       	ldi	r20, 0x01	; 1
     102:	61 e0       	ldi	r22, 0x01	; 1
     104:	80 e0       	ldi	r24, 0x00	; 0
     106:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_u8WritePinValue>
     10a:	40 e0       	ldi	r20, 0x00	; 0
     10c:	61 e0       	ldi	r22, 0x01	; 1
     10e:	81 e0       	ldi	r24, 0x01	; 1
     110:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_u8WritePinValue>
     114:	6c 2f       	mov	r22, r28
     116:	80 e0       	ldi	r24, 0x00	; 0
     118:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_u8WritePortValue>
     11c:	41 e0       	ldi	r20, 0x01	; 1
     11e:	61 e0       	ldi	r22, 0x01	; 1
     120:	82 e0       	ldi	r24, 0x02	; 2
     122:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_u8WritePinValue>
     126:	8f e9       	ldi	r24, 0x9F	; 159
     128:	9f e0       	ldi	r25, 0x0F	; 15
     12a:	01 97       	sbiw	r24, 0x01	; 1
     12c:	f1 f7       	brne	.-4      	; 0x12a <CLCD_voidSendData+0x2e>
     12e:	00 c0       	rjmp	.+0      	; 0x130 <CLCD_voidSendData+0x34>
     130:	00 00       	nop
     132:	40 e0       	ldi	r20, 0x00	; 0
     134:	61 e0       	ldi	r22, 0x01	; 1
     136:	82 e0       	ldi	r24, 0x02	; 2
     138:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_u8WritePinValue>
     13c:	cf 91       	pop	r28
     13e:	08 95       	ret

00000140 <CLCD_voidSendString>:
     140:	0f 93       	push	r16
     142:	1f 93       	push	r17
     144:	cf 93       	push	r28
     146:	8c 01       	movw	r16, r24
     148:	c0 e0       	ldi	r28, 0x00	; 0
     14a:	03 c0       	rjmp	.+6      	; 0x152 <CLCD_voidSendString+0x12>
     14c:	0e 94 7e 00 	call	0xfc	; 0xfc <CLCD_voidSendData>
     150:	cf 5f       	subi	r28, 0xFF	; 255
     152:	f8 01       	movw	r30, r16
     154:	ec 0f       	add	r30, r28
     156:	f1 1d       	adc	r31, r1
     158:	80 81       	ld	r24, Z
     15a:	81 11       	cpse	r24, r1
     15c:	f7 cf       	rjmp	.-18     	; 0x14c <CLCD_voidSendString+0xc>
     15e:	cf 91       	pop	r28
     160:	1f 91       	pop	r17
     162:	0f 91       	pop	r16
     164:	08 95       	ret

00000166 <CLCD_voidSetCursor>:
     166:	90 e4       	ldi	r25, 0x40	; 64
     168:	89 9f       	mul	r24, r25
     16a:	60 0d       	add	r22, r0
     16c:	11 24       	eor	r1, r1
     16e:	86 2f       	mov	r24, r22
     170:	80 58       	subi	r24, 0x80	; 128
     172:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>
     176:	08 95       	ret

00000178 <CLCD_voidClearDisplay>:
	
}

void CLCD_voidClearDisplay()
{
	CLCD_voidSendCommand(0b00000001);	//sending Instruction to clear the whole display
     178:	81 e0       	ldi	r24, 0x01	; 1
     17a:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>
     17e:	08 95       	ret

00000180 <DIO_u8WritePinValue>:

		                                                       
u8  DIO_u8WritePinValue(u8 Copy_u8Pin, u8 Copy_u8Port, u8 Copy_u8Value)
{	
	u8 Local_u8ErrorState=FALSE;
	if ((Copy_u8Pin < DIO_u8NumOfPins)&&(Copy_u8Port < DIO_u8NumOfPorts))
     180:	88 30       	cpi	r24, 0x08	; 8
     182:	00 f5       	brcc	.+64     	; 0x1c4 <DIO_u8WritePinValue+0x44>
     184:	64 30       	cpi	r22, 0x04	; 4
     186:	00 f5       	brcc	.+64     	; 0x1c8 <DIO_u8WritePinValue+0x48>
	{
	   ASSIGN_BIT(*DIO_u8ArrPORT[Copy_u8Port],Copy_u8Pin, Copy_u8Value);
     188:	e6 2f       	mov	r30, r22
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	ee 0f       	add	r30, r30
     18e:	ff 1f       	adc	r31, r31
     190:	ed 59       	subi	r30, 0x9D	; 157
     192:	ff 4f       	sbci	r31, 0xFF	; 255
     194:	01 90       	ld	r0, Z+
     196:	f0 81       	ld	r31, Z
     198:	e0 2d       	mov	r30, r0
     19a:	90 81       	ld	r25, Z
     19c:	21 e0       	ldi	r18, 0x01	; 1
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	08 2e       	mov	r0, r24
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DIO_u8WritePinValue+0x28>
     1a4:	22 0f       	add	r18, r18
     1a6:	33 1f       	adc	r19, r19
     1a8:	0a 94       	dec	r0
     1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <DIO_u8WritePinValue+0x24>
     1ac:	50 e0       	ldi	r21, 0x00	; 0
     1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_u8WritePinValue+0x34>
     1b0:	44 0f       	add	r20, r20
     1b2:	55 1f       	adc	r21, r21
     1b4:	8a 95       	dec	r24
     1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_u8WritePinValue+0x30>
     1b8:	20 95       	com	r18
     1ba:	29 23       	and	r18, r25
     1bc:	42 2b       	or	r20, r18
     1be:	40 83       	st	Z, r20
	   Local_u8ErrorState=TRUE;
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	08 95       	ret


		                                                       
u8  DIO_u8WritePinValue(u8 Copy_u8Pin, u8 Copy_u8Port, u8 Copy_u8Value)
{	
	u8 Local_u8ErrorState=FALSE;
     1c4:	80 e0       	ldi	r24, 0x00	; 0
     1c6:	08 95       	ret
     1c8:	80 e0       	ldi	r24, 0x00	; 0
	   Local_u8ErrorState=TRUE;
	   
	}
		
	return Local_u8ErrorState;
}
     1ca:	08 95       	ret

000001cc <DIO_u8WritePortValue>:

u8  DIO_u8WritePortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=FALSE;
	
  if (Copy_u8Port <DIO_u8NumOfPorts)
     1cc:	84 30       	cpi	r24, 0x04	; 4
     1ce:	60 f4       	brcc	.+24     	; 0x1e8 <DIO_u8WritePortValue+0x1c>
  {
	  Assign_Reg(*DIO_u8ArrPORT[Copy_u8Port],Copy_u8Value);
     1d0:	e8 2f       	mov	r30, r24
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	ee 0f       	add	r30, r30
     1d6:	ff 1f       	adc	r31, r31
     1d8:	ed 59       	subi	r30, 0x9D	; 157
     1da:	ff 4f       	sbci	r31, 0xFF	; 255
     1dc:	01 90       	ld	r0, Z+
     1de:	f0 81       	ld	r31, Z
     1e0:	e0 2d       	mov	r30, r0
     1e2:	60 83       	st	Z, r22
	  Local_u8ErrorState=TRUE;
     1e4:	81 e0       	ldi	r24, 0x01	; 1
     1e6:	08 95       	ret
	return Local_u8ErrorState;
}

u8  DIO_u8WritePortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=FALSE;
     1e8:	80 e0       	ldi	r24, 0x00	; 0
	  Assign_Reg(*DIO_u8ArrPORT[Copy_u8Port],Copy_u8Value);
	  Local_u8ErrorState=TRUE;
  } 
  			
	return Local_u8ErrorState;
}
     1ea:	08 95       	ret

000001ec <prvHeapInit>:
    /* Ensure the heap starts on a correctly aligned boundary. */
    pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     1ec:	ad e9       	ldi	r26, 0x9D	; 157
     1ee:	b0 e0       	ldi	r27, 0x00	; 0
     1f0:	e1 ea       	ldi	r30, 0xA1	; 161
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	11 96       	adiw	r26, 0x01	; 1
     1f6:	fc 93       	st	X, r31
     1f8:	ee 93       	st	-X, r30
    xStart.xBlockSize = ( size_t ) 0;
     1fa:	13 96       	adiw	r26, 0x03	; 3
     1fc:	1c 92       	st	X, r1
     1fe:	1e 92       	st	-X, r1
     200:	12 97       	sbiw	r26, 0x02	; 2

    /* xEnd is used to mark the end of the list of free blocks. */
    xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     202:	a9 e9       	ldi	r26, 0x99	; 153
     204:	b0 e0       	ldi	r27, 0x00	; 0
     206:	8b ed       	ldi	r24, 0xDB	; 219
     208:	95 e0       	ldi	r25, 0x05	; 5
     20a:	13 96       	adiw	r26, 0x03	; 3
     20c:	9c 93       	st	X, r25
     20e:	8e 93       	st	-X, r24
     210:	12 97       	sbiw	r26, 0x02	; 2
    xEnd.pxNextFreeBlock = NULL;
     212:	11 96       	adiw	r26, 0x01	; 1
     214:	1c 92       	st	X, r1
     216:	1e 92       	st	-X, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     218:	93 83       	std	Z+3, r25	; 0x03
     21a:	82 83       	std	Z+2, r24	; 0x02
    pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     21c:	b1 83       	std	Z+1, r27	; 0x01
     21e:	a0 83       	st	Z, r26
     220:	08 95       	ret

00000222 <pvPortMalloc>:
        pxIterator->pxNextFreeBlock = pxBlockToInsert;                                                                              \
    }
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     222:	ef 92       	push	r14
     224:	ff 92       	push	r15
     226:	0f 93       	push	r16
     228:	1f 93       	push	r17
     22a:	cf 93       	push	r28
     22c:	df 93       	push	r29
     22e:	ec 01       	movw	r28, r24
    BlockLink_t * pxNewBlockLink;
    PRIVILEGED_DATA static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
     230:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( xHeapHasBeenInitialised == pdFALSE )
     234:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <__data_end>
     238:	81 11       	cpse	r24, r1
     23a:	05 c0       	rjmp	.+10     	; 0x246 <pvPortMalloc+0x24>
        {
            prvHeapInit();
     23c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <prvHeapInit>
            xHeapHasBeenInitialised = pdTRUE;
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__data_end>
        }

        if( xWantedSize > 0 )
     246:	20 97       	sbiw	r28, 0x00	; 0
     248:	41 f0       	breq	.+16     	; 0x25a <pvPortMalloc+0x38>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = heapSTRUCT_SIZE + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
     24a:	cb 3f       	cpi	r28, 0xFB	; 251
     24c:	8f ef       	ldi	r24, 0xFF	; 255
     24e:	d8 07       	cpc	r29, r24
     250:	10 f4       	brcc	.+4      	; 0x256 <pvPortMalloc+0x34>
            {
                xWantedSize += xAdditionalRequiredSize;
     252:	25 96       	adiw	r28, 0x05	; 5
     254:	02 c0       	rjmp	.+4      	; 0x25a <pvPortMalloc+0x38>
            }
            else
            {
                xWantedSize = 0;
     256:	c0 e0       	ldi	r28, 0x00	; 0
     258:	d0 e0       	ldi	r29, 0x00	; 0

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
     25a:	dd 23       	and	r29, r29
     25c:	0c f4       	brge	.+2      	; 0x260 <pvPortMalloc+0x3e>
     25e:	66 c0       	rjmp	.+204    	; 0x32c <pvPortMalloc+0x10a>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     260:	20 97       	sbiw	r28, 0x00	; 0
     262:	09 f4       	brne	.+2      	; 0x266 <pvPortMalloc+0x44>
     264:	66 c0       	rjmp	.+204    	; 0x332 <pvPortMalloc+0x110>
     266:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     26a:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     26e:	2c 17       	cp	r18, r28
     270:	3d 07       	cpc	r19, r29
     272:	08 f4       	brcc	.+2      	; 0x276 <pvPortMalloc+0x54>
     274:	61 c0       	rjmp	.+194    	; 0x338 <pvPortMalloc+0x116>
            {
                /* Blocks are stored in byte order - traverse the list from the start
                 * (smallest) block until one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     276:	e0 91 9d 00 	lds	r30, 0x009D	; 0x80009d <xStart>
     27a:	f0 91 9e 00 	lds	r31, 0x009E	; 0x80009e <xStart+0x1>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Blocks are stored in byte order - traverse the list from the start
                 * (smallest) block until one of adequate size is found. */
                pxPreviousBlock = &xStart;
     27e:	ad e9       	ldi	r26, 0x9D	; 157
     280:	b0 e0       	ldi	r27, 0x00	; 0
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     282:	02 c0       	rjmp	.+4      	; 0x288 <pvPortMalloc+0x66>
                {
                    pxPreviousBlock = pxBlock;
     284:	df 01       	movw	r26, r30
                    pxBlock = pxBlock->pxNextFreeBlock;
     286:	fc 01       	movw	r30, r24
                /* Blocks are stored in byte order - traverse the list from the start
                 * (smallest) block until one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     288:	82 81       	ldd	r24, Z+2	; 0x02
     28a:	93 81       	ldd	r25, Z+3	; 0x03
     28c:	8c 17       	cp	r24, r28
     28e:	9d 07       	cpc	r25, r29
     290:	20 f4       	brcc	.+8      	; 0x29a <pvPortMalloc+0x78>
     292:	80 81       	ld	r24, Z
     294:	91 81       	ldd	r25, Z+1	; 0x01
     296:	00 97       	sbiw	r24, 0x00	; 0
     298:	a9 f7       	brne	.-22     	; 0x284 <pvPortMalloc+0x62>
                    pxPreviousBlock = pxBlock;
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If we found the end marker then a block of adequate size was not found. */
                if( pxBlock != &xEnd )
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	e9 39       	cpi	r30, 0x99	; 153
     29e:	f8 07       	cpc	r31, r24
     2a0:	09 f4       	brne	.+2      	; 0x2a4 <pvPortMalloc+0x82>
     2a2:	4d c0       	rjmp	.+154    	; 0x33e <pvPortMalloc+0x11c>
                {
                    /* Return the memory space - jumping over the BlockLink_t structure
                     * at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
     2a4:	0d 91       	ld	r16, X+
     2a6:	1c 91       	ld	r17, X
     2a8:	11 97       	sbiw	r26, 0x01	; 1
     2aa:	0c 5f       	subi	r16, 0xFC	; 252
     2ac:	1f 4f       	sbci	r17, 0xFF	; 255

                    /* This block is being returned for use so must be taken out of the
                     * list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     2ae:	80 81       	ld	r24, Z
     2b0:	91 81       	ldd	r25, Z+1	; 0x01
     2b2:	8d 93       	st	X+, r24
     2b4:	9c 93       	st	X, r25

                    /* If the block is larger than required it can be split into two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     2b6:	82 81       	ldd	r24, Z+2	; 0x02
     2b8:	93 81       	ldd	r25, Z+3	; 0x03
     2ba:	8c 1b       	sub	r24, r28
     2bc:	9d 0b       	sbc	r25, r29
     2be:	89 30       	cpi	r24, 0x09	; 9
     2c0:	91 05       	cpc	r25, r1
     2c2:	30 f1       	brcs	.+76     	; 0x310 <pvPortMalloc+0xee>
                    {
                        /* This block is to be split into two.  Create a new block
                         * following the number of bytes requested. The void cast is
                         * used to prevent byte alignment warnings from the compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     2c4:	bf 01       	movw	r22, r30
     2c6:	6c 0f       	add	r22, r28
     2c8:	7d 1f       	adc	r23, r29

                        /* Calculate the sizes of two blocks split from the single
                         * block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     2ca:	db 01       	movw	r26, r22
     2cc:	13 96       	adiw	r26, 0x03	; 3
     2ce:	9c 93       	st	X, r25
     2d0:	8e 93       	st	-X, r24
     2d2:	12 97       	sbiw	r26, 0x02	; 2
                        pxBlock->xBlockSize = xWantedSize;
     2d4:	d3 83       	std	Z+3, r29	; 0x03
     2d6:	c2 83       	std	Z+2, r28	; 0x02

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
     2d8:	12 96       	adiw	r26, 0x02	; 2
     2da:	4d 91       	ld	r20, X+
     2dc:	5c 91       	ld	r21, X
     2de:	13 97       	sbiw	r26, 0x03	; 3
     2e0:	0f 2e       	mov	r0, r31
     2e2:	fd e9       	ldi	r31, 0x9D	; 157
     2e4:	ef 2e       	mov	r14, r31
     2e6:	f0 e0       	ldi	r31, 0x00	; 0
     2e8:	ff 2e       	mov	r15, r31
     2ea:	f0 2d       	mov	r31, r0
     2ec:	01 c0       	rjmp	.+2      	; 0x2f0 <pvPortMalloc+0xce>
     2ee:	7d 01       	movw	r14, r26
     2f0:	e7 01       	movw	r28, r14
     2f2:	a8 81       	ld	r26, Y
     2f4:	b9 81       	ldd	r27, Y+1	; 0x01
     2f6:	12 96       	adiw	r26, 0x02	; 2
     2f8:	8d 91       	ld	r24, X+
     2fa:	9c 91       	ld	r25, X
     2fc:	13 97       	sbiw	r26, 0x03	; 3
     2fe:	84 17       	cp	r24, r20
     300:	95 07       	cpc	r25, r21
     302:	a8 f3       	brcs	.-22     	; 0x2ee <pvPortMalloc+0xcc>
     304:	eb 01       	movw	r28, r22
     306:	b9 83       	std	Y+1, r27	; 0x01
     308:	a8 83       	st	Y, r26
     30a:	d7 01       	movw	r26, r14
     30c:	6d 93       	st	X+, r22
     30e:	7c 93       	st	X, r23
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     310:	82 81       	ldd	r24, Z+2	; 0x02
     312:	93 81       	ldd	r25, Z+3	; 0x03
     314:	28 1b       	sub	r18, r24
     316:	39 0b       	sbc	r19, r25
     318:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     31c:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
     320:	90 68       	ori	r25, 0x80	; 128
     322:	93 83       	std	Z+3, r25	; 0x03
     324:	82 83       	std	Z+2, r24	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     326:	11 82       	std	Z+1, r1	; 0x01
     328:	10 82       	st	Z, r1
     32a:	0b c0       	rjmp	.+22     	; 0x342 <pvPortMalloc+0x120>
{
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    PRIVILEGED_DATA static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;
     32c:	00 e0       	ldi	r16, 0x00	; 0
     32e:	10 e0       	ldi	r17, 0x00	; 0
     330:	08 c0       	rjmp	.+16     	; 0x342 <pvPortMalloc+0x120>
     332:	00 e0       	ldi	r16, 0x00	; 0
     334:	10 e0       	ldi	r17, 0x00	; 0
     336:	05 c0       	rjmp	.+10     	; 0x342 <pvPortMalloc+0x120>
     338:	00 e0       	ldi	r16, 0x00	; 0
     33a:	10 e0       	ldi	r17, 0x00	; 0
     33c:	02 c0       	rjmp	.+4      	; 0x342 <pvPortMalloc+0x120>
     33e:	00 e0       	ldi	r16, 0x00	; 0
     340:	10 e0       	ldi	r17, 0x00	; 0
            }
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     342:	0e 94 0c 0a 	call	0x1418	; 0x1418 <xTaskResumeAll>
        }
    }
    #endif

    return pvReturn;
}
     346:	c8 01       	movw	r24, r16
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	1f 91       	pop	r17
     34e:	0f 91       	pop	r16
     350:	ff 90       	pop	r15
     352:	ef 90       	pop	r14
     354:	08 95       	ret

00000356 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     356:	ef 92       	push	r14
     358:	ff 92       	push	r15
     35a:	0f 93       	push	r16
     35c:	1f 93       	push	r17
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     362:	00 97       	sbiw	r24, 0x00	; 0
     364:	b9 f1       	breq	.+110    	; 0x3d4 <vPortFree+0x7e>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= heapSTRUCT_SIZE;
     366:	ec 01       	movw	r28, r24
     368:	24 97       	sbiw	r28, 0x04	; 4
        pxLink = ( void * ) puc;

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
     36a:	2a 81       	ldd	r18, Y+2	; 0x02
     36c:	3b 81       	ldd	r19, Y+3	; 0x03
     36e:	33 23       	and	r19, r19
     370:	8c f5       	brge	.+98     	; 0x3d4 <vPortFree+0x7e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     372:	48 81       	ld	r20, Y
     374:	59 81       	ldd	r21, Y+1	; 0x01
     376:	45 2b       	or	r20, r21
     378:	69 f5       	brne	.+90     	; 0x3d4 <vPortFree+0x7e>
     37a:	8c 01       	movw	r16, r24
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
     37c:	3f 77       	andi	r19, 0x7F	; 127
     37e:	3b 83       	std	Y+3, r19	; 0x03
     380:	2a 83       	std	Y+2, r18	; 0x02
                {
                    ( void ) memset( puc + heapSTRUCT_SIZE, 0, pxLink->xBlockSize - heapSTRUCT_SIZE );
                }
                #endif

                vTaskSuspendAll();
     382:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     386:	2a 81       	ldd	r18, Y+2	; 0x02
     388:	3b 81       	ldd	r19, Y+3	; 0x03
     38a:	4d e9       	ldi	r20, 0x9D	; 157
     38c:	50 e0       	ldi	r21, 0x00	; 0
     38e:	01 c0       	rjmp	.+2      	; 0x392 <vPortFree+0x3c>
     390:	af 01       	movw	r20, r30
     392:	da 01       	movw	r26, r20
     394:	ed 91       	ld	r30, X+
     396:	fc 91       	ld	r31, X
     398:	82 81       	ldd	r24, Z+2	; 0x02
     39a:	93 81       	ldd	r25, Z+3	; 0x03
     39c:	82 17       	cp	r24, r18
     39e:	93 07       	cpc	r25, r19
     3a0:	b8 f3       	brcs	.-18     	; 0x390 <vPortFree+0x3a>
     3a2:	c8 01       	movw	r24, r16
     3a4:	04 97       	sbiw	r24, 0x04	; 4
     3a6:	dc 01       	movw	r26, r24
     3a8:	11 96       	adiw	r26, 0x01	; 1
     3aa:	fc 93       	st	X, r31
     3ac:	ee 93       	st	-X, r30
     3ae:	fa 01       	movw	r30, r20
     3b0:	d1 83       	std	Z+1, r29	; 0x01
     3b2:	c0 83       	st	Z, r28
                    xFreeBytesRemaining += pxLink->xBlockSize;
     3b4:	12 96       	adiw	r26, 0x02	; 2
     3b6:	8d 91       	ld	r24, X+
     3b8:	9c 91       	ld	r25, X
     3ba:	13 97       	sbiw	r26, 0x03	; 3
     3bc:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     3c0:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     3c4:	82 0f       	add	r24, r18
     3c6:	93 1f       	adc	r25, r19
     3c8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     3cc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
                    traceFREE( pv, pxLink->xBlockSize );
                }
                ( void ) xTaskResumeAll();
     3d0:	0e 94 0c 0a 	call	0x1418	; 0x1418 <xTaskResumeAll>
            }
        }
    }
}
     3d4:	df 91       	pop	r29
     3d6:	cf 91       	pop	r28
     3d8:	1f 91       	pop	r17
     3da:	0f 91       	pop	r16
     3dc:	ff 90       	pop	r15
     3de:	ef 90       	pop	r14
     3e0:	08 95       	ret

000003e2 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     3e2:	fc 01       	movw	r30, r24
     3e4:	03 96       	adiw	r24, 0x03	; 3
     3e6:	92 83       	std	Z+2, r25	; 0x02
     3e8:	81 83       	std	Z+1, r24	; 0x01
     3ea:	2f ef       	ldi	r18, 0xFF	; 255
     3ec:	3f ef       	ldi	r19, 0xFF	; 255
     3ee:	34 83       	std	Z+4, r19	; 0x04
     3f0:	23 83       	std	Z+3, r18	; 0x03
     3f2:	96 83       	std	Z+6, r25	; 0x06
     3f4:	85 83       	std	Z+5, r24	; 0x05
     3f6:	90 87       	std	Z+8, r25	; 0x08
     3f8:	87 83       	std	Z+7, r24	; 0x07
     3fa:	10 82       	st	Z, r1
     3fc:	08 95       	ret

000003fe <vListInitialiseItem>:
     3fe:	fc 01       	movw	r30, r24
     400:	11 86       	std	Z+9, r1	; 0x09
     402:	10 86       	std	Z+8, r1	; 0x08
     404:	08 95       	ret

00000406 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     40c:	48 81       	ld	r20, Y
     40e:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     410:	4f 3f       	cpi	r20, 0xFF	; 255
     412:	2f ef       	ldi	r18, 0xFF	; 255
     414:	52 07       	cpc	r21, r18
     416:	21 f4       	brne	.+8      	; 0x420 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     418:	fc 01       	movw	r30, r24
     41a:	a7 81       	ldd	r26, Z+7	; 0x07
     41c:	b0 85       	ldd	r27, Z+8	; 0x08
     41e:	0d c0       	rjmp	.+26     	; 0x43a <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     420:	dc 01       	movw	r26, r24
     422:	13 96       	adiw	r26, 0x03	; 3
     424:	01 c0       	rjmp	.+2      	; 0x428 <vListInsert+0x22>
     426:	df 01       	movw	r26, r30
     428:	12 96       	adiw	r26, 0x02	; 2
     42a:	ed 91       	ld	r30, X+
     42c:	fc 91       	ld	r31, X
     42e:	13 97       	sbiw	r26, 0x03	; 3
     430:	20 81       	ld	r18, Z
     432:	31 81       	ldd	r19, Z+1	; 0x01
     434:	42 17       	cp	r20, r18
     436:	53 07       	cpc	r21, r19
     438:	b0 f7       	brcc	.-20     	; 0x426 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     43a:	12 96       	adiw	r26, 0x02	; 2
     43c:	ed 91       	ld	r30, X+
     43e:	fc 91       	ld	r31, X
     440:	13 97       	sbiw	r26, 0x03	; 3
     442:	fb 83       	std	Y+3, r31	; 0x03
     444:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     446:	d5 83       	std	Z+5, r29	; 0x05
     448:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     44a:	bd 83       	std	Y+5, r27	; 0x05
     44c:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     44e:	13 96       	adiw	r26, 0x03	; 3
     450:	dc 93       	st	X, r29
     452:	ce 93       	st	-X, r28
     454:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     456:	99 87       	std	Y+9, r25	; 0x09
     458:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     45a:	fc 01       	movw	r30, r24
     45c:	20 81       	ld	r18, Z
     45e:	2f 5f       	subi	r18, 0xFF	; 255
     460:	20 83       	st	Z, r18
}
     462:	df 91       	pop	r29
     464:	cf 91       	pop	r28
     466:	08 95       	ret

00000468 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     468:	cf 93       	push	r28
     46a:	df 93       	push	r29
     46c:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     46e:	a0 85       	ldd	r26, Z+8	; 0x08
     470:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     472:	c2 81       	ldd	r28, Z+2	; 0x02
     474:	d3 81       	ldd	r29, Z+3	; 0x03
     476:	84 81       	ldd	r24, Z+4	; 0x04
     478:	95 81       	ldd	r25, Z+5	; 0x05
     47a:	9d 83       	std	Y+5, r25	; 0x05
     47c:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     47e:	c4 81       	ldd	r28, Z+4	; 0x04
     480:	d5 81       	ldd	r29, Z+5	; 0x05
     482:	82 81       	ldd	r24, Z+2	; 0x02
     484:	93 81       	ldd	r25, Z+3	; 0x03
     486:	9b 83       	std	Y+3, r25	; 0x03
     488:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     48a:	11 96       	adiw	r26, 0x01	; 1
     48c:	8d 91       	ld	r24, X+
     48e:	9c 91       	ld	r25, X
     490:	12 97       	sbiw	r26, 0x02	; 2
     492:	e8 17       	cp	r30, r24
     494:	f9 07       	cpc	r31, r25
     496:	31 f4       	brne	.+12     	; 0x4a4 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     498:	84 81       	ldd	r24, Z+4	; 0x04
     49a:	95 81       	ldd	r25, Z+5	; 0x05
     49c:	12 96       	adiw	r26, 0x02	; 2
     49e:	9c 93       	st	X, r25
     4a0:	8e 93       	st	-X, r24
     4a2:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     4a4:	11 86       	std	Z+9, r1	; 0x09
     4a6:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     4a8:	8c 91       	ld	r24, X
     4aa:	81 50       	subi	r24, 0x01	; 1
     4ac:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     4ae:	8c 91       	ld	r24, X
}
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	08 95       	ret

000004b6 <LCD_1>:
void LCD_1(void *PV)
{

	while(1)
	{
		if (xSemaphoreTake( xBinarySemaphore_1, 100 ) == pdTRUE)
     4b6:	64 e6       	ldi	r22, 0x64	; 100
     4b8:	70 e0       	ldi	r23, 0x00	; 0
     4ba:	80 91 81 06 	lds	r24, 0x0681	; 0x800681 <xBinarySemaphore_1>
     4be:	90 91 82 06 	lds	r25, 0x0682	; 0x800682 <xBinarySemaphore_1+0x1>
     4c2:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xQueueSemaphoreTake>
     4c6:	81 30       	cpi	r24, 0x01	; 1
     4c8:	b1 f7       	brne	.-20     	; 0x4b6 <LCD_1>
		{
			CLCD_voidClearDisplay();
     4ca:	0e 94 bc 00 	call	0x178	; 0x178 <CLCD_voidClearDisplay>
			CLCD_voidSendString("TASK 1 is On ");
     4ce:	8b e6       	ldi	r24, 0x6B	; 107
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	0e 94 a0 00 	call	0x140	; 0x140 <CLCD_voidSendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4d6:	2f ef       	ldi	r18, 0xFF	; 255
     4d8:	83 ed       	ldi	r24, 0xD3	; 211
     4da:	90 e3       	ldi	r25, 0x30	; 48
     4dc:	21 50       	subi	r18, 0x01	; 1
     4de:	80 40       	sbci	r24, 0x00	; 0
     4e0:	90 40       	sbci	r25, 0x00	; 0
     4e2:	e1 f7       	brne	.-8      	; 0x4dc <LCD_1+0x26>
     4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <LCD_1+0x30>
     4e6:	00 00       	nop
			_delay_ms(2000);
			xSemaphoreGive(xBinarySemaphore_1); // release the semphare
     4e8:	20 e0       	ldi	r18, 0x00	; 0
     4ea:	40 e0       	ldi	r20, 0x00	; 0
     4ec:	50 e0       	ldi	r21, 0x00	; 0
     4ee:	60 e0       	ldi	r22, 0x00	; 0
     4f0:	70 e0       	ldi	r23, 0x00	; 0
     4f2:	80 91 81 06 	lds	r24, 0x0681	; 0x800681 <xBinarySemaphore_1>
     4f6:	90 91 82 06 	lds	r25, 0x0682	; 0x800682 <xBinarySemaphore_1+0x1>
     4fa:	0e 94 9d 05 	call	0xb3a	; 0xb3a <xQueueGenericSend>
			vTaskDelay(1000);
     4fe:	88 ee       	ldi	r24, 0xE8	; 232
     500:	93 e0       	ldi	r25, 0x03	; 3
     502:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <vTaskDelay>
     506:	d7 cf       	rjmp	.-82     	; 0x4b6 <LCD_1>

00000508 <LCD_2>:
void LCD_2(void *PV)
{

	while(1)
	{
		if (xSemaphoreTake( xBinarySemaphore_1, 100 ) == pdTRUE)
     508:	64 e6       	ldi	r22, 0x64	; 100
     50a:	70 e0       	ldi	r23, 0x00	; 0
     50c:	80 91 81 06 	lds	r24, 0x0681	; 0x800681 <xBinarySemaphore_1>
     510:	90 91 82 06 	lds	r25, 0x0682	; 0x800682 <xBinarySemaphore_1+0x1>
     514:	0e 94 2f 06 	call	0xc5e	; 0xc5e <xQueueSemaphoreTake>
     518:	81 30       	cpi	r24, 0x01	; 1
     51a:	b1 f7       	brne	.-20     	; 0x508 <LCD_2>
		{
			CLCD_voidClearDisplay();
     51c:	0e 94 bc 00 	call	0x178	; 0x178 <CLCD_voidClearDisplay>
			CLCD_voidSendString("TASK 2 is On ");
     520:	89 e7       	ldi	r24, 0x79	; 121
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	0e 94 a0 00 	call	0x140	; 0x140 <CLCD_voidSendString>
     528:	2f ef       	ldi	r18, 0xFF	; 255
     52a:	83 ed       	ldi	r24, 0xD3	; 211
     52c:	90 e3       	ldi	r25, 0x30	; 48
     52e:	21 50       	subi	r18, 0x01	; 1
     530:	80 40       	sbci	r24, 0x00	; 0
     532:	90 40       	sbci	r25, 0x00	; 0
     534:	e1 f7       	brne	.-8      	; 0x52e <LCD_2+0x26>
     536:	00 c0       	rjmp	.+0      	; 0x538 <LCD_2+0x30>
     538:	00 00       	nop
			_delay_ms(2000);
			xSemaphoreGive(xBinarySemaphore_1); // release the semaphore
     53a:	20 e0       	ldi	r18, 0x00	; 0
     53c:	40 e0       	ldi	r20, 0x00	; 0
     53e:	50 e0       	ldi	r21, 0x00	; 0
     540:	60 e0       	ldi	r22, 0x00	; 0
     542:	70 e0       	ldi	r23, 0x00	; 0
     544:	80 91 81 06 	lds	r24, 0x0681	; 0x800681 <xBinarySemaphore_1>
     548:	90 91 82 06 	lds	r25, 0x0682	; 0x800682 <xBinarySemaphore_1+0x1>
     54c:	0e 94 9d 05 	call	0xb3a	; 0xb3a <xQueueGenericSend>
			vTaskDelay(500);
     550:	84 ef       	ldi	r24, 0xF4	; 244
     552:	91 e0       	ldi	r25, 0x01	; 1
     554:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <vTaskDelay>
     558:	d7 cf       	rjmp	.-82     	; 0x508 <LCD_2>

0000055a <main>:
void LCD_1(void *PV);
void LCD_2(void *PV);

int main(void)
{
	PORT_voidInit();
     55a:	0e 94 46 04 	call	0x88c	; 0x88c <PORT_voidInit>
	CLCD_voidInit();
     55e:	0e 94 6b 00 	call	0xd6	; 0xd6 <CLCD_voidInit>
	CLCD_voidSetCursor(1,0);
     562:	60 e0       	ldi	r22, 0x00	; 0
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	0e 94 b3 00 	call	0x166	; 0x166 <CLCD_voidSetCursor>

	
	xBinarySemaphore_1 =xSemaphoreCreateBinary( );
     56a:	43 e0       	ldi	r20, 0x03	; 3
     56c:	60 e0       	ldi	r22, 0x00	; 0
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	0e 94 5c 05 	call	0xab8	; 0xab8 <xQueueGenericCreate>
     574:	90 93 82 06 	sts	0x0682, r25	; 0x800682 <xBinarySemaphore_1+0x1>
     578:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <xBinarySemaphore_1>
	
	xSemaphoreGive( xBinarySemaphore_1 );
     57c:	20 e0       	ldi	r18, 0x00	; 0
     57e:	40 e0       	ldi	r20, 0x00	; 0
     580:	50 e0       	ldi	r21, 0x00	; 0
     582:	60 e0       	ldi	r22, 0x00	; 0
     584:	70 e0       	ldi	r23, 0x00	; 0
     586:	0e 94 9d 05 	call	0xb3a	; 0xb3a <xQueueGenericSend>

	

	xTaskCreate(LCD_1,"LCD_1",100,NULL,1,&Task1Handler);
     58a:	0f 2e       	mov	r0, r31
     58c:	ff e7       	ldi	r31, 0x7F	; 127
     58e:	ef 2e       	mov	r14, r31
     590:	f6 e0       	ldi	r31, 0x06	; 6
     592:	ff 2e       	mov	r15, r31
     594:	f0 2d       	mov	r31, r0
     596:	01 e0       	ldi	r16, 0x01	; 1
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	44 e6       	ldi	r20, 0x64	; 100
     59e:	50 e0       	ldi	r21, 0x00	; 0
     5a0:	67 e8       	ldi	r22, 0x87	; 135
     5a2:	70 e0       	ldi	r23, 0x00	; 0
     5a4:	8b e5       	ldi	r24, 0x5B	; 91
     5a6:	92 e0       	ldi	r25, 0x02	; 2
     5a8:	0e 94 67 08 	call	0x10ce	; 0x10ce <xTaskCreate>
	xTaskCreate(LCD_2,"LCD_2",100,NULL,0,&Task2Handler);
     5ac:	0f 2e       	mov	r0, r31
     5ae:	fd e7       	ldi	r31, 0x7D	; 125
     5b0:	ef 2e       	mov	r14, r31
     5b2:	f6 e0       	ldi	r31, 0x06	; 6
     5b4:	ff 2e       	mov	r15, r31
     5b6:	f0 2d       	mov	r31, r0
     5b8:	00 e0       	ldi	r16, 0x00	; 0
     5ba:	20 e0       	ldi	r18, 0x00	; 0
     5bc:	30 e0       	ldi	r19, 0x00	; 0
     5be:	44 e6       	ldi	r20, 0x64	; 100
     5c0:	50 e0       	ldi	r21, 0x00	; 0
     5c2:	6d e8       	ldi	r22, 0x8D	; 141
     5c4:	70 e0       	ldi	r23, 0x00	; 0
     5c6:	84 e8       	ldi	r24, 0x84	; 132
     5c8:	92 e0       	ldi	r25, 0x02	; 2
     5ca:	0e 94 67 08 	call	0x10ce	; 0x10ce <xTaskCreate>
	/*start OS*/
	vTaskStartScheduler();
     5ce:	0e 94 c0 08 	call	0x1180	; 0x1180 <vTaskStartScheduler>
     5d2:	ff cf       	rjmp	.-2      	; 0x5d2 <main+0x78>

000005d4 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     5d4:	1b bc       	out	0x2b, r1	; 43
     5d6:	8c e7       	ldi	r24, 0x7C	; 124
     5d8:	8a bd       	out	0x2a, r24	; 42
     5da:	8b e0       	ldi	r24, 0x0B	; 11
     5dc:	8e bd       	out	0x2e, r24	; 46
     5de:	89 b7       	in	r24, 0x39	; 57
     5e0:	80 61       	ori	r24, 0x10	; 16
     5e2:	89 bf       	out	0x39, r24	; 57
     5e4:	08 95       	ret

000005e6 <pxPortInitialiseStack>:
     5e6:	31 e1       	ldi	r19, 0x11	; 17
     5e8:	fc 01       	movw	r30, r24
     5ea:	30 83       	st	Z, r19
     5ec:	31 97       	sbiw	r30, 0x01	; 1
     5ee:	22 e2       	ldi	r18, 0x22	; 34
     5f0:	20 83       	st	Z, r18
     5f2:	31 97       	sbiw	r30, 0x01	; 1
     5f4:	a3 e3       	ldi	r26, 0x33	; 51
     5f6:	a0 83       	st	Z, r26
     5f8:	31 97       	sbiw	r30, 0x01	; 1
     5fa:	60 83       	st	Z, r22
     5fc:	31 97       	sbiw	r30, 0x01	; 1
     5fe:	70 83       	st	Z, r23
     600:	31 97       	sbiw	r30, 0x01	; 1
     602:	10 82       	st	Z, r1
     604:	31 97       	sbiw	r30, 0x01	; 1
     606:	60 e8       	ldi	r22, 0x80	; 128
     608:	60 83       	st	Z, r22
     60a:	31 97       	sbiw	r30, 0x01	; 1
     60c:	10 82       	st	Z, r1
     60e:	31 97       	sbiw	r30, 0x01	; 1
     610:	62 e0       	ldi	r22, 0x02	; 2
     612:	60 83       	st	Z, r22
     614:	31 97       	sbiw	r30, 0x01	; 1
     616:	63 e0       	ldi	r22, 0x03	; 3
     618:	60 83       	st	Z, r22
     61a:	31 97       	sbiw	r30, 0x01	; 1
     61c:	64 e0       	ldi	r22, 0x04	; 4
     61e:	60 83       	st	Z, r22
     620:	31 97       	sbiw	r30, 0x01	; 1
     622:	65 e0       	ldi	r22, 0x05	; 5
     624:	60 83       	st	Z, r22
     626:	31 97       	sbiw	r30, 0x01	; 1
     628:	66 e0       	ldi	r22, 0x06	; 6
     62a:	60 83       	st	Z, r22
     62c:	31 97       	sbiw	r30, 0x01	; 1
     62e:	67 e0       	ldi	r22, 0x07	; 7
     630:	60 83       	st	Z, r22
     632:	31 97       	sbiw	r30, 0x01	; 1
     634:	68 e0       	ldi	r22, 0x08	; 8
     636:	60 83       	st	Z, r22
     638:	31 97       	sbiw	r30, 0x01	; 1
     63a:	69 e0       	ldi	r22, 0x09	; 9
     63c:	60 83       	st	Z, r22
     63e:	31 97       	sbiw	r30, 0x01	; 1
     640:	60 e1       	ldi	r22, 0x10	; 16
     642:	60 83       	st	Z, r22
     644:	31 97       	sbiw	r30, 0x01	; 1
     646:	30 83       	st	Z, r19
     648:	31 97       	sbiw	r30, 0x01	; 1
     64a:	32 e1       	ldi	r19, 0x12	; 18
     64c:	30 83       	st	Z, r19
     64e:	31 97       	sbiw	r30, 0x01	; 1
     650:	33 e1       	ldi	r19, 0x13	; 19
     652:	30 83       	st	Z, r19
     654:	31 97       	sbiw	r30, 0x01	; 1
     656:	34 e1       	ldi	r19, 0x14	; 20
     658:	30 83       	st	Z, r19
     65a:	31 97       	sbiw	r30, 0x01	; 1
     65c:	35 e1       	ldi	r19, 0x15	; 21
     65e:	30 83       	st	Z, r19
     660:	31 97       	sbiw	r30, 0x01	; 1
     662:	36 e1       	ldi	r19, 0x16	; 22
     664:	30 83       	st	Z, r19
     666:	31 97       	sbiw	r30, 0x01	; 1
     668:	37 e1       	ldi	r19, 0x17	; 23
     66a:	30 83       	st	Z, r19
     66c:	31 97       	sbiw	r30, 0x01	; 1
     66e:	38 e1       	ldi	r19, 0x18	; 24
     670:	30 83       	st	Z, r19
     672:	31 97       	sbiw	r30, 0x01	; 1
     674:	39 e1       	ldi	r19, 0x19	; 25
     676:	30 83       	st	Z, r19
     678:	31 97       	sbiw	r30, 0x01	; 1
     67a:	30 e2       	ldi	r19, 0x20	; 32
     67c:	30 83       	st	Z, r19
     67e:	31 97       	sbiw	r30, 0x01	; 1
     680:	31 e2       	ldi	r19, 0x21	; 33
     682:	30 83       	st	Z, r19
     684:	31 97       	sbiw	r30, 0x01	; 1
     686:	20 83       	st	Z, r18
     688:	31 97       	sbiw	r30, 0x01	; 1
     68a:	23 e2       	ldi	r18, 0x23	; 35
     68c:	20 83       	st	Z, r18
     68e:	31 97       	sbiw	r30, 0x01	; 1
     690:	40 83       	st	Z, r20
     692:	31 97       	sbiw	r30, 0x01	; 1
     694:	50 83       	st	Z, r21
     696:	31 97       	sbiw	r30, 0x01	; 1
     698:	26 e2       	ldi	r18, 0x26	; 38
     69a:	20 83       	st	Z, r18
     69c:	31 97       	sbiw	r30, 0x01	; 1
     69e:	27 e2       	ldi	r18, 0x27	; 39
     6a0:	20 83       	st	Z, r18
     6a2:	31 97       	sbiw	r30, 0x01	; 1
     6a4:	28 e2       	ldi	r18, 0x28	; 40
     6a6:	20 83       	st	Z, r18
     6a8:	31 97       	sbiw	r30, 0x01	; 1
     6aa:	29 e2       	ldi	r18, 0x29	; 41
     6ac:	20 83       	st	Z, r18
     6ae:	31 97       	sbiw	r30, 0x01	; 1
     6b0:	20 e3       	ldi	r18, 0x30	; 48
     6b2:	20 83       	st	Z, r18
     6b4:	31 97       	sbiw	r30, 0x01	; 1
     6b6:	21 e3       	ldi	r18, 0x31	; 49
     6b8:	20 83       	st	Z, r18
     6ba:	86 97       	sbiw	r24, 0x26	; 38
     6bc:	08 95       	ret

000006be <xPortStartScheduler>:
     6be:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <prvSetupTimerInterrupt>
     6c2:	a0 91 df 06 	lds	r26, 0x06DF	; 0x8006df <pxCurrentTCB>
     6c6:	b0 91 e0 06 	lds	r27, 0x06E0	; 0x8006e0 <pxCurrentTCB+0x1>
     6ca:	cd 91       	ld	r28, X+
     6cc:	cd bf       	out	0x3d, r28	; 61
     6ce:	dd 91       	ld	r29, X+
     6d0:	de bf       	out	0x3e, r29	; 62
     6d2:	ff 91       	pop	r31
     6d4:	ef 91       	pop	r30
     6d6:	df 91       	pop	r29
     6d8:	cf 91       	pop	r28
     6da:	bf 91       	pop	r27
     6dc:	af 91       	pop	r26
     6de:	9f 91       	pop	r25
     6e0:	8f 91       	pop	r24
     6e2:	7f 91       	pop	r23
     6e4:	6f 91       	pop	r22
     6e6:	5f 91       	pop	r21
     6e8:	4f 91       	pop	r20
     6ea:	3f 91       	pop	r19
     6ec:	2f 91       	pop	r18
     6ee:	1f 91       	pop	r17
     6f0:	0f 91       	pop	r16
     6f2:	ff 90       	pop	r15
     6f4:	ef 90       	pop	r14
     6f6:	df 90       	pop	r13
     6f8:	cf 90       	pop	r12
     6fa:	bf 90       	pop	r11
     6fc:	af 90       	pop	r10
     6fe:	9f 90       	pop	r9
     700:	8f 90       	pop	r8
     702:	7f 90       	pop	r7
     704:	6f 90       	pop	r6
     706:	5f 90       	pop	r5
     708:	4f 90       	pop	r4
     70a:	3f 90       	pop	r3
     70c:	2f 90       	pop	r2
     70e:	1f 90       	pop	r1
     710:	0f 90       	pop	r0
     712:	0f be       	out	0x3f, r0	; 63
     714:	0f 90       	pop	r0
     716:	08 95       	ret
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	08 95       	ret

0000071c <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     71c:	0f 92       	push	r0
     71e:	0f b6       	in	r0, 0x3f	; 63
     720:	f8 94       	cli
     722:	0f 92       	push	r0
     724:	1f 92       	push	r1
     726:	11 24       	eor	r1, r1
     728:	2f 92       	push	r2
     72a:	3f 92       	push	r3
     72c:	4f 92       	push	r4
     72e:	5f 92       	push	r5
     730:	6f 92       	push	r6
     732:	7f 92       	push	r7
     734:	8f 92       	push	r8
     736:	9f 92       	push	r9
     738:	af 92       	push	r10
     73a:	bf 92       	push	r11
     73c:	cf 92       	push	r12
     73e:	df 92       	push	r13
     740:	ef 92       	push	r14
     742:	ff 92       	push	r15
     744:	0f 93       	push	r16
     746:	1f 93       	push	r17
     748:	2f 93       	push	r18
     74a:	3f 93       	push	r19
     74c:	4f 93       	push	r20
     74e:	5f 93       	push	r21
     750:	6f 93       	push	r22
     752:	7f 93       	push	r23
     754:	8f 93       	push	r24
     756:	9f 93       	push	r25
     758:	af 93       	push	r26
     75a:	bf 93       	push	r27
     75c:	cf 93       	push	r28
     75e:	df 93       	push	r29
     760:	ef 93       	push	r30
     762:	ff 93       	push	r31
     764:	a0 91 df 06 	lds	r26, 0x06DF	; 0x8006df <pxCurrentTCB>
     768:	b0 91 e0 06 	lds	r27, 0x06E0	; 0x8006e0 <pxCurrentTCB+0x1>
     76c:	0d b6       	in	r0, 0x3d	; 61
     76e:	0d 92       	st	X+, r0
     770:	0e b6       	in	r0, 0x3e	; 62
     772:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     774:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     778:	a0 91 df 06 	lds	r26, 0x06DF	; 0x8006df <pxCurrentTCB>
     77c:	b0 91 e0 06 	lds	r27, 0x06E0	; 0x8006e0 <pxCurrentTCB+0x1>
     780:	cd 91       	ld	r28, X+
     782:	cd bf       	out	0x3d, r28	; 61
     784:	dd 91       	ld	r29, X+
     786:	de bf       	out	0x3e, r29	; 62
     788:	ff 91       	pop	r31
     78a:	ef 91       	pop	r30
     78c:	df 91       	pop	r29
     78e:	cf 91       	pop	r28
     790:	bf 91       	pop	r27
     792:	af 91       	pop	r26
     794:	9f 91       	pop	r25
     796:	8f 91       	pop	r24
     798:	7f 91       	pop	r23
     79a:	6f 91       	pop	r22
     79c:	5f 91       	pop	r21
     79e:	4f 91       	pop	r20
     7a0:	3f 91       	pop	r19
     7a2:	2f 91       	pop	r18
     7a4:	1f 91       	pop	r17
     7a6:	0f 91       	pop	r16
     7a8:	ff 90       	pop	r15
     7aa:	ef 90       	pop	r14
     7ac:	df 90       	pop	r13
     7ae:	cf 90       	pop	r12
     7b0:	bf 90       	pop	r11
     7b2:	af 90       	pop	r10
     7b4:	9f 90       	pop	r9
     7b6:	8f 90       	pop	r8
     7b8:	7f 90       	pop	r7
     7ba:	6f 90       	pop	r6
     7bc:	5f 90       	pop	r5
     7be:	4f 90       	pop	r4
     7c0:	3f 90       	pop	r3
     7c2:	2f 90       	pop	r2
     7c4:	1f 90       	pop	r1
     7c6:	0f 90       	pop	r0
     7c8:	0f be       	out	0x3f, r0	; 63
     7ca:	0f 90       	pop	r0

	asm volatile ( "ret" );
     7cc:	08 95       	ret

000007ce <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     7ce:	0f 92       	push	r0
     7d0:	0f b6       	in	r0, 0x3f	; 63
     7d2:	f8 94       	cli
     7d4:	0f 92       	push	r0
     7d6:	1f 92       	push	r1
     7d8:	11 24       	eor	r1, r1
     7da:	2f 92       	push	r2
     7dc:	3f 92       	push	r3
     7de:	4f 92       	push	r4
     7e0:	5f 92       	push	r5
     7e2:	6f 92       	push	r6
     7e4:	7f 92       	push	r7
     7e6:	8f 92       	push	r8
     7e8:	9f 92       	push	r9
     7ea:	af 92       	push	r10
     7ec:	bf 92       	push	r11
     7ee:	cf 92       	push	r12
     7f0:	df 92       	push	r13
     7f2:	ef 92       	push	r14
     7f4:	ff 92       	push	r15
     7f6:	0f 93       	push	r16
     7f8:	1f 93       	push	r17
     7fa:	2f 93       	push	r18
     7fc:	3f 93       	push	r19
     7fe:	4f 93       	push	r20
     800:	5f 93       	push	r21
     802:	6f 93       	push	r22
     804:	7f 93       	push	r23
     806:	8f 93       	push	r24
     808:	9f 93       	push	r25
     80a:	af 93       	push	r26
     80c:	bf 93       	push	r27
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	ef 93       	push	r30
     814:	ff 93       	push	r31
     816:	a0 91 df 06 	lds	r26, 0x06DF	; 0x8006df <pxCurrentTCB>
     81a:	b0 91 e0 06 	lds	r27, 0x06E0	; 0x8006e0 <pxCurrentTCB+0x1>
     81e:	0d b6       	in	r0, 0x3d	; 61
     820:	0d 92       	st	X+, r0
     822:	0e b6       	in	r0, 0x3e	; 62
     824:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     826:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <xTaskIncrementTick>
     82a:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     82c:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     830:	a0 91 df 06 	lds	r26, 0x06DF	; 0x8006df <pxCurrentTCB>
     834:	b0 91 e0 06 	lds	r27, 0x06E0	; 0x8006e0 <pxCurrentTCB+0x1>
     838:	cd 91       	ld	r28, X+
     83a:	cd bf       	out	0x3d, r28	; 61
     83c:	dd 91       	ld	r29, X+
     83e:	de bf       	out	0x3e, r29	; 62
     840:	ff 91       	pop	r31
     842:	ef 91       	pop	r30
     844:	df 91       	pop	r29
     846:	cf 91       	pop	r28
     848:	bf 91       	pop	r27
     84a:	af 91       	pop	r26
     84c:	9f 91       	pop	r25
     84e:	8f 91       	pop	r24
     850:	7f 91       	pop	r23
     852:	6f 91       	pop	r22
     854:	5f 91       	pop	r21
     856:	4f 91       	pop	r20
     858:	3f 91       	pop	r19
     85a:	2f 91       	pop	r18
     85c:	1f 91       	pop	r17
     85e:	0f 91       	pop	r16
     860:	ff 90       	pop	r15
     862:	ef 90       	pop	r14
     864:	df 90       	pop	r13
     866:	cf 90       	pop	r12
     868:	bf 90       	pop	r11
     86a:	af 90       	pop	r10
     86c:	9f 90       	pop	r9
     86e:	8f 90       	pop	r8
     870:	7f 90       	pop	r7
     872:	6f 90       	pop	r6
     874:	5f 90       	pop	r5
     876:	4f 90       	pop	r4
     878:	3f 90       	pop	r3
     87a:	2f 90       	pop	r2
     87c:	1f 90       	pop	r1
     87e:	0f 90       	pop	r0
     880:	0f be       	out	0x3f, r0	; 63
     882:	0f 90       	pop	r0

	asm volatile ( "ret" );
     884:	08 95       	ret

00000886 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     886:	0e 94 e7 03 	call	0x7ce	; 0x7ce <vPortYieldFromTick>
		asm volatile ( "reti" );
     88a:	18 95       	reti

0000088c <PORT_voidInit>:
#include"PORT_private.h"
#include"PORT_interface.h"

void PORT_voidInit(void)
{
	DDRA=PORTA_DIR;
     88c:	8f ef       	ldi	r24, 0xFF	; 255
     88e:	8a bb       	out	0x1a, r24	; 26
    DDRB=PORTB_DIR;
     890:	9f e7       	ldi	r25, 0x7F	; 127
     892:	97 bb       	out	0x17, r25	; 23
    DDRC=PORTC_DIR;
     894:	84 bb       	out	0x14, r24	; 20
    DDRD=PORTD_DIR;
     896:	11 ba       	out	0x11, r1	; 17
	
	PORTA=PORTA_INITVAL ;
     898:	1b ba       	out	0x1b, r1	; 27
    PORTB=PORTB_INITVAL	;
     89a:	18 ba       	out	0x18, r1	; 24
    PORTC=PORTC_INITVAL	;
     89c:	15 ba       	out	0x15, r1	; 21
    PORTD=PORTD_INITVAL	;
     89e:	12 ba       	out	0x12, r1	; 18
     8a0:	08 95       	ret

000008a2 <prvIsQueueEmpty>:
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
     8a2:	0f b6       	in	r0, 0x3f	; 63
     8a4:	f8 94       	cli
     8a6:	0f 92       	push	r0
     8a8:	fc 01       	movw	r30, r24
     8aa:	82 8d       	ldd	r24, Z+26	; 0x1a
     8ac:	81 11       	cpse	r24, r1
     8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <prvIsQueueEmpty+0x12>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	01 c0       	rjmp	.+2      	; 0x8b6 <prvIsQueueEmpty+0x14>
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	0f 90       	pop	r0
     8b8:	0f be       	out	0x3f, r0	; 63
     8ba:	08 95       	ret

000008bc <prvIsQueueFull>:
     8bc:	0f b6       	in	r0, 0x3f	; 63
     8be:	f8 94       	cli
     8c0:	0f 92       	push	r0
     8c2:	fc 01       	movw	r30, r24
     8c4:	22 8d       	ldd	r18, Z+26	; 0x1a
     8c6:	83 8d       	ldd	r24, Z+27	; 0x1b
     8c8:	28 13       	cpse	r18, r24
     8ca:	02 c0       	rjmp	.+4      	; 0x8d0 <prvIsQueueFull+0x14>
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	01 c0       	rjmp	.+2      	; 0x8d2 <prvIsQueueFull+0x16>
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	0f 90       	pop	r0
     8d4:	0f be       	out	0x3f, r0	; 63
     8d6:	08 95       	ret

000008d8 <prvCopyDataToQueue>:
     8d8:	0f 93       	push	r16
     8da:	1f 93       	push	r17
     8dc:	cf 93       	push	r28
     8de:	df 93       	push	r29
     8e0:	ec 01       	movw	r28, r24
     8e2:	04 2f       	mov	r16, r20
     8e4:	1a 8d       	ldd	r17, Y+26	; 0x1a
     8e6:	4c 8d       	ldd	r20, Y+28	; 0x1c
     8e8:	44 23       	and	r20, r20
     8ea:	b9 f1       	breq	.+110    	; 0x95a <prvCopyDataToQueue+0x82>
     8ec:	01 11       	cpse	r16, r1
     8ee:	16 c0       	rjmp	.+44     	; 0x91c <prvCopyDataToQueue+0x44>
     8f0:	50 e0       	ldi	r21, 0x00	; 0
     8f2:	8a 81       	ldd	r24, Y+2	; 0x02
     8f4:	9b 81       	ldd	r25, Y+3	; 0x03
     8f6:	0e 94 6f 0c 	call	0x18de	; 0x18de <memcpy>
     8fa:	2c 8d       	ldd	r18, Y+28	; 0x1c
     8fc:	8a 81       	ldd	r24, Y+2	; 0x02
     8fe:	9b 81       	ldd	r25, Y+3	; 0x03
     900:	82 0f       	add	r24, r18
     902:	91 1d       	adc	r25, r1
     904:	9b 83       	std	Y+3, r25	; 0x03
     906:	8a 83       	std	Y+2, r24	; 0x02
     908:	2c 81       	ldd	r18, Y+4	; 0x04
     90a:	3d 81       	ldd	r19, Y+5	; 0x05
     90c:	82 17       	cp	r24, r18
     90e:	93 07       	cpc	r25, r19
     910:	20 f1       	brcs	.+72     	; 0x95a <prvCopyDataToQueue+0x82>
     912:	88 81       	ld	r24, Y
     914:	99 81       	ldd	r25, Y+1	; 0x01
     916:	9b 83       	std	Y+3, r25	; 0x03
     918:	8a 83       	std	Y+2, r24	; 0x02
     91a:	1f c0       	rjmp	.+62     	; 0x95a <prvCopyDataToQueue+0x82>
     91c:	50 e0       	ldi	r21, 0x00	; 0
     91e:	8e 81       	ldd	r24, Y+6	; 0x06
     920:	9f 81       	ldd	r25, Y+7	; 0x07
     922:	0e 94 6f 0c 	call	0x18de	; 0x18de <memcpy>
     926:	8c 8d       	ldd	r24, Y+28	; 0x1c
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	91 95       	neg	r25
     92c:	81 95       	neg	r24
     92e:	91 09       	sbc	r25, r1
     930:	2e 81       	ldd	r18, Y+6	; 0x06
     932:	3f 81       	ldd	r19, Y+7	; 0x07
     934:	28 0f       	add	r18, r24
     936:	39 1f       	adc	r19, r25
     938:	3f 83       	std	Y+7, r19	; 0x07
     93a:	2e 83       	std	Y+6, r18	; 0x06
     93c:	48 81       	ld	r20, Y
     93e:	59 81       	ldd	r21, Y+1	; 0x01
     940:	24 17       	cp	r18, r20
     942:	35 07       	cpc	r19, r21
     944:	30 f4       	brcc	.+12     	; 0x952 <prvCopyDataToQueue+0x7a>
     946:	2c 81       	ldd	r18, Y+4	; 0x04
     948:	3d 81       	ldd	r19, Y+5	; 0x05
     94a:	82 0f       	add	r24, r18
     94c:	93 1f       	adc	r25, r19
     94e:	9f 83       	std	Y+7, r25	; 0x07
     950:	8e 83       	std	Y+6, r24	; 0x06
     952:	02 30       	cpi	r16, 0x02	; 2
     954:	11 f4       	brne	.+4      	; 0x95a <prvCopyDataToQueue+0x82>
     956:	11 11       	cpse	r17, r1
     958:	11 50       	subi	r17, 0x01	; 1
     95a:	1f 5f       	subi	r17, 0xFF	; 255
     95c:	1a 8f       	std	Y+26, r17	; 0x1a
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	df 91       	pop	r29
     962:	cf 91       	pop	r28
     964:	1f 91       	pop	r17
     966:	0f 91       	pop	r16
     968:	08 95       	ret

0000096a <prvUnlockQueue>:
     96a:	1f 93       	push	r17
     96c:	cf 93       	push	r28
     96e:	df 93       	push	r29
     970:	ec 01       	movw	r28, r24
     972:	0f b6       	in	r0, 0x3f	; 63
     974:	f8 94       	cli
     976:	0f 92       	push	r0
     978:	1e 8d       	ldd	r17, Y+30	; 0x1e
     97a:	0b c0       	rjmp	.+22     	; 0x992 <prvUnlockQueue+0x28>
     97c:	89 89       	ldd	r24, Y+17	; 0x11
     97e:	88 23       	and	r24, r24
     980:	51 f0       	breq	.+20     	; 0x996 <prvUnlockQueue+0x2c>
     982:	ce 01       	movw	r24, r28
     984:	41 96       	adiw	r24, 0x11	; 17
     986:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <xTaskRemoveFromEventList>
     98a:	81 11       	cpse	r24, r1
     98c:	0e 94 57 0c 	call	0x18ae	; 0x18ae <vTaskMissedYield>
     990:	11 50       	subi	r17, 0x01	; 1
     992:	11 16       	cp	r1, r17
     994:	9c f3       	brlt	.-26     	; 0x97c <prvUnlockQueue+0x12>
     996:	8f ef       	ldi	r24, 0xFF	; 255
     998:	8e 8f       	std	Y+30, r24	; 0x1e
     99a:	0f 90       	pop	r0
     99c:	0f be       	out	0x3f, r0	; 63
     99e:	0f b6       	in	r0, 0x3f	; 63
     9a0:	f8 94       	cli
     9a2:	0f 92       	push	r0
     9a4:	1d 8d       	ldd	r17, Y+29	; 0x1d
     9a6:	0b c0       	rjmp	.+22     	; 0x9be <prvUnlockQueue+0x54>
     9a8:	88 85       	ldd	r24, Y+8	; 0x08
     9aa:	88 23       	and	r24, r24
     9ac:	51 f0       	breq	.+20     	; 0x9c2 <prvUnlockQueue+0x58>
     9ae:	ce 01       	movw	r24, r28
     9b0:	08 96       	adiw	r24, 0x08	; 8
     9b2:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <xTaskRemoveFromEventList>
     9b6:	81 11       	cpse	r24, r1
     9b8:	0e 94 57 0c 	call	0x18ae	; 0x18ae <vTaskMissedYield>
     9bc:	11 50       	subi	r17, 0x01	; 1
     9be:	11 16       	cp	r1, r17
     9c0:	9c f3       	brlt	.-26     	; 0x9a8 <prvUnlockQueue+0x3e>
     9c2:	8f ef       	ldi	r24, 0xFF	; 255
     9c4:	8d 8f       	std	Y+29, r24	; 0x1d
     9c6:	0f 90       	pop	r0
     9c8:	0f be       	out	0x3f, r0	; 63
     9ca:	df 91       	pop	r29
     9cc:	cf 91       	pop	r28
     9ce:	1f 91       	pop	r17
     9d0:	08 95       	ret

000009d2 <xQueueGenericReset>:
     9d2:	0f 93       	push	r16
     9d4:	1f 93       	push	r17
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29
     9da:	fc 01       	movw	r30, r24
     9dc:	36 2f       	mov	r19, r22
     9de:	89 2b       	or	r24, r25
     9e0:	09 f4       	brne	.+2      	; 0x9e4 <xQueueGenericReset+0x12>
     9e2:	4d c0       	rjmp	.+154    	; 0xa7e <xQueueGenericReset+0xac>
     9e4:	23 8d       	ldd	r18, Z+27	; 0x1b
     9e6:	22 23       	and	r18, r18
     9e8:	09 f4       	brne	.+2      	; 0x9ec <xQueueGenericReset+0x1a>
     9ea:	4b c0       	rjmp	.+150    	; 0xa82 <xQueueGenericReset+0xb0>
     9ec:	02 2f       	mov	r16, r18
     9ee:	10 e0       	ldi	r17, 0x00	; 0
     9f0:	8f ef       	ldi	r24, 0xFF	; 255
     9f2:	9f ef       	ldi	r25, 0xFF	; 255
     9f4:	b8 01       	movw	r22, r16
     9f6:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__udivmodhi4>
     9fa:	44 8d       	ldd	r20, Z+28	; 0x1c
     9fc:	84 2f       	mov	r24, r20
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	68 17       	cp	r22, r24
     a02:	79 07       	cpc	r23, r25
     a04:	08 f4       	brcc	.+2      	; 0xa08 <xQueueGenericReset+0x36>
     a06:	3f c0       	rjmp	.+126    	; 0xa86 <xQueueGenericReset+0xb4>
     a08:	ef 01       	movw	r28, r30
     a0a:	0f b6       	in	r0, 0x3f	; 63
     a0c:	f8 94       	cli
     a0e:	0f 92       	push	r0
     a10:	60 81       	ld	r22, Z
     a12:	71 81       	ldd	r23, Z+1	; 0x01
     a14:	fb 01       	movw	r30, r22
     a16:	24 9f       	mul	r18, r20
     a18:	e0 0d       	add	r30, r0
     a1a:	f1 1d       	adc	r31, r1
     a1c:	11 24       	eor	r1, r1
     a1e:	fd 83       	std	Y+5, r31	; 0x05
     a20:	ec 83       	std	Y+4, r30	; 0x04
     a22:	1a 8e       	std	Y+26, r1	; 0x1a
     a24:	7b 83       	std	Y+3, r23	; 0x03
     a26:	6a 83       	std	Y+2, r22	; 0x02
     a28:	01 50       	subi	r16, 0x01	; 1
     a2a:	11 09       	sbc	r17, r1
     a2c:	80 9f       	mul	r24, r16
     a2e:	a0 01       	movw	r20, r0
     a30:	81 9f       	mul	r24, r17
     a32:	50 0d       	add	r21, r0
     a34:	90 9f       	mul	r25, r16
     a36:	50 0d       	add	r21, r0
     a38:	11 24       	eor	r1, r1
     a3a:	cb 01       	movw	r24, r22
     a3c:	84 0f       	add	r24, r20
     a3e:	95 1f       	adc	r25, r21
     a40:	9f 83       	std	Y+7, r25	; 0x07
     a42:	8e 83       	std	Y+6, r24	; 0x06
     a44:	8f ef       	ldi	r24, 0xFF	; 255
     a46:	8d 8f       	std	Y+29, r24	; 0x1d
     a48:	8e 8f       	std	Y+30, r24	; 0x1e
     a4a:	31 11       	cpse	r19, r1
     a4c:	0c c0       	rjmp	.+24     	; 0xa66 <xQueueGenericReset+0x94>
     a4e:	88 85       	ldd	r24, Y+8	; 0x08
     a50:	88 23       	and	r24, r24
     a52:	89 f0       	breq	.+34     	; 0xa76 <xQueueGenericReset+0xa4>
     a54:	ce 01       	movw	r24, r28
     a56:	08 96       	adiw	r24, 0x08	; 8
     a58:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <xTaskRemoveFromEventList>
     a5c:	88 23       	and	r24, r24
     a5e:	59 f0       	breq	.+22     	; 0xa76 <xQueueGenericReset+0xa4>
     a60:	0e 94 8e 03 	call	0x71c	; 0x71c <vPortYield>
     a64:	08 c0       	rjmp	.+16     	; 0xa76 <xQueueGenericReset+0xa4>
     a66:	ce 01       	movw	r24, r28
     a68:	08 96       	adiw	r24, 0x08	; 8
     a6a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <vListInitialise>
     a6e:	ce 01       	movw	r24, r28
     a70:	41 96       	adiw	r24, 0x11	; 17
     a72:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <vListInitialise>
     a76:	0f 90       	pop	r0
     a78:	0f be       	out	0x3f, r0	; 63
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	05 c0       	rjmp	.+10     	; 0xa88 <xQueueGenericReset+0xb6>
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	03 c0       	rjmp	.+6      	; 0xa88 <xQueueGenericReset+0xb6>
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	01 c0       	rjmp	.+2      	; 0xa88 <xQueueGenericReset+0xb6>
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	1f 91       	pop	r17
     a8e:	0f 91       	pop	r16
     a90:	08 95       	ret

00000a92 <prvInitialiseNewQueue>:
     a92:	0f 93       	push	r16
     a94:	1f 93       	push	r17
     a96:	f8 01       	movw	r30, r16
     a98:	61 11       	cpse	r22, r1
     a9a:	03 c0       	rjmp	.+6      	; 0xaa2 <prvInitialiseNewQueue+0x10>
     a9c:	11 83       	std	Z+1, r17	; 0x01
     a9e:	00 83       	st	Z, r16
     aa0:	02 c0       	rjmp	.+4      	; 0xaa6 <prvInitialiseNewQueue+0x14>
     aa2:	51 83       	std	Z+1, r21	; 0x01
     aa4:	40 83       	st	Z, r20
     aa6:	83 8f       	std	Z+27, r24	; 0x1b
     aa8:	64 8f       	std	Z+28, r22	; 0x1c
     aaa:	61 e0       	ldi	r22, 0x01	; 1
     aac:	cf 01       	movw	r24, r30
     aae:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <xQueueGenericReset>
     ab2:	1f 91       	pop	r17
     ab4:	0f 91       	pop	r16
     ab6:	08 95       	ret

00000ab8 <xQueueGenericCreate>:
     ab8:	df 92       	push	r13
     aba:	ef 92       	push	r14
     abc:	ff 92       	push	r15
     abe:	0f 93       	push	r16
     ac0:	1f 93       	push	r17
     ac2:	cf 93       	push	r28
     ac4:	df 93       	push	r29
     ac6:	38 2f       	mov	r19, r24
     ac8:	e6 2f       	mov	r30, r22
     aca:	88 23       	and	r24, r24
     acc:	29 f1       	breq	.+74     	; 0xb18 <xQueueGenericCreate+0x60>
     ace:	68 2f       	mov	r22, r24
     ad0:	70 e0       	ldi	r23, 0x00	; 0
     ad2:	8f ef       	ldi	r24, 0xFF	; 255
     ad4:	9f ef       	ldi	r25, 0xFF	; 255
     ad6:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <__udivmodhi4>
     ada:	8e 2f       	mov	r24, r30
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	68 17       	cp	r22, r24
     ae0:	79 07       	cpc	r23, r25
     ae2:	e8 f0       	brcs	.+58     	; 0xb1e <xQueueGenericCreate+0x66>
     ae4:	3e 9f       	mul	r19, r30
     ae6:	c0 01       	movw	r24, r0
     ae8:	11 24       	eor	r1, r1
     aea:	81 3e       	cpi	r24, 0xE1	; 225
     aec:	2f ef       	ldi	r18, 0xFF	; 255
     aee:	92 07       	cpc	r25, r18
     af0:	c8 f4       	brcc	.+50     	; 0xb24 <xQueueGenericCreate+0x6c>
     af2:	d4 2e       	mov	r13, r20
     af4:	de 2f       	mov	r29, r30
     af6:	c3 2f       	mov	r28, r19
     af8:	4f 96       	adiw	r24, 0x1f	; 31
     afa:	0e 94 11 01 	call	0x222	; 0x222 <pvPortMalloc>
     afe:	7c 01       	movw	r14, r24
     b00:	00 97       	sbiw	r24, 0x00	; 0
     b02:	91 f0       	breq	.+36     	; 0xb28 <xQueueGenericCreate+0x70>
     b04:	8c 01       	movw	r16, r24
     b06:	2d 2d       	mov	r18, r13
     b08:	ac 01       	movw	r20, r24
     b0a:	41 5e       	subi	r20, 0xE1	; 225
     b0c:	5f 4f       	sbci	r21, 0xFF	; 255
     b0e:	6d 2f       	mov	r22, r29
     b10:	8c 2f       	mov	r24, r28
     b12:	0e 94 49 05 	call	0xa92	; 0xa92 <prvInitialiseNewQueue>
     b16:	08 c0       	rjmp	.+16     	; 0xb28 <xQueueGenericCreate+0x70>
     b18:	e1 2c       	mov	r14, r1
     b1a:	f1 2c       	mov	r15, r1
     b1c:	05 c0       	rjmp	.+10     	; 0xb28 <xQueueGenericCreate+0x70>
     b1e:	e1 2c       	mov	r14, r1
     b20:	f1 2c       	mov	r15, r1
     b22:	02 c0       	rjmp	.+4      	; 0xb28 <xQueueGenericCreate+0x70>
     b24:	e1 2c       	mov	r14, r1
     b26:	f1 2c       	mov	r15, r1
     b28:	c7 01       	movw	r24, r14
     b2a:	df 91       	pop	r29
     b2c:	cf 91       	pop	r28
     b2e:	1f 91       	pop	r17
     b30:	0f 91       	pop	r16
     b32:	ff 90       	pop	r15
     b34:	ef 90       	pop	r14
     b36:	df 90       	pop	r13
     b38:	08 95       	ret

00000b3a <xQueueGenericSend>:
     b3a:	cf 92       	push	r12
     b3c:	df 92       	push	r13
     b3e:	ef 92       	push	r14
     b40:	ff 92       	push	r15
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <xQueueGenericSend+0x12>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <xQueueGenericSend+0x14>
     b4e:	1f 92       	push	r1
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	8c 01       	movw	r16, r24
     b56:	7b 01       	movw	r14, r22
     b58:	5d 83       	std	Y+5, r21	; 0x05
     b5a:	4c 83       	std	Y+4, r20	; 0x04
     b5c:	c2 2e       	mov	r12, r18
     b5e:	d1 2c       	mov	r13, r1
     b60:	0f b6       	in	r0, 0x3f	; 63
     b62:	f8 94       	cli
     b64:	0f 92       	push	r0
     b66:	f8 01       	movw	r30, r16
     b68:	92 8d       	ldd	r25, Z+26	; 0x1a
     b6a:	83 8d       	ldd	r24, Z+27	; 0x1b
     b6c:	98 17       	cp	r25, r24
     b6e:	18 f0       	brcs	.+6      	; 0xb76 <xQueueGenericSend+0x3c>
     b70:	f2 e0       	ldi	r31, 0x02	; 2
     b72:	cf 12       	cpse	r12, r31
     b74:	19 c0       	rjmp	.+50     	; 0xba8 <xQueueGenericSend+0x6e>
     b76:	4c 2d       	mov	r20, r12
     b78:	b7 01       	movw	r22, r14
     b7a:	c8 01       	movw	r24, r16
     b7c:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <prvCopyDataToQueue>
     b80:	f8 01       	movw	r30, r16
     b82:	91 89       	ldd	r25, Z+17	; 0x11
     b84:	99 23       	and	r25, r25
     b86:	49 f0       	breq	.+18     	; 0xb9a <xQueueGenericSend+0x60>
     b88:	c8 01       	movw	r24, r16
     b8a:	41 96       	adiw	r24, 0x11	; 17
     b8c:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <xTaskRemoveFromEventList>
     b90:	88 23       	and	r24, r24
     b92:	31 f0       	breq	.+12     	; 0xba0 <xQueueGenericSend+0x66>
     b94:	0e 94 8e 03 	call	0x71c	; 0x71c <vPortYield>
     b98:	03 c0       	rjmp	.+6      	; 0xba0 <xQueueGenericSend+0x66>
     b9a:	81 11       	cpse	r24, r1
     b9c:	0e 94 8e 03 	call	0x71c	; 0x71c <vPortYield>
     ba0:	0f 90       	pop	r0
     ba2:	0f be       	out	0x3f, r0	; 63
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	4d c0       	rjmp	.+154    	; 0xc42 <xQueueGenericSend+0x108>
     ba8:	8c 81       	ldd	r24, Y+4	; 0x04
     baa:	9d 81       	ldd	r25, Y+5	; 0x05
     bac:	89 2b       	or	r24, r25
     bae:	21 f4       	brne	.+8      	; 0xbb8 <xQueueGenericSend+0x7e>
     bb0:	0f 90       	pop	r0
     bb2:	0f be       	out	0x3f, r0	; 63
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	45 c0       	rjmp	.+138    	; 0xc42 <xQueueGenericSend+0x108>
     bb8:	d1 10       	cpse	r13, r1
     bba:	06 c0       	rjmp	.+12     	; 0xbc8 <xQueueGenericSend+0x8e>
     bbc:	ce 01       	movw	r24, r28
     bbe:	01 96       	adiw	r24, 0x01	; 1
     bc0:	0e 94 1a 0c 	call	0x1834	; 0x1834 <vTaskInternalSetTimeOutState>
     bc4:	dd 24       	eor	r13, r13
     bc6:	d3 94       	inc	r13
     bc8:	0f 90       	pop	r0
     bca:	0f be       	out	0x3f, r0	; 63
     bcc:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <vTaskSuspendAll>
     bd0:	0f b6       	in	r0, 0x3f	; 63
     bd2:	f8 94       	cli
     bd4:	0f 92       	push	r0
     bd6:	f8 01       	movw	r30, r16
     bd8:	85 8d       	ldd	r24, Z+29	; 0x1d
     bda:	8f 3f       	cpi	r24, 0xFF	; 255
     bdc:	09 f4       	brne	.+2      	; 0xbe0 <xQueueGenericSend+0xa6>
     bde:	15 8e       	std	Z+29, r1	; 0x1d
     be0:	f8 01       	movw	r30, r16
     be2:	86 8d       	ldd	r24, Z+30	; 0x1e
     be4:	8f 3f       	cpi	r24, 0xFF	; 255
     be6:	09 f4       	brne	.+2      	; 0xbea <xQueueGenericSend+0xb0>
     be8:	16 8e       	std	Z+30, r1	; 0x1e
     bea:	0f 90       	pop	r0
     bec:	0f be       	out	0x3f, r0	; 63
     bee:	be 01       	movw	r22, r28
     bf0:	6c 5f       	subi	r22, 0xFC	; 252
     bf2:	7f 4f       	sbci	r23, 0xFF	; 255
     bf4:	ce 01       	movw	r24, r28
     bf6:	01 96       	adiw	r24, 0x01	; 1
     bf8:	0e 94 25 0c 	call	0x184a	; 0x184a <xTaskCheckForTimeOut>
     bfc:	81 11       	cpse	r24, r1
     bfe:	1b c0       	rjmp	.+54     	; 0xc36 <xQueueGenericSend+0xfc>
     c00:	c8 01       	movw	r24, r16
     c02:	0e 94 5e 04 	call	0x8bc	; 0x8bc <prvIsQueueFull>
     c06:	88 23       	and	r24, r24
     c08:	81 f0       	breq	.+32     	; 0xc2a <xQueueGenericSend+0xf0>
     c0a:	6c 81       	ldd	r22, Y+4	; 0x04
     c0c:	7d 81       	ldd	r23, Y+5	; 0x05
     c0e:	c8 01       	movw	r24, r16
     c10:	08 96       	adiw	r24, 0x08	; 8
     c12:	0e 94 4b 0b 	call	0x1696	; 0x1696 <vTaskPlaceOnEventList>
     c16:	c8 01       	movw	r24, r16
     c18:	0e 94 b5 04 	call	0x96a	; 0x96a <prvUnlockQueue>
     c1c:	0e 94 0c 0a 	call	0x1418	; 0x1418 <xTaskResumeAll>
     c20:	81 11       	cpse	r24, r1
     c22:	9e cf       	rjmp	.-196    	; 0xb60 <xQueueGenericSend+0x26>
     c24:	0e 94 8e 03 	call	0x71c	; 0x71c <vPortYield>
     c28:	9b cf       	rjmp	.-202    	; 0xb60 <xQueueGenericSend+0x26>
     c2a:	c8 01       	movw	r24, r16
     c2c:	0e 94 b5 04 	call	0x96a	; 0x96a <prvUnlockQueue>
     c30:	0e 94 0c 0a 	call	0x1418	; 0x1418 <xTaskResumeAll>
     c34:	95 cf       	rjmp	.-214    	; 0xb60 <xQueueGenericSend+0x26>
     c36:	c8 01       	movw	r24, r16
     c38:	0e 94 b5 04 	call	0x96a	; 0x96a <prvUnlockQueue>
     c3c:	0e 94 0c 0a 	call	0x1418	; 0x1418 <xTaskResumeAll>
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
     c4c:	df 91       	pop	r29
     c4e:	cf 91       	pop	r28
     c50:	1f 91       	pop	r17
     c52:	0f 91       	pop	r16
     c54:	ff 90       	pop	r15
     c56:	ef 90       	pop	r14
     c58:	df 90       	pop	r13
     c5a:	cf 90       	pop	r12
     c5c:	08 95       	ret

00000c5e <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
     c5e:	ff 92       	push	r15
     c60:	0f 93       	push	r16
     c62:	1f 93       	push	r17
     c64:	cf 93       	push	r28
     c66:	df 93       	push	r29
     c68:	00 d0       	rcall	.+0      	; 0xc6a <xQueueSemaphoreTake+0xc>
     c6a:	00 d0       	rcall	.+0      	; 0xc6c <xQueueSemaphoreTake+0xe>
     c6c:	1f 92       	push	r1
     c6e:	cd b7       	in	r28, 0x3d	; 61
     c70:	de b7       	in	r29, 0x3e	; 62
     c72:	8c 01       	movw	r16, r24
     c74:	7d 83       	std	Y+5, r23	; 0x05
     c76:	6c 83       	std	Y+4, r22	; 0x04
    BaseType_t xEntryTimeSet = pdFALSE;
     c78:	f1 2c       	mov	r15, r1
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
     c7a:	0f b6       	in	r0, 0x3f	; 63
     c7c:	f8 94       	cli
     c7e:	0f 92       	push	r0
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
     c80:	f8 01       	movw	r30, r16
     c82:	82 8d       	ldd	r24, Z+26	; 0x1a

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
     c84:	88 23       	and	r24, r24
     c86:	81 f0       	breq	.+32     	; 0xca8 <xQueueSemaphoreTake+0x4a>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
     c88:	81 50       	subi	r24, 0x01	; 1
     c8a:	82 8f       	std	Z+26, r24	; 0x1a
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     c8c:	80 85       	ldd	r24, Z+8	; 0x08
     c8e:	88 23       	and	r24, r24
     c90:	39 f0       	breq	.+14     	; 0xca0 <xQueueSemaphoreTake+0x42>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     c92:	c8 01       	movw	r24, r16
     c94:	08 96       	adiw	r24, 0x08	; 8
     c96:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <xTaskRemoveFromEventList>
     c9a:	81 11       	cpse	r24, r1
                    {
                        queueYIELD_IF_USING_PREEMPTION();
     c9c:	0e 94 8e 03 	call	0x71c	; 0x71c <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
     ca0:	0f 90       	pop	r0
     ca2:	0f be       	out	0x3f, r0	; 63
                return pdPASS;
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	53 c0       	rjmp	.+166    	; 0xd4e <xQueueSemaphoreTake+0xf0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
     ca8:	8c 81       	ldd	r24, Y+4	; 0x04
     caa:	9d 81       	ldd	r25, Y+5	; 0x05
     cac:	89 2b       	or	r24, r25
     cae:	21 f4       	brne	.+8      	; 0xcb8 <xQueueSemaphoreTake+0x5a>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
     cb0:	0f 90       	pop	r0
     cb2:	0f be       	out	0x3f, r0	; 63
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	4b c0       	rjmp	.+150    	; 0xd4e <xQueueSemaphoreTake+0xf0>
                }
                else if( xEntryTimeSet == pdFALSE )
     cb8:	f1 10       	cpse	r15, r1
     cba:	06 c0       	rjmp	.+12     	; 0xcc8 <xQueueSemaphoreTake+0x6a>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
     cbc:	ce 01       	movw	r24, r28
     cbe:	01 96       	adiw	r24, 0x01	; 1
     cc0:	0e 94 1a 0c 	call	0x1834	; 0x1834 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
     cc4:	ff 24       	eor	r15, r15
     cc6:	f3 94       	inc	r15
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
     cc8:	0f 90       	pop	r0
     cca:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
     ccc:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	f8 94       	cli
     cd4:	0f 92       	push	r0
     cd6:	f8 01       	movw	r30, r16
     cd8:	85 8d       	ldd	r24, Z+29	; 0x1d
     cda:	8f 3f       	cpi	r24, 0xFF	; 255
     cdc:	09 f4       	brne	.+2      	; 0xce0 <xQueueSemaphoreTake+0x82>
     cde:	15 8e       	std	Z+29, r1	; 0x1d
     ce0:	f8 01       	movw	r30, r16
     ce2:	86 8d       	ldd	r24, Z+30	; 0x1e
     ce4:	8f 3f       	cpi	r24, 0xFF	; 255
     ce6:	09 f4       	brne	.+2      	; 0xcea <xQueueSemaphoreTake+0x8c>
     ce8:	16 8e       	std	Z+30, r1	; 0x1e
     cea:	0f 90       	pop	r0
     cec:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     cee:	be 01       	movw	r22, r28
     cf0:	6c 5f       	subi	r22, 0xFC	; 252
     cf2:	7f 4f       	sbci	r23, 0xFF	; 255
     cf4:	ce 01       	movw	r24, r28
     cf6:	01 96       	adiw	r24, 0x01	; 1
     cf8:	0e 94 25 0c 	call	0x184a	; 0x184a <xTaskCheckForTimeOut>
     cfc:	81 11       	cpse	r24, r1
     cfe:	1b c0       	rjmp	.+54     	; 0xd36 <xQueueSemaphoreTake+0xd8>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     d00:	c8 01       	movw	r24, r16
     d02:	0e 94 51 04 	call	0x8a2	; 0x8a2 <prvIsQueueEmpty>
     d06:	88 23       	and	r24, r24
     d08:	81 f0       	breq	.+32     	; 0xd2a <xQueueSemaphoreTake+0xcc>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     d0a:	6c 81       	ldd	r22, Y+4	; 0x04
     d0c:	7d 81       	ldd	r23, Y+5	; 0x05
     d0e:	c8 01       	movw	r24, r16
     d10:	41 96       	adiw	r24, 0x11	; 17
     d12:	0e 94 4b 0b 	call	0x1696	; 0x1696 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
     d16:	c8 01       	movw	r24, r16
     d18:	0e 94 b5 04 	call	0x96a	; 0x96a <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
     d1c:	0e 94 0c 0a 	call	0x1418	; 0x1418 <xTaskResumeAll>
     d20:	81 11       	cpse	r24, r1
     d22:	ab cf       	rjmp	.-170    	; 0xc7a <xQueueSemaphoreTake+0x1c>
                {
                    portYIELD_WITHIN_API();
     d24:	0e 94 8e 03 	call	0x71c	; 0x71c <vPortYield>
     d28:	a8 cf       	rjmp	.-176    	; 0xc7a <xQueueSemaphoreTake+0x1c>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
     d2a:	c8 01       	movw	r24, r16
     d2c:	0e 94 b5 04 	call	0x96a	; 0x96a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
     d30:	0e 94 0c 0a 	call	0x1418	; 0x1418 <xTaskResumeAll>
     d34:	a2 cf       	rjmp	.-188    	; 0xc7a <xQueueSemaphoreTake+0x1c>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
     d36:	c8 01       	movw	r24, r16
     d38:	0e 94 b5 04 	call	0x96a	; 0x96a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
     d3c:	0e 94 0c 0a 	call	0x1418	; 0x1418 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     d40:	c8 01       	movw	r24, r16
     d42:	0e 94 51 04 	call	0x8a2	; 0x8a2 <prvIsQueueEmpty>
     d46:	88 23       	and	r24, r24
     d48:	09 f4       	brne	.+2      	; 0xd4c <xQueueSemaphoreTake+0xee>
     d4a:	97 cf       	rjmp	.-210    	; 0xc7a <xQueueSemaphoreTake+0x1c>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
     d4c:	80 e0       	ldi	r24, 0x00	; 0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
     d4e:	0f 90       	pop	r0
     d50:	0f 90       	pop	r0
     d52:	0f 90       	pop	r0
     d54:	0f 90       	pop	r0
     d56:	0f 90       	pop	r0
     d58:	df 91       	pop	r29
     d5a:	cf 91       	pop	r28
     d5c:	1f 91       	pop	r17
     d5e:	0f 91       	pop	r16
     d60:	ff 90       	pop	r15
     d62:	08 95       	ret

00000d64 <prvResetNextTaskUnblockTime>:
    taskENTER_CRITICAL();
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
        pxTimeOut->xTimeOnEntering = xTickCount;
    }
    taskEXIT_CRITICAL();
     d64:	e0 91 a7 06 	lds	r30, 0x06A7	; 0x8006a7 <pxDelayedTaskList>
     d68:	f0 91 a8 06 	lds	r31, 0x06A8	; 0x8006a8 <pxDelayedTaskList+0x1>
     d6c:	80 81       	ld	r24, Z
     d6e:	81 11       	cpse	r24, r1
     d70:	07 c0       	rjmp	.+14     	; 0xd80 <prvResetNextTaskUnblockTime+0x1c>
     d72:	8f ef       	ldi	r24, 0xFF	; 255
     d74:	9f ef       	ldi	r25, 0xFF	; 255
     d76:	90 93 87 06 	sts	0x0687, r25	; 0x800687 <xNextTaskUnblockTime+0x1>
     d7a:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <xNextTaskUnblockTime>
     d7e:	08 95       	ret
     d80:	e0 91 a7 06 	lds	r30, 0x06A7	; 0x8006a7 <pxDelayedTaskList>
     d84:	f0 91 a8 06 	lds	r31, 0x06A8	; 0x8006a8 <pxDelayedTaskList+0x1>
     d88:	05 80       	ldd	r0, Z+5	; 0x05
     d8a:	f6 81       	ldd	r31, Z+6	; 0x06
     d8c:	e0 2d       	mov	r30, r0
     d8e:	80 81       	ld	r24, Z
     d90:	91 81       	ldd	r25, Z+1	; 0x01
     d92:	90 93 87 06 	sts	0x0687, r25	; 0x800687 <xNextTaskUnblockTime+0x1>
     d96:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <xNextTaskUnblockTime>
     d9a:	08 95       	ret

00000d9c <prvDeleteTCB>:
     d9c:	cf 93       	push	r28
     d9e:	df 93       	push	r29
     da0:	ec 01       	movw	r28, r24
     da2:	8f 89       	ldd	r24, Y+23	; 0x17
     da4:	98 8d       	ldd	r25, Y+24	; 0x18
     da6:	0e 94 ab 01 	call	0x356	; 0x356 <vPortFree>
     daa:	ce 01       	movw	r24, r28
     dac:	0e 94 ab 01 	call	0x356	; 0x356 <vPortFree>
     db0:	df 91       	pop	r29
     db2:	cf 91       	pop	r28
     db4:	08 95       	ret

00000db6 <prvInitialiseNewTask>:
     db6:	6f 92       	push	r6
     db8:	7f 92       	push	r7
     dba:	8f 92       	push	r8
     dbc:	9f 92       	push	r9
     dbe:	af 92       	push	r10
     dc0:	bf 92       	push	r11
     dc2:	cf 92       	push	r12
     dc4:	df 92       	push	r13
     dc6:	ef 92       	push	r14
     dc8:	0f 93       	push	r16
     dca:	1f 93       	push	r17
     dcc:	cf 93       	push	r28
     dce:	df 93       	push	r29
     dd0:	cd b7       	in	r28, 0x3d	; 61
     dd2:	de b7       	in	r29, 0x3e	; 62
     dd4:	4c 01       	movw	r8, r24
     dd6:	f5 01       	movw	r30, r10
     dd8:	87 89       	ldd	r24, Z+23	; 0x17
     dda:	90 8d       	ldd	r25, Z+24	; 0x18
     ddc:	21 50       	subi	r18, 0x01	; 1
     dde:	31 09       	sbc	r19, r1
     de0:	3c 01       	movw	r6, r24
     de2:	62 0e       	add	r6, r18
     de4:	73 1e       	adc	r7, r19
     de6:	61 15       	cp	r22, r1
     de8:	71 05       	cpc	r23, r1
     dea:	89 f4       	brne	.+34     	; 0xe0e <prvInitialiseNewTask+0x58>
     dec:	15 c0       	rjmp	.+42     	; 0xe18 <prvInitialiseNewTask+0x62>
     dee:	82 2f       	mov	r24, r18
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	fb 01       	movw	r30, r22
     df4:	e8 0f       	add	r30, r24
     df6:	f9 1f       	adc	r31, r25
     df8:	30 81       	ld	r19, Z
     dfa:	d5 01       	movw	r26, r10
     dfc:	a8 0f       	add	r26, r24
     dfe:	b9 1f       	adc	r27, r25
     e00:	59 96       	adiw	r26, 0x19	; 25
     e02:	3c 93       	st	X, r19
     e04:	80 81       	ld	r24, Z
     e06:	88 23       	and	r24, r24
     e08:	29 f0       	breq	.+10     	; 0xe14 <prvInitialiseNewTask+0x5e>
     e0a:	2f 5f       	subi	r18, 0xFF	; 255
     e0c:	01 c0       	rjmp	.+2      	; 0xe10 <prvInitialiseNewTask+0x5a>
     e0e:	20 e0       	ldi	r18, 0x00	; 0
     e10:	28 30       	cpi	r18, 0x08	; 8
     e12:	68 f3       	brcs	.-38     	; 0xdee <prvInitialiseNewTask+0x38>
     e14:	f5 01       	movw	r30, r10
     e16:	10 a2       	std	Z+32, r1	; 0x20
     e18:	f3 e0       	ldi	r31, 0x03	; 3
     e1a:	fe 15       	cp	r31, r14
     e1c:	20 f4       	brcc	.+8      	; 0xe26 <prvInitialiseNewTask+0x70>
     e1e:	0f 2e       	mov	r0, r31
     e20:	f3 e0       	ldi	r31, 0x03	; 3
     e22:	ef 2e       	mov	r14, r31
     e24:	f0 2d       	mov	r31, r0
     e26:	f5 01       	movw	r30, r10
     e28:	e6 8a       	std	Z+22, r14	; 0x16
     e2a:	c5 01       	movw	r24, r10
     e2c:	02 96       	adiw	r24, 0x02	; 2
     e2e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <vListInitialiseItem>
     e32:	c5 01       	movw	r24, r10
     e34:	0c 96       	adiw	r24, 0x0c	; 12
     e36:	0e 94 ff 01 	call	0x3fe	; 0x3fe <vListInitialiseItem>
     e3a:	f5 01       	movw	r30, r10
     e3c:	b1 86       	std	Z+9, r11	; 0x09
     e3e:	a0 86       	std	Z+8, r10	; 0x08
     e40:	84 e0       	ldi	r24, 0x04	; 4
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	8e 19       	sub	r24, r14
     e46:	91 09       	sbc	r25, r1
     e48:	95 87       	std	Z+13, r25	; 0x0d
     e4a:	84 87       	std	Z+12, r24	; 0x0c
     e4c:	b3 8a       	std	Z+19, r11	; 0x13
     e4e:	a2 8a       	std	Z+18, r10	; 0x12
     e50:	a8 01       	movw	r20, r16
     e52:	b4 01       	movw	r22, r8
     e54:	c3 01       	movw	r24, r6
     e56:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <pxPortInitialiseStack>
     e5a:	f5 01       	movw	r30, r10
     e5c:	91 83       	std	Z+1, r25	; 0x01
     e5e:	80 83       	st	Z, r24
     e60:	c1 14       	cp	r12, r1
     e62:	d1 04       	cpc	r13, r1
     e64:	19 f0       	breq	.+6      	; 0xe6c <prvInitialiseNewTask+0xb6>
     e66:	f6 01       	movw	r30, r12
     e68:	b1 82       	std	Z+1, r11	; 0x01
     e6a:	a0 82       	st	Z, r10
     e6c:	df 91       	pop	r29
     e6e:	cf 91       	pop	r28
     e70:	1f 91       	pop	r17
     e72:	0f 91       	pop	r16
     e74:	ef 90       	pop	r14
     e76:	df 90       	pop	r13
     e78:	cf 90       	pop	r12
     e7a:	bf 90       	pop	r11
     e7c:	af 90       	pop	r10
     e7e:	9f 90       	pop	r9
     e80:	8f 90       	pop	r8
     e82:	7f 90       	pop	r7
     e84:	6f 90       	pop	r6
     e86:	08 95       	ret

00000e88 <prvInitialiseTaskLists>:
     e88:	cf 93       	push	r28
     e8a:	c0 e0       	ldi	r28, 0x00	; 0
     e8c:	10 c0       	rjmp	.+32     	; 0xeae <prvInitialiseTaskLists+0x26>
     e8e:	8c 2f       	mov	r24, r28
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	9c 01       	movw	r18, r24
     e94:	22 0f       	add	r18, r18
     e96:	33 1f       	adc	r19, r19
     e98:	22 0f       	add	r18, r18
     e9a:	33 1f       	adc	r19, r19
     e9c:	22 0f       	add	r18, r18
     e9e:	33 1f       	adc	r19, r19
     ea0:	82 0f       	add	r24, r18
     ea2:	93 1f       	adc	r25, r19
     ea4:	85 54       	subi	r24, 0x45	; 69
     ea6:	99 4f       	sbci	r25, 0xF9	; 249
     ea8:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <vListInitialise>
     eac:	cf 5f       	subi	r28, 0xFF	; 255
     eae:	c4 30       	cpi	r28, 0x04	; 4
     eb0:	70 f3       	brcs	.-36     	; 0xe8e <prvInitialiseTaskLists+0x6>
     eb2:	82 eb       	ldi	r24, 0xB2	; 178
     eb4:	96 e0       	ldi	r25, 0x06	; 6
     eb6:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <vListInitialise>
     eba:	89 ea       	ldi	r24, 0xA9	; 169
     ebc:	96 e0       	ldi	r25, 0x06	; 6
     ebe:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <vListInitialise>
     ec2:	8c e9       	ldi	r24, 0x9C	; 156
     ec4:	96 e0       	ldi	r25, 0x06	; 6
     ec6:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <vListInitialise>
     eca:	83 e9       	ldi	r24, 0x93	; 147
     ecc:	96 e0       	ldi	r25, 0x06	; 6
     ece:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <vListInitialise>
     ed2:	82 eb       	ldi	r24, 0xB2	; 178
     ed4:	96 e0       	ldi	r25, 0x06	; 6
     ed6:	90 93 a8 06 	sts	0x06A8, r25	; 0x8006a8 <pxDelayedTaskList+0x1>
     eda:	80 93 a7 06 	sts	0x06A7, r24	; 0x8006a7 <pxDelayedTaskList>
     ede:	89 ea       	ldi	r24, 0xA9	; 169
     ee0:	96 e0       	ldi	r25, 0x06	; 6
     ee2:	90 93 a6 06 	sts	0x06A6, r25	; 0x8006a6 <pxOverflowDelayedTaskList+0x1>
     ee6:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <pxOverflowDelayedTaskList>
     eea:	cf 91       	pop	r28
     eec:	08 95       	ret

00000eee <prvAddNewTaskToReadyList>:
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
     ef2:	ec 01       	movw	r28, r24
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	0f 92       	push	r0
     efa:	80 91 91 06 	lds	r24, 0x0691	; 0x800691 <uxCurrentNumberOfTasks>
     efe:	8f 5f       	subi	r24, 0xFF	; 255
     f00:	80 93 91 06 	sts	0x0691, r24	; 0x800691 <uxCurrentNumberOfTasks>
     f04:	80 91 df 06 	lds	r24, 0x06DF	; 0x8006df <pxCurrentTCB>
     f08:	90 91 e0 06 	lds	r25, 0x06E0	; 0x8006e0 <pxCurrentTCB+0x1>
     f0c:	89 2b       	or	r24, r25
     f0e:	59 f4       	brne	.+22     	; 0xf26 <prvAddNewTaskToReadyList+0x38>
     f10:	d0 93 e0 06 	sts	0x06E0, r29	; 0x8006e0 <pxCurrentTCB+0x1>
     f14:	c0 93 df 06 	sts	0x06DF, r28	; 0x8006df <pxCurrentTCB>
     f18:	80 91 91 06 	lds	r24, 0x0691	; 0x800691 <uxCurrentNumberOfTasks>
     f1c:	81 30       	cpi	r24, 0x01	; 1
     f1e:	99 f4       	brne	.+38     	; 0xf46 <prvAddNewTaskToReadyList+0x58>
     f20:	0e 94 44 07 	call	0xe88	; 0xe88 <prvInitialiseTaskLists>
     f24:	10 c0       	rjmp	.+32     	; 0xf46 <prvAddNewTaskToReadyList+0x58>
     f26:	80 91 8d 06 	lds	r24, 0x068D	; 0x80068d <xSchedulerRunning>
     f2a:	81 11       	cpse	r24, r1
     f2c:	0c c0       	rjmp	.+24     	; 0xf46 <prvAddNewTaskToReadyList+0x58>
     f2e:	e0 91 df 06 	lds	r30, 0x06DF	; 0x8006df <pxCurrentTCB>
     f32:	f0 91 e0 06 	lds	r31, 0x06E0	; 0x8006e0 <pxCurrentTCB+0x1>
     f36:	96 89       	ldd	r25, Z+22	; 0x16
     f38:	8e 89       	ldd	r24, Y+22	; 0x16
     f3a:	89 17       	cp	r24, r25
     f3c:	20 f0       	brcs	.+8      	; 0xf46 <prvAddNewTaskToReadyList+0x58>
     f3e:	d0 93 e0 06 	sts	0x06E0, r29	; 0x8006e0 <pxCurrentTCB+0x1>
     f42:	c0 93 df 06 	sts	0x06DF, r28	; 0x8006df <pxCurrentTCB>
     f46:	80 91 88 06 	lds	r24, 0x0688	; 0x800688 <uxTaskNumber>
     f4a:	8f 5f       	subi	r24, 0xFF	; 255
     f4c:	80 93 88 06 	sts	0x0688, r24	; 0x800688 <uxTaskNumber>
     f50:	8e 89       	ldd	r24, Y+22	; 0x16
     f52:	90 91 8e 06 	lds	r25, 0x068E	; 0x80068e <uxTopReadyPriority>
     f56:	98 17       	cp	r25, r24
     f58:	10 f4       	brcc	.+4      	; 0xf5e <prvAddNewTaskToReadyList+0x70>
     f5a:	80 93 8e 06 	sts	0x068E, r24	; 0x80068e <uxTopReadyPriority>
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	fc 01       	movw	r30, r24
     f62:	ee 0f       	add	r30, r30
     f64:	ff 1f       	adc	r31, r31
     f66:	ee 0f       	add	r30, r30
     f68:	ff 1f       	adc	r31, r31
     f6a:	ee 0f       	add	r30, r30
     f6c:	ff 1f       	adc	r31, r31
     f6e:	8e 0f       	add	r24, r30
     f70:	9f 1f       	adc	r25, r31
     f72:	fc 01       	movw	r30, r24
     f74:	e5 54       	subi	r30, 0x45	; 69
     f76:	f9 4f       	sbci	r31, 0xF9	; 249
     f78:	01 80       	ldd	r0, Z+1	; 0x01
     f7a:	f2 81       	ldd	r31, Z+2	; 0x02
     f7c:	e0 2d       	mov	r30, r0
     f7e:	fd 83       	std	Y+5, r31	; 0x05
     f80:	ec 83       	std	Y+4, r30	; 0x04
     f82:	84 81       	ldd	r24, Z+4	; 0x04
     f84:	95 81       	ldd	r25, Z+5	; 0x05
     f86:	9f 83       	std	Y+7, r25	; 0x07
     f88:	8e 83       	std	Y+6, r24	; 0x06
     f8a:	a4 81       	ldd	r26, Z+4	; 0x04
     f8c:	b5 81       	ldd	r27, Z+5	; 0x05
     f8e:	ce 01       	movw	r24, r28
     f90:	02 96       	adiw	r24, 0x02	; 2
     f92:	13 96       	adiw	r26, 0x03	; 3
     f94:	9c 93       	st	X, r25
     f96:	8e 93       	st	-X, r24
     f98:	12 97       	sbiw	r26, 0x02	; 2
     f9a:	95 83       	std	Z+5, r25	; 0x05
     f9c:	84 83       	std	Z+4, r24	; 0x04
     f9e:	ee 89       	ldd	r30, Y+22	; 0x16
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	cf 01       	movw	r24, r30
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	88 0f       	add	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	e8 0f       	add	r30, r24
     fb2:	f9 1f       	adc	r31, r25
     fb4:	e5 54       	subi	r30, 0x45	; 69
     fb6:	f9 4f       	sbci	r31, 0xF9	; 249
     fb8:	fb 87       	std	Y+11, r31	; 0x0b
     fba:	ea 87       	std	Y+10, r30	; 0x0a
     fbc:	80 81       	ld	r24, Z
     fbe:	8f 5f       	subi	r24, 0xFF	; 255
     fc0:	80 83       	st	Z, r24
     fc2:	0f 90       	pop	r0
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	80 91 8d 06 	lds	r24, 0x068D	; 0x80068d <xSchedulerRunning>
     fca:	88 23       	and	r24, r24
     fcc:	51 f0       	breq	.+20     	; 0xfe2 <prvAddNewTaskToReadyList+0xf4>
     fce:	e0 91 df 06 	lds	r30, 0x06DF	; 0x8006df <pxCurrentTCB>
     fd2:	f0 91 e0 06 	lds	r31, 0x06E0	; 0x8006e0 <pxCurrentTCB+0x1>
     fd6:	96 89       	ldd	r25, Z+22	; 0x16
     fd8:	8e 89       	ldd	r24, Y+22	; 0x16
     fda:	98 17       	cp	r25, r24
     fdc:	10 f4       	brcc	.+4      	; 0xfe2 <prvAddNewTaskToReadyList+0xf4>
     fde:	0e 94 8e 03 	call	0x71c	; 0x71c <vPortYield>
     fe2:	df 91       	pop	r29
     fe4:	cf 91       	pop	r28
     fe6:	08 95       	ret

00000fe8 <prvCheckTasksWaitingTermination>:
     fe8:	cf 93       	push	r28
     fea:	df 93       	push	r29
     fec:	1c c0       	rjmp	.+56     	; 0x1026 <prvCheckTasksWaitingTermination+0x3e>
     fee:	0f b6       	in	r0, 0x3f	; 63
     ff0:	f8 94       	cli
     ff2:	0f 92       	push	r0
     ff4:	e0 91 98 06 	lds	r30, 0x0698	; 0x800698 <xTasksWaitingTermination+0x5>
     ff8:	f0 91 99 06 	lds	r31, 0x0699	; 0x800699 <xTasksWaitingTermination+0x6>
     ffc:	c6 81       	ldd	r28, Z+6	; 0x06
     ffe:	d7 81       	ldd	r29, Z+7	; 0x07
    1000:	ce 01       	movw	r24, r28
    1002:	02 96       	adiw	r24, 0x02	; 2
    1004:	0e 94 34 02 	call	0x468	; 0x468 <uxListRemove>
    1008:	80 91 91 06 	lds	r24, 0x0691	; 0x800691 <uxCurrentNumberOfTasks>
    100c:	81 50       	subi	r24, 0x01	; 1
    100e:	80 93 91 06 	sts	0x0691, r24	; 0x800691 <uxCurrentNumberOfTasks>
    1012:	80 91 92 06 	lds	r24, 0x0692	; 0x800692 <uxDeletedTasksWaitingCleanUp>
    1016:	81 50       	subi	r24, 0x01	; 1
    1018:	80 93 92 06 	sts	0x0692, r24	; 0x800692 <uxDeletedTasksWaitingCleanUp>
    101c:	0f 90       	pop	r0
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	ce 01       	movw	r24, r28
    1022:	0e 94 ce 06 	call	0xd9c	; 0xd9c <prvDeleteTCB>
    1026:	80 91 92 06 	lds	r24, 0x0692	; 0x800692 <uxDeletedTasksWaitingCleanUp>
    102a:	81 11       	cpse	r24, r1
    102c:	e0 cf       	rjmp	.-64     	; 0xfee <prvCheckTasksWaitingTermination+0x6>
    102e:	df 91       	pop	r29
    1030:	cf 91       	pop	r28
    1032:	08 95       	ret

00001034 <prvIdleTask>:
    1034:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <prvCheckTasksWaitingTermination>
    1038:	80 91 bb 06 	lds	r24, 0x06BB	; 0x8006bb <pxReadyTasksLists>
    103c:	82 30       	cpi	r24, 0x02	; 2
    103e:	d0 f3       	brcs	.-12     	; 0x1034 <prvIdleTask>
    1040:	0e 94 8e 03 	call	0x71c	; 0x71c <vPortYield>
    1044:	f7 cf       	rjmp	.-18     	; 0x1034 <prvIdleTask>

00001046 <prvAddCurrentTaskToDelayedList>:
    1046:	0f 93       	push	r16
    1048:	1f 93       	push	r17
    104a:	cf 93       	push	r28
    104c:	df 93       	push	r29
    104e:	ec 01       	movw	r28, r24
    1050:	00 91 8f 06 	lds	r16, 0x068F	; 0x80068f <xTickCount>
    1054:	10 91 90 06 	lds	r17, 0x0690	; 0x800690 <xTickCount+0x1>
    1058:	80 91 df 06 	lds	r24, 0x06DF	; 0x8006df <pxCurrentTCB>
    105c:	90 91 e0 06 	lds	r25, 0x06E0	; 0x8006e0 <pxCurrentTCB+0x1>
    1060:	02 96       	adiw	r24, 0x02	; 2
    1062:	0e 94 34 02 	call	0x468	; 0x468 <uxListRemove>
    1066:	c0 0f       	add	r28, r16
    1068:	d1 1f       	adc	r29, r17
    106a:	e0 91 df 06 	lds	r30, 0x06DF	; 0x8006df <pxCurrentTCB>
    106e:	f0 91 e0 06 	lds	r31, 0x06E0	; 0x8006e0 <pxCurrentTCB+0x1>
    1072:	d3 83       	std	Z+3, r29	; 0x03
    1074:	c2 83       	std	Z+2, r28	; 0x02
    1076:	c0 17       	cp	r28, r16
    1078:	d1 07       	cpc	r29, r17
    107a:	68 f4       	brcc	.+26     	; 0x1096 <prvAddCurrentTaskToDelayedList+0x50>
    107c:	60 91 df 06 	lds	r22, 0x06DF	; 0x8006df <pxCurrentTCB>
    1080:	70 91 e0 06 	lds	r23, 0x06E0	; 0x8006e0 <pxCurrentTCB+0x1>
    1084:	80 91 a5 06 	lds	r24, 0x06A5	; 0x8006a5 <pxOverflowDelayedTaskList>
    1088:	90 91 a6 06 	lds	r25, 0x06A6	; 0x8006a6 <pxOverflowDelayedTaskList+0x1>
    108c:	6e 5f       	subi	r22, 0xFE	; 254
    108e:	7f 4f       	sbci	r23, 0xFF	; 255
    1090:	0e 94 03 02 	call	0x406	; 0x406 <vListInsert>
    1094:	17 c0       	rjmp	.+46     	; 0x10c4 <prvAddCurrentTaskToDelayedList+0x7e>
    1096:	60 91 df 06 	lds	r22, 0x06DF	; 0x8006df <pxCurrentTCB>
    109a:	70 91 e0 06 	lds	r23, 0x06E0	; 0x8006e0 <pxCurrentTCB+0x1>
    109e:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <pxDelayedTaskList>
    10a2:	90 91 a8 06 	lds	r25, 0x06A8	; 0x8006a8 <pxDelayedTaskList+0x1>
    10a6:	6e 5f       	subi	r22, 0xFE	; 254
    10a8:	7f 4f       	sbci	r23, 0xFF	; 255
    10aa:	0e 94 03 02 	call	0x406	; 0x406 <vListInsert>
    10ae:	80 91 86 06 	lds	r24, 0x0686	; 0x800686 <xNextTaskUnblockTime>
    10b2:	90 91 87 06 	lds	r25, 0x0687	; 0x800687 <xNextTaskUnblockTime+0x1>
    10b6:	c8 17       	cp	r28, r24
    10b8:	d9 07       	cpc	r29, r25
    10ba:	20 f4       	brcc	.+8      	; 0x10c4 <prvAddCurrentTaskToDelayedList+0x7e>
    10bc:	d0 93 87 06 	sts	0x0687, r29	; 0x800687 <xNextTaskUnblockTime+0x1>
    10c0:	c0 93 86 06 	sts	0x0686, r28	; 0x800686 <xNextTaskUnblockTime>
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	1f 91       	pop	r17
    10ca:	0f 91       	pop	r16
    10cc:	08 95       	ret

000010ce <xTaskCreate>:
    10ce:	2f 92       	push	r2
    10d0:	3f 92       	push	r3
    10d2:	4f 92       	push	r4
    10d4:	5f 92       	push	r5
    10d6:	6f 92       	push	r6
    10d8:	7f 92       	push	r7
    10da:	8f 92       	push	r8
    10dc:	9f 92       	push	r9
    10de:	af 92       	push	r10
    10e0:	bf 92       	push	r11
    10e2:	cf 92       	push	r12
    10e4:	df 92       	push	r13
    10e6:	ef 92       	push	r14
    10e8:	ff 92       	push	r15
    10ea:	0f 93       	push	r16
    10ec:	1f 93       	push	r17
    10ee:	cf 93       	push	r28
    10f0:	df 93       	push	r29
    10f2:	3c 01       	movw	r6, r24
    10f4:	1b 01       	movw	r2, r22
    10f6:	5a 01       	movw	r10, r20
    10f8:	29 01       	movw	r4, r18
    10fa:	ca 01       	movw	r24, r20
    10fc:	0e 94 11 01 	call	0x222	; 0x222 <pvPortMalloc>
    1100:	6c 01       	movw	r12, r24
    1102:	89 2b       	or	r24, r25
    1104:	99 f0       	breq	.+38     	; 0x112c <xTaskCreate+0x5e>
    1106:	86 e2       	ldi	r24, 0x26	; 38
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	0e 94 11 01 	call	0x222	; 0x222 <pvPortMalloc>
    110e:	ec 01       	movw	r28, r24
    1110:	89 2b       	or	r24, r25
    1112:	41 f0       	breq	.+16     	; 0x1124 <xTaskCreate+0x56>
    1114:	86 e2       	ldi	r24, 0x26	; 38
    1116:	fe 01       	movw	r30, r28
    1118:	11 92       	st	Z+, r1
    111a:	8a 95       	dec	r24
    111c:	e9 f7       	brne	.-6      	; 0x1118 <xTaskCreate+0x4a>
    111e:	d8 8e       	std	Y+24, r13	; 0x18
    1120:	cf 8a       	std	Y+23, r12	; 0x17
    1122:	06 c0       	rjmp	.+12     	; 0x1130 <xTaskCreate+0x62>
    1124:	c6 01       	movw	r24, r12
    1126:	0e 94 ab 01 	call	0x356	; 0x356 <vPortFree>
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <xTaskCreate+0x62>
    112c:	c0 e0       	ldi	r28, 0x00	; 0
    112e:	d0 e0       	ldi	r29, 0x00	; 0
    1130:	20 97       	sbiw	r28, 0x00	; 0
    1132:	91 f0       	breq	.+36     	; 0x1158 <xTaskCreate+0x8a>
    1134:	95 01       	movw	r18, r10
    1136:	40 e0       	ldi	r20, 0x00	; 0
    1138:	50 e0       	ldi	r21, 0x00	; 0
    113a:	81 2c       	mov	r8, r1
    113c:	91 2c       	mov	r9, r1
    113e:	5e 01       	movw	r10, r28
    1140:	67 01       	movw	r12, r14
    1142:	e0 2e       	mov	r14, r16
    1144:	82 01       	movw	r16, r4
    1146:	b1 01       	movw	r22, r2
    1148:	c3 01       	movw	r24, r6
    114a:	0e 94 db 06 	call	0xdb6	; 0xdb6 <prvInitialiseNewTask>
    114e:	ce 01       	movw	r24, r28
    1150:	0e 94 77 07 	call	0xeee	; 0xeee <prvAddNewTaskToReadyList>
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	01 c0       	rjmp	.+2      	; 0x115a <xTaskCreate+0x8c>
    1158:	8f ef       	ldi	r24, 0xFF	; 255
    115a:	df 91       	pop	r29
    115c:	cf 91       	pop	r28
    115e:	1f 91       	pop	r17
    1160:	0f 91       	pop	r16
    1162:	ff 90       	pop	r15
    1164:	ef 90       	pop	r14
    1166:	df 90       	pop	r13
    1168:	cf 90       	pop	r12
    116a:	bf 90       	pop	r11
    116c:	af 90       	pop	r10
    116e:	9f 90       	pop	r9
    1170:	8f 90       	pop	r8
    1172:	7f 90       	pop	r7
    1174:	6f 90       	pop	r6
    1176:	5f 90       	pop	r5
    1178:	4f 90       	pop	r4
    117a:	3f 90       	pop	r3
    117c:	2f 90       	pop	r2
    117e:	08 95       	ret

00001180 <vTaskStartScheduler>:
    1180:	ef 92       	push	r14
    1182:	ff 92       	push	r15
    1184:	0f 93       	push	r16
    1186:	0f 2e       	mov	r0, r31
    1188:	f4 e8       	ldi	r31, 0x84	; 132
    118a:	ef 2e       	mov	r14, r31
    118c:	f6 e0       	ldi	r31, 0x06	; 6
    118e:	ff 2e       	mov	r15, r31
    1190:	f0 2d       	mov	r31, r0
    1192:	00 e0       	ldi	r16, 0x00	; 0
    1194:	20 e0       	ldi	r18, 0x00	; 0
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	40 e2       	ldi	r20, 0x20	; 32
    119a:	53 e0       	ldi	r21, 0x03	; 3
    119c:	63 e9       	ldi	r22, 0x93	; 147
    119e:	70 e0       	ldi	r23, 0x00	; 0
    11a0:	8a e1       	ldi	r24, 0x1A	; 26
    11a2:	98 e0       	ldi	r25, 0x08	; 8
    11a4:	0e 94 67 08 	call	0x10ce	; 0x10ce <xTaskCreate>
    11a8:	81 30       	cpi	r24, 0x01	; 1
    11aa:	81 f4       	brne	.+32     	; 0x11cc <vTaskStartScheduler+0x4c>
    11ac:	f8 94       	cli
    11ae:	8f ef       	ldi	r24, 0xFF	; 255
    11b0:	9f ef       	ldi	r25, 0xFF	; 255
    11b2:	90 93 87 06 	sts	0x0687, r25	; 0x800687 <xNextTaskUnblockTime+0x1>
    11b6:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <xNextTaskUnblockTime>
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	80 93 8d 06 	sts	0x068D, r24	; 0x80068d <xSchedulerRunning>
    11c0:	10 92 90 06 	sts	0x0690, r1	; 0x800690 <xTickCount+0x1>
    11c4:	10 92 8f 06 	sts	0x068F, r1	; 0x80068f <xTickCount>
    11c8:	0e 94 5f 03 	call	0x6be	; 0x6be <xPortStartScheduler>
    11cc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <uxTopUsedPriority>
    11d0:	0f 91       	pop	r16
    11d2:	ff 90       	pop	r15
    11d4:	ef 90       	pop	r14
    11d6:	08 95       	ret

000011d8 <vTaskSuspendAll>:
    11d8:	80 91 83 06 	lds	r24, 0x0683	; 0x800683 <uxSchedulerSuspended>
    11dc:	8f 5f       	subi	r24, 0xFF	; 255
    11de:	80 93 83 06 	sts	0x0683, r24	; 0x800683 <uxSchedulerSuspended>
    11e2:	08 95       	ret

000011e4 <xTaskIncrementTick>:
    11e4:	0f 93       	push	r16
    11e6:	1f 93       	push	r17
    11e8:	cf 93       	push	r28
    11ea:	df 93       	push	r29
    11ec:	80 91 83 06 	lds	r24, 0x0683	; 0x800683 <uxSchedulerSuspended>
    11f0:	81 11       	cpse	r24, r1
    11f2:	01 c1       	rjmp	.+514    	; 0x13f6 <xTaskIncrementTick+0x212>
    11f4:	c0 91 8f 06 	lds	r28, 0x068F	; 0x80068f <xTickCount>
    11f8:	d0 91 90 06 	lds	r29, 0x0690	; 0x800690 <xTickCount+0x1>
    11fc:	8e 01       	movw	r16, r28
    11fe:	0f 5f       	subi	r16, 0xFF	; 255
    1200:	1f 4f       	sbci	r17, 0xFF	; 255
    1202:	10 93 90 06 	sts	0x0690, r17	; 0x800690 <xTickCount+0x1>
    1206:	00 93 8f 06 	sts	0x068F, r16	; 0x80068f <xTickCount>
    120a:	01 15       	cp	r16, r1
    120c:	11 05       	cpc	r17, r1
    120e:	b9 f4       	brne	.+46     	; 0x123e <xTaskIncrementTick+0x5a>
    1210:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <pxDelayedTaskList>
    1214:	90 91 a8 06 	lds	r25, 0x06A8	; 0x8006a8 <pxDelayedTaskList+0x1>
    1218:	20 91 a5 06 	lds	r18, 0x06A5	; 0x8006a5 <pxOverflowDelayedTaskList>
    121c:	30 91 a6 06 	lds	r19, 0x06A6	; 0x8006a6 <pxOverflowDelayedTaskList+0x1>
    1220:	30 93 a8 06 	sts	0x06A8, r19	; 0x8006a8 <pxDelayedTaskList+0x1>
    1224:	20 93 a7 06 	sts	0x06A7, r18	; 0x8006a7 <pxDelayedTaskList>
    1228:	90 93 a6 06 	sts	0x06A6, r25	; 0x8006a6 <pxOverflowDelayedTaskList+0x1>
    122c:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <pxOverflowDelayedTaskList>
    1230:	80 91 89 06 	lds	r24, 0x0689	; 0x800689 <xNumOfOverflows>
    1234:	8f 5f       	subi	r24, 0xFF	; 255
    1236:	80 93 89 06 	sts	0x0689, r24	; 0x800689 <xNumOfOverflows>
    123a:	0e 94 b2 06 	call	0xd64	; 0xd64 <prvResetNextTaskUnblockTime>
    123e:	80 91 86 06 	lds	r24, 0x0686	; 0x800686 <xNextTaskUnblockTime>
    1242:	90 91 87 06 	lds	r25, 0x0687	; 0x800687 <xNextTaskUnblockTime+0x1>
    1246:	08 17       	cp	r16, r24
    1248:	19 07       	cpc	r17, r25
    124a:	20 f4       	brcc	.+8      	; 0x1254 <xTaskIncrementTick+0x70>
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	b8 c0       	rjmp	.+368    	; 0x13c0 <xTaskIncrementTick+0x1dc>
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	01 c0       	rjmp	.+2      	; 0x1256 <xTaskIncrementTick+0x72>
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	e0 91 a7 06 	lds	r30, 0x06A7	; 0x8006a7 <pxDelayedTaskList>
    125a:	f0 91 a8 06 	lds	r31, 0x06A8	; 0x8006a8 <pxDelayedTaskList+0x1>
    125e:	90 81       	ld	r25, Z
    1260:	91 11       	cpse	r25, r1
    1262:	07 c0       	rjmp	.+14     	; 0x1272 <xTaskIncrementTick+0x8e>
    1264:	2f ef       	ldi	r18, 0xFF	; 255
    1266:	3f ef       	ldi	r19, 0xFF	; 255
    1268:	30 93 87 06 	sts	0x0687, r19	; 0x800687 <xNextTaskUnblockTime+0x1>
    126c:	20 93 86 06 	sts	0x0686, r18	; 0x800686 <xNextTaskUnblockTime>
    1270:	a7 c0       	rjmp	.+334    	; 0x13c0 <xTaskIncrementTick+0x1dc>
    1272:	e0 91 a7 06 	lds	r30, 0x06A7	; 0x8006a7 <pxDelayedTaskList>
    1276:	f0 91 a8 06 	lds	r31, 0x06A8	; 0x8006a8 <pxDelayedTaskList+0x1>
    127a:	05 80       	ldd	r0, Z+5	; 0x05
    127c:	f6 81       	ldd	r31, Z+6	; 0x06
    127e:	e0 2d       	mov	r30, r0
    1280:	06 80       	ldd	r0, Z+6	; 0x06
    1282:	f7 81       	ldd	r31, Z+7	; 0x07
    1284:	e0 2d       	mov	r30, r0
    1286:	22 81       	ldd	r18, Z+2	; 0x02
    1288:	33 81       	ldd	r19, Z+3	; 0x03
    128a:	02 17       	cp	r16, r18
    128c:	13 07       	cpc	r17, r19
    128e:	28 f4       	brcc	.+10     	; 0x129a <xTaskIncrementTick+0xb6>
    1290:	30 93 87 06 	sts	0x0687, r19	; 0x800687 <xNextTaskUnblockTime+0x1>
    1294:	20 93 86 06 	sts	0x0686, r18	; 0x800686 <xNextTaskUnblockTime>
    1298:	93 c0       	rjmp	.+294    	; 0x13c0 <xTaskIncrementTick+0x1dc>
    129a:	a2 85       	ldd	r26, Z+10	; 0x0a
    129c:	b3 85       	ldd	r27, Z+11	; 0x0b
    129e:	24 81       	ldd	r18, Z+4	; 0x04
    12a0:	35 81       	ldd	r19, Z+5	; 0x05
    12a2:	46 81       	ldd	r20, Z+6	; 0x06
    12a4:	57 81       	ldd	r21, Z+7	; 0x07
    12a6:	e9 01       	movw	r28, r18
    12a8:	5d 83       	std	Y+5, r21	; 0x05
    12aa:	4c 83       	std	Y+4, r20	; 0x04
    12ac:	26 81       	ldd	r18, Z+6	; 0x06
    12ae:	37 81       	ldd	r19, Z+7	; 0x07
    12b0:	44 81       	ldd	r20, Z+4	; 0x04
    12b2:	55 81       	ldd	r21, Z+5	; 0x05
    12b4:	e9 01       	movw	r28, r18
    12b6:	5b 83       	std	Y+3, r21	; 0x03
    12b8:	4a 83       	std	Y+2, r20	; 0x02
    12ba:	11 96       	adiw	r26, 0x01	; 1
    12bc:	2d 91       	ld	r18, X+
    12be:	3c 91       	ld	r19, X
    12c0:	12 97       	sbiw	r26, 0x02	; 2
    12c2:	af 01       	movw	r20, r30
    12c4:	4e 5f       	subi	r20, 0xFE	; 254
    12c6:	5f 4f       	sbci	r21, 0xFF	; 255
    12c8:	24 17       	cp	r18, r20
    12ca:	35 07       	cpc	r19, r21
    12cc:	31 f4       	brne	.+12     	; 0x12da <xTaskIncrementTick+0xf6>
    12ce:	26 81       	ldd	r18, Z+6	; 0x06
    12d0:	37 81       	ldd	r19, Z+7	; 0x07
    12d2:	12 96       	adiw	r26, 0x02	; 2
    12d4:	3c 93       	st	X, r19
    12d6:	2e 93       	st	-X, r18
    12d8:	11 97       	sbiw	r26, 0x01	; 1
    12da:	13 86       	std	Z+11, r1	; 0x0b
    12dc:	12 86       	std	Z+10, r1	; 0x0a
    12de:	9c 91       	ld	r25, X
    12e0:	91 50       	subi	r25, 0x01	; 1
    12e2:	9c 93       	st	X, r25
    12e4:	a4 89       	ldd	r26, Z+20	; 0x14
    12e6:	b5 89       	ldd	r27, Z+21	; 0x15
    12e8:	10 97       	sbiw	r26, 0x00	; 0
    12ea:	19 f1       	breq	.+70     	; 0x1332 <xTaskIncrementTick+0x14e>
    12ec:	26 85       	ldd	r18, Z+14	; 0x0e
    12ee:	37 85       	ldd	r19, Z+15	; 0x0f
    12f0:	60 89       	ldd	r22, Z+16	; 0x10
    12f2:	71 89       	ldd	r23, Z+17	; 0x11
    12f4:	e9 01       	movw	r28, r18
    12f6:	7d 83       	std	Y+5, r23	; 0x05
    12f8:	6c 83       	std	Y+4, r22	; 0x04
    12fa:	20 89       	ldd	r18, Z+16	; 0x10
    12fc:	31 89       	ldd	r19, Z+17	; 0x11
    12fe:	66 85       	ldd	r22, Z+14	; 0x0e
    1300:	77 85       	ldd	r23, Z+15	; 0x0f
    1302:	e9 01       	movw	r28, r18
    1304:	7b 83       	std	Y+3, r23	; 0x03
    1306:	6a 83       	std	Y+2, r22	; 0x02
    1308:	11 96       	adiw	r26, 0x01	; 1
    130a:	6d 91       	ld	r22, X+
    130c:	7c 91       	ld	r23, X
    130e:	12 97       	sbiw	r26, 0x02	; 2
    1310:	9f 01       	movw	r18, r30
    1312:	24 5f       	subi	r18, 0xF4	; 244
    1314:	3f 4f       	sbci	r19, 0xFF	; 255
    1316:	62 17       	cp	r22, r18
    1318:	73 07       	cpc	r23, r19
    131a:	31 f4       	brne	.+12     	; 0x1328 <xTaskIncrementTick+0x144>
    131c:	20 89       	ldd	r18, Z+16	; 0x10
    131e:	31 89       	ldd	r19, Z+17	; 0x11
    1320:	12 96       	adiw	r26, 0x02	; 2
    1322:	3c 93       	st	X, r19
    1324:	2e 93       	st	-X, r18
    1326:	11 97       	sbiw	r26, 0x01	; 1
    1328:	15 8a       	std	Z+21, r1	; 0x15
    132a:	14 8a       	std	Z+20, r1	; 0x14
    132c:	9c 91       	ld	r25, X
    132e:	91 50       	subi	r25, 0x01	; 1
    1330:	9c 93       	st	X, r25
    1332:	26 89       	ldd	r18, Z+22	; 0x16
    1334:	90 91 8e 06 	lds	r25, 0x068E	; 0x80068e <uxTopReadyPriority>
    1338:	92 17       	cp	r25, r18
    133a:	10 f4       	brcc	.+4      	; 0x1340 <xTaskIncrementTick+0x15c>
    133c:	20 93 8e 06 	sts	0x068E, r18	; 0x80068e <uxTopReadyPriority>
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	d9 01       	movw	r26, r18
    1344:	aa 0f       	add	r26, r26
    1346:	bb 1f       	adc	r27, r27
    1348:	aa 0f       	add	r26, r26
    134a:	bb 1f       	adc	r27, r27
    134c:	aa 0f       	add	r26, r26
    134e:	bb 1f       	adc	r27, r27
    1350:	2a 0f       	add	r18, r26
    1352:	3b 1f       	adc	r19, r27
    1354:	d9 01       	movw	r26, r18
    1356:	a5 54       	subi	r26, 0x45	; 69
    1358:	b9 4f       	sbci	r27, 0xF9	; 249
    135a:	11 96       	adiw	r26, 0x01	; 1
    135c:	0d 90       	ld	r0, X+
    135e:	bc 91       	ld	r27, X
    1360:	a0 2d       	mov	r26, r0
    1362:	b5 83       	std	Z+5, r27	; 0x05
    1364:	a4 83       	std	Z+4, r26	; 0x04
    1366:	14 96       	adiw	r26, 0x04	; 4
    1368:	2d 91       	ld	r18, X+
    136a:	3c 91       	ld	r19, X
    136c:	15 97       	sbiw	r26, 0x05	; 5
    136e:	37 83       	std	Z+7, r19	; 0x07
    1370:	26 83       	std	Z+6, r18	; 0x06
    1372:	14 96       	adiw	r26, 0x04	; 4
    1374:	2d 91       	ld	r18, X+
    1376:	3c 91       	ld	r19, X
    1378:	15 97       	sbiw	r26, 0x05	; 5
    137a:	e9 01       	movw	r28, r18
    137c:	5b 83       	std	Y+3, r21	; 0x03
    137e:	4a 83       	std	Y+2, r20	; 0x02
    1380:	15 96       	adiw	r26, 0x05	; 5
    1382:	5c 93       	st	X, r21
    1384:	4e 93       	st	-X, r20
    1386:	14 97       	sbiw	r26, 0x04	; 4
    1388:	a6 89       	ldd	r26, Z+22	; 0x16
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	9d 01       	movw	r18, r26
    138e:	22 0f       	add	r18, r18
    1390:	33 1f       	adc	r19, r19
    1392:	22 0f       	add	r18, r18
    1394:	33 1f       	adc	r19, r19
    1396:	22 0f       	add	r18, r18
    1398:	33 1f       	adc	r19, r19
    139a:	a2 0f       	add	r26, r18
    139c:	b3 1f       	adc	r27, r19
    139e:	a5 54       	subi	r26, 0x45	; 69
    13a0:	b9 4f       	sbci	r27, 0xF9	; 249
    13a2:	b3 87       	std	Z+11, r27	; 0x0b
    13a4:	a2 87       	std	Z+10, r26	; 0x0a
    13a6:	9c 91       	ld	r25, X
    13a8:	9f 5f       	subi	r25, 0xFF	; 255
    13aa:	9c 93       	st	X, r25
    13ac:	26 89       	ldd	r18, Z+22	; 0x16
    13ae:	e0 91 df 06 	lds	r30, 0x06DF	; 0x8006df <pxCurrentTCB>
    13b2:	f0 91 e0 06 	lds	r31, 0x06E0	; 0x8006e0 <pxCurrentTCB+0x1>
    13b6:	96 89       	ldd	r25, Z+22	; 0x16
    13b8:	92 17       	cp	r25, r18
    13ba:	08 f4       	brcc	.+2      	; 0x13be <xTaskIncrementTick+0x1da>
    13bc:	49 cf       	rjmp	.-366    	; 0x1250 <xTaskIncrementTick+0x6c>
    13be:	4b cf       	rjmp	.-362    	; 0x1256 <xTaskIncrementTick+0x72>
    13c0:	e0 91 df 06 	lds	r30, 0x06DF	; 0x8006df <pxCurrentTCB>
    13c4:	f0 91 e0 06 	lds	r31, 0x06E0	; 0x8006e0 <pxCurrentTCB+0x1>
    13c8:	26 89       	ldd	r18, Z+22	; 0x16
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	f9 01       	movw	r30, r18
    13ce:	ee 0f       	add	r30, r30
    13d0:	ff 1f       	adc	r31, r31
    13d2:	ee 0f       	add	r30, r30
    13d4:	ff 1f       	adc	r31, r31
    13d6:	ee 0f       	add	r30, r30
    13d8:	ff 1f       	adc	r31, r31
    13da:	2e 0f       	add	r18, r30
    13dc:	3f 1f       	adc	r19, r31
    13de:	f9 01       	movw	r30, r18
    13e0:	e5 54       	subi	r30, 0x45	; 69
    13e2:	f9 4f       	sbci	r31, 0xF9	; 249
    13e4:	90 81       	ld	r25, Z
    13e6:	92 30       	cpi	r25, 0x02	; 2
    13e8:	08 f0       	brcs	.+2      	; 0x13ec <xTaskIncrementTick+0x208>
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	90 91 8a 06 	lds	r25, 0x068A	; 0x80068a <xYieldPending>
    13f0:	91 11       	cpse	r25, r1
    13f2:	0c c0       	rjmp	.+24     	; 0x140c <xTaskIncrementTick+0x228>
    13f4:	0c c0       	rjmp	.+24     	; 0x140e <xTaskIncrementTick+0x22a>
    13f6:	80 91 8b 06 	lds	r24, 0x068B	; 0x80068b <xPendedTicks>
    13fa:	90 91 8c 06 	lds	r25, 0x068C	; 0x80068c <xPendedTicks+0x1>
    13fe:	01 96       	adiw	r24, 0x01	; 1
    1400:	90 93 8c 06 	sts	0x068C, r25	; 0x80068c <xPendedTicks+0x1>
    1404:	80 93 8b 06 	sts	0x068B, r24	; 0x80068b <xPendedTicks>
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	01 c0       	rjmp	.+2      	; 0x140e <xTaskIncrementTick+0x22a>
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	df 91       	pop	r29
    1410:	cf 91       	pop	r28
    1412:	1f 91       	pop	r17
    1414:	0f 91       	pop	r16
    1416:	08 95       	ret

00001418 <xTaskResumeAll>:
    1418:	cf 93       	push	r28
    141a:	df 93       	push	r29
    141c:	0f b6       	in	r0, 0x3f	; 63
    141e:	f8 94       	cli
    1420:	0f 92       	push	r0
    1422:	80 91 83 06 	lds	r24, 0x0683	; 0x800683 <uxSchedulerSuspended>
    1426:	81 50       	subi	r24, 0x01	; 1
    1428:	80 93 83 06 	sts	0x0683, r24	; 0x800683 <uxSchedulerSuspended>
    142c:	80 91 83 06 	lds	r24, 0x0683	; 0x800683 <uxSchedulerSuspended>
    1430:	81 11       	cpse	r24, r1
    1432:	bf c0       	rjmp	.+382    	; 0x15b2 <xTaskResumeAll+0x19a>
    1434:	80 91 91 06 	lds	r24, 0x0691	; 0x800691 <uxCurrentNumberOfTasks>
    1438:	81 11       	cpse	r24, r1
    143a:	96 c0       	rjmp	.+300    	; 0x1568 <xTaskResumeAll+0x150>
    143c:	bd c0       	rjmp	.+378    	; 0x15b8 <xTaskResumeAll+0x1a0>
    143e:	e0 91 a1 06 	lds	r30, 0x06A1	; 0x8006a1 <xPendingReadyList+0x5>
    1442:	f0 91 a2 06 	lds	r31, 0x06A2	; 0x8006a2 <xPendingReadyList+0x6>
    1446:	06 80       	ldd	r0, Z+6	; 0x06
    1448:	f7 81       	ldd	r31, Z+7	; 0x07
    144a:	e0 2d       	mov	r30, r0
    144c:	a4 89       	ldd	r26, Z+20	; 0x14
    144e:	b5 89       	ldd	r27, Z+21	; 0x15
    1450:	c6 85       	ldd	r28, Z+14	; 0x0e
    1452:	d7 85       	ldd	r29, Z+15	; 0x0f
    1454:	80 89       	ldd	r24, Z+16	; 0x10
    1456:	91 89       	ldd	r25, Z+17	; 0x11
    1458:	9d 83       	std	Y+5, r25	; 0x05
    145a:	8c 83       	std	Y+4, r24	; 0x04
    145c:	c0 89       	ldd	r28, Z+16	; 0x10
    145e:	d1 89       	ldd	r29, Z+17	; 0x11
    1460:	86 85       	ldd	r24, Z+14	; 0x0e
    1462:	97 85       	ldd	r25, Z+15	; 0x0f
    1464:	9b 83       	std	Y+3, r25	; 0x03
    1466:	8a 83       	std	Y+2, r24	; 0x02
    1468:	11 96       	adiw	r26, 0x01	; 1
    146a:	2d 91       	ld	r18, X+
    146c:	3c 91       	ld	r19, X
    146e:	12 97       	sbiw	r26, 0x02	; 2
    1470:	cf 01       	movw	r24, r30
    1472:	0c 96       	adiw	r24, 0x0c	; 12
    1474:	28 17       	cp	r18, r24
    1476:	39 07       	cpc	r19, r25
    1478:	31 f4       	brne	.+12     	; 0x1486 <xTaskResumeAll+0x6e>
    147a:	80 89       	ldd	r24, Z+16	; 0x10
    147c:	91 89       	ldd	r25, Z+17	; 0x11
    147e:	12 96       	adiw	r26, 0x02	; 2
    1480:	9c 93       	st	X, r25
    1482:	8e 93       	st	-X, r24
    1484:	11 97       	sbiw	r26, 0x01	; 1
    1486:	15 8a       	std	Z+21, r1	; 0x15
    1488:	14 8a       	std	Z+20, r1	; 0x14
    148a:	8c 91       	ld	r24, X
    148c:	81 50       	subi	r24, 0x01	; 1
    148e:	8c 93       	st	X, r24
    1490:	a2 85       	ldd	r26, Z+10	; 0x0a
    1492:	b3 85       	ldd	r27, Z+11	; 0x0b
    1494:	c4 81       	ldd	r28, Z+4	; 0x04
    1496:	d5 81       	ldd	r29, Z+5	; 0x05
    1498:	86 81       	ldd	r24, Z+6	; 0x06
    149a:	97 81       	ldd	r25, Z+7	; 0x07
    149c:	9d 83       	std	Y+5, r25	; 0x05
    149e:	8c 83       	std	Y+4, r24	; 0x04
    14a0:	c6 81       	ldd	r28, Z+6	; 0x06
    14a2:	d7 81       	ldd	r29, Z+7	; 0x07
    14a4:	84 81       	ldd	r24, Z+4	; 0x04
    14a6:	95 81       	ldd	r25, Z+5	; 0x05
    14a8:	9b 83       	std	Y+3, r25	; 0x03
    14aa:	8a 83       	std	Y+2, r24	; 0x02
    14ac:	11 96       	adiw	r26, 0x01	; 1
    14ae:	8d 91       	ld	r24, X+
    14b0:	9c 91       	ld	r25, X
    14b2:	12 97       	sbiw	r26, 0x02	; 2
    14b4:	9f 01       	movw	r18, r30
    14b6:	2e 5f       	subi	r18, 0xFE	; 254
    14b8:	3f 4f       	sbci	r19, 0xFF	; 255
    14ba:	82 17       	cp	r24, r18
    14bc:	93 07       	cpc	r25, r19
    14be:	31 f4       	brne	.+12     	; 0x14cc <xTaskResumeAll+0xb4>
    14c0:	86 81       	ldd	r24, Z+6	; 0x06
    14c2:	97 81       	ldd	r25, Z+7	; 0x07
    14c4:	12 96       	adiw	r26, 0x02	; 2
    14c6:	9c 93       	st	X, r25
    14c8:	8e 93       	st	-X, r24
    14ca:	11 97       	sbiw	r26, 0x01	; 1
    14cc:	13 86       	std	Z+11, r1	; 0x0b
    14ce:	12 86       	std	Z+10, r1	; 0x0a
    14d0:	8c 91       	ld	r24, X
    14d2:	81 50       	subi	r24, 0x01	; 1
    14d4:	8c 93       	st	X, r24
    14d6:	86 89       	ldd	r24, Z+22	; 0x16
    14d8:	90 91 8e 06 	lds	r25, 0x068E	; 0x80068e <uxTopReadyPriority>
    14dc:	98 17       	cp	r25, r24
    14de:	10 f4       	brcc	.+4      	; 0x14e4 <xTaskResumeAll+0xcc>
    14e0:	80 93 8e 06 	sts	0x068E, r24	; 0x80068e <uxTopReadyPriority>
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	dc 01       	movw	r26, r24
    14e8:	aa 0f       	add	r26, r26
    14ea:	bb 1f       	adc	r27, r27
    14ec:	aa 0f       	add	r26, r26
    14ee:	bb 1f       	adc	r27, r27
    14f0:	aa 0f       	add	r26, r26
    14f2:	bb 1f       	adc	r27, r27
    14f4:	8a 0f       	add	r24, r26
    14f6:	9b 1f       	adc	r25, r27
    14f8:	dc 01       	movw	r26, r24
    14fa:	a5 54       	subi	r26, 0x45	; 69
    14fc:	b9 4f       	sbci	r27, 0xF9	; 249
    14fe:	11 96       	adiw	r26, 0x01	; 1
    1500:	0d 90       	ld	r0, X+
    1502:	bc 91       	ld	r27, X
    1504:	a0 2d       	mov	r26, r0
    1506:	b5 83       	std	Z+5, r27	; 0x05
    1508:	a4 83       	std	Z+4, r26	; 0x04
    150a:	14 96       	adiw	r26, 0x04	; 4
    150c:	8d 91       	ld	r24, X+
    150e:	9c 91       	ld	r25, X
    1510:	15 97       	sbiw	r26, 0x05	; 5
    1512:	97 83       	std	Z+7, r25	; 0x07
    1514:	86 83       	std	Z+6, r24	; 0x06
    1516:	14 96       	adiw	r26, 0x04	; 4
    1518:	cd 91       	ld	r28, X+
    151a:	dc 91       	ld	r29, X
    151c:	15 97       	sbiw	r26, 0x05	; 5
    151e:	3b 83       	std	Y+3, r19	; 0x03
    1520:	2a 83       	std	Y+2, r18	; 0x02
    1522:	15 96       	adiw	r26, 0x05	; 5
    1524:	3c 93       	st	X, r19
    1526:	2e 93       	st	-X, r18
    1528:	14 97       	sbiw	r26, 0x04	; 4
    152a:	a6 89       	ldd	r26, Z+22	; 0x16
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	cd 01       	movw	r24, r26
    1530:	88 0f       	add	r24, r24
    1532:	99 1f       	adc	r25, r25
    1534:	88 0f       	add	r24, r24
    1536:	99 1f       	adc	r25, r25
    1538:	88 0f       	add	r24, r24
    153a:	99 1f       	adc	r25, r25
    153c:	a8 0f       	add	r26, r24
    153e:	b9 1f       	adc	r27, r25
    1540:	a5 54       	subi	r26, 0x45	; 69
    1542:	b9 4f       	sbci	r27, 0xF9	; 249
    1544:	b3 87       	std	Z+11, r27	; 0x0b
    1546:	a2 87       	std	Z+10, r26	; 0x0a
    1548:	8c 91       	ld	r24, X
    154a:	8f 5f       	subi	r24, 0xFF	; 255
    154c:	8c 93       	st	X, r24
    154e:	96 89       	ldd	r25, Z+22	; 0x16
    1550:	a0 91 df 06 	lds	r26, 0x06DF	; 0x8006df <pxCurrentTCB>
    1554:	b0 91 e0 06 	lds	r27, 0x06E0	; 0x8006e0 <pxCurrentTCB+0x1>
    1558:	56 96       	adiw	r26, 0x16	; 22
    155a:	8c 91       	ld	r24, X
    155c:	98 17       	cp	r25, r24
    155e:	30 f0       	brcs	.+12     	; 0x156c <xTaskResumeAll+0x154>
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	80 93 8a 06 	sts	0x068A, r24	; 0x80068a <xYieldPending>
    1566:	02 c0       	rjmp	.+4      	; 0x156c <xTaskResumeAll+0x154>
    1568:	e0 e0       	ldi	r30, 0x00	; 0
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 91 9c 06 	lds	r24, 0x069C	; 0x80069c <xPendingReadyList>
    1570:	81 11       	cpse	r24, r1
    1572:	65 cf       	rjmp	.-310    	; 0x143e <xTaskResumeAll+0x26>
    1574:	ef 2b       	or	r30, r31
    1576:	11 f0       	breq	.+4      	; 0x157c <xTaskResumeAll+0x164>
    1578:	0e 94 b2 06 	call	0xd64	; 0xd64 <prvResetNextTaskUnblockTime>
    157c:	c0 91 8b 06 	lds	r28, 0x068B	; 0x80068b <xPendedTicks>
    1580:	d0 91 8c 06 	lds	r29, 0x068C	; 0x80068c <xPendedTicks+0x1>
    1584:	20 97       	sbiw	r28, 0x00	; 0
    1586:	69 f0       	breq	.+26     	; 0x15a2 <xTaskResumeAll+0x18a>
    1588:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <xTaskIncrementTick>
    158c:	88 23       	and	r24, r24
    158e:	19 f0       	breq	.+6      	; 0x1596 <xTaskResumeAll+0x17e>
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	80 93 8a 06 	sts	0x068A, r24	; 0x80068a <xYieldPending>
    1596:	21 97       	sbiw	r28, 0x01	; 1
    1598:	b9 f7       	brne	.-18     	; 0x1588 <xTaskResumeAll+0x170>
    159a:	10 92 8c 06 	sts	0x068C, r1	; 0x80068c <xPendedTicks+0x1>
    159e:	10 92 8b 06 	sts	0x068B, r1	; 0x80068b <xPendedTicks>
    15a2:	80 91 8a 06 	lds	r24, 0x068A	; 0x80068a <xYieldPending>
    15a6:	88 23       	and	r24, r24
    15a8:	31 f0       	breq	.+12     	; 0x15b6 <xTaskResumeAll+0x19e>
    15aa:	0e 94 8e 03 	call	0x71c	; 0x71c <vPortYield>
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	03 c0       	rjmp	.+6      	; 0x15b8 <xTaskResumeAll+0x1a0>
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	01 c0       	rjmp	.+2      	; 0x15b8 <xTaskResumeAll+0x1a0>
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	0f 90       	pop	r0
    15ba:	0f be       	out	0x3f, r0	; 63
    15bc:	df 91       	pop	r29
    15be:	cf 91       	pop	r28
    15c0:	08 95       	ret

000015c2 <vTaskDelay>:
    15c2:	cf 93       	push	r28
    15c4:	df 93       	push	r29
    15c6:	ec 01       	movw	r28, r24
    15c8:	89 2b       	or	r24, r25
    15ca:	49 f0       	breq	.+18     	; 0x15de <vTaskDelay+0x1c>
    15cc:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <vTaskSuspendAll>
    15d0:	60 e0       	ldi	r22, 0x00	; 0
    15d2:	ce 01       	movw	r24, r28
    15d4:	0e 94 23 08 	call	0x1046	; 0x1046 <prvAddCurrentTaskToDelayedList>
    15d8:	0e 94 0c 0a 	call	0x1418	; 0x1418 <xTaskResumeAll>
    15dc:	01 c0       	rjmp	.+2      	; 0x15e0 <vTaskDelay+0x1e>
    15de:	80 e0       	ldi	r24, 0x00	; 0
    15e0:	81 11       	cpse	r24, r1
    15e2:	02 c0       	rjmp	.+4      	; 0x15e8 <vTaskDelay+0x26>
    15e4:	0e 94 8e 03 	call	0x71c	; 0x71c <vPortYield>
    15e8:	df 91       	pop	r29
    15ea:	cf 91       	pop	r28
    15ec:	08 95       	ret

000015ee <vTaskSwitchContext>:
    15ee:	80 91 83 06 	lds	r24, 0x0683	; 0x800683 <uxSchedulerSuspended>
    15f2:	88 23       	and	r24, r24
    15f4:	21 f0       	breq	.+8      	; 0x15fe <vTaskSwitchContext+0x10>
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	80 93 8a 06 	sts	0x068A, r24	; 0x80068a <xYieldPending>
    15fc:	08 95       	ret
    15fe:	10 92 8a 06 	sts	0x068A, r1	; 0x80068a <xYieldPending>
    1602:	20 91 8e 06 	lds	r18, 0x068E	; 0x80068e <uxTopReadyPriority>
    1606:	01 c0       	rjmp	.+2      	; 0x160a <vTaskSwitchContext+0x1c>
    1608:	21 50       	subi	r18, 0x01	; 1
    160a:	82 2f       	mov	r24, r18
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	fc 01       	movw	r30, r24
    1610:	ee 0f       	add	r30, r30
    1612:	ff 1f       	adc	r31, r31
    1614:	ee 0f       	add	r30, r30
    1616:	ff 1f       	adc	r31, r31
    1618:	ee 0f       	add	r30, r30
    161a:	ff 1f       	adc	r31, r31
    161c:	e8 0f       	add	r30, r24
    161e:	f9 1f       	adc	r31, r25
    1620:	e5 54       	subi	r30, 0x45	; 69
    1622:	f9 4f       	sbci	r31, 0xF9	; 249
    1624:	30 81       	ld	r19, Z
    1626:	33 23       	and	r19, r19
    1628:	79 f3       	breq	.-34     	; 0x1608 <vTaskSwitchContext+0x1a>
    162a:	ac 01       	movw	r20, r24
    162c:	44 0f       	add	r20, r20
    162e:	55 1f       	adc	r21, r21
    1630:	44 0f       	add	r20, r20
    1632:	55 1f       	adc	r21, r21
    1634:	44 0f       	add	r20, r20
    1636:	55 1f       	adc	r21, r21
    1638:	48 0f       	add	r20, r24
    163a:	59 1f       	adc	r21, r25
    163c:	df 01       	movw	r26, r30
    163e:	01 80       	ldd	r0, Z+1	; 0x01
    1640:	f2 81       	ldd	r31, Z+2	; 0x02
    1642:	e0 2d       	mov	r30, r0
    1644:	02 80       	ldd	r0, Z+2	; 0x02
    1646:	f3 81       	ldd	r31, Z+3	; 0x03
    1648:	e0 2d       	mov	r30, r0
    164a:	12 96       	adiw	r26, 0x02	; 2
    164c:	fc 93       	st	X, r31
    164e:	ee 93       	st	-X, r30
    1650:	11 97       	sbiw	r26, 0x01	; 1
    1652:	42 54       	subi	r20, 0x42	; 66
    1654:	59 4f       	sbci	r21, 0xF9	; 249
    1656:	e4 17       	cp	r30, r20
    1658:	f5 07       	cpc	r31, r21
    165a:	29 f4       	brne	.+10     	; 0x1666 <vTaskSwitchContext+0x78>
    165c:	42 81       	ldd	r20, Z+2	; 0x02
    165e:	53 81       	ldd	r21, Z+3	; 0x03
    1660:	fd 01       	movw	r30, r26
    1662:	52 83       	std	Z+2, r21	; 0x02
    1664:	41 83       	std	Z+1, r20	; 0x01
    1666:	fc 01       	movw	r30, r24
    1668:	ee 0f       	add	r30, r30
    166a:	ff 1f       	adc	r31, r31
    166c:	ee 0f       	add	r30, r30
    166e:	ff 1f       	adc	r31, r31
    1670:	ee 0f       	add	r30, r30
    1672:	ff 1f       	adc	r31, r31
    1674:	8e 0f       	add	r24, r30
    1676:	9f 1f       	adc	r25, r31
    1678:	fc 01       	movw	r30, r24
    167a:	e5 54       	subi	r30, 0x45	; 69
    167c:	f9 4f       	sbci	r31, 0xF9	; 249
    167e:	01 80       	ldd	r0, Z+1	; 0x01
    1680:	f2 81       	ldd	r31, Z+2	; 0x02
    1682:	e0 2d       	mov	r30, r0
    1684:	86 81       	ldd	r24, Z+6	; 0x06
    1686:	97 81       	ldd	r25, Z+7	; 0x07
    1688:	90 93 e0 06 	sts	0x06E0, r25	; 0x8006e0 <pxCurrentTCB+0x1>
    168c:	80 93 df 06 	sts	0x06DF, r24	; 0x8006df <pxCurrentTCB>
    1690:	20 93 8e 06 	sts	0x068E, r18	; 0x80068e <uxTopReadyPriority>
    1694:	08 95       	ret

00001696 <vTaskPlaceOnEventList>:
    1696:	cf 93       	push	r28
    1698:	df 93       	push	r29
    169a:	eb 01       	movw	r28, r22
    169c:	60 91 df 06 	lds	r22, 0x06DF	; 0x8006df <pxCurrentTCB>
    16a0:	70 91 e0 06 	lds	r23, 0x06E0	; 0x8006e0 <pxCurrentTCB+0x1>
    16a4:	64 5f       	subi	r22, 0xF4	; 244
    16a6:	7f 4f       	sbci	r23, 0xFF	; 255
    16a8:	0e 94 03 02 	call	0x406	; 0x406 <vListInsert>
    16ac:	61 e0       	ldi	r22, 0x01	; 1
    16ae:	ce 01       	movw	r24, r28
    16b0:	0e 94 23 08 	call	0x1046	; 0x1046 <prvAddCurrentTaskToDelayedList>
    16b4:	df 91       	pop	r29
    16b6:	cf 91       	pop	r28
    16b8:	08 95       	ret

000016ba <xTaskRemoveFromEventList>:
    16ba:	cf 93       	push	r28
    16bc:	df 93       	push	r29
    16be:	dc 01       	movw	r26, r24
    16c0:	15 96       	adiw	r26, 0x05	; 5
    16c2:	ed 91       	ld	r30, X+
    16c4:	fc 91       	ld	r31, X
    16c6:	16 97       	sbiw	r26, 0x06	; 6
    16c8:	06 80       	ldd	r0, Z+6	; 0x06
    16ca:	f7 81       	ldd	r31, Z+7	; 0x07
    16cc:	e0 2d       	mov	r30, r0
    16ce:	a4 89       	ldd	r26, Z+20	; 0x14
    16d0:	b5 89       	ldd	r27, Z+21	; 0x15
    16d2:	c6 85       	ldd	r28, Z+14	; 0x0e
    16d4:	d7 85       	ldd	r29, Z+15	; 0x0f
    16d6:	80 89       	ldd	r24, Z+16	; 0x10
    16d8:	91 89       	ldd	r25, Z+17	; 0x11
    16da:	9d 83       	std	Y+5, r25	; 0x05
    16dc:	8c 83       	std	Y+4, r24	; 0x04
    16de:	c0 89       	ldd	r28, Z+16	; 0x10
    16e0:	d1 89       	ldd	r29, Z+17	; 0x11
    16e2:	86 85       	ldd	r24, Z+14	; 0x0e
    16e4:	97 85       	ldd	r25, Z+15	; 0x0f
    16e6:	9b 83       	std	Y+3, r25	; 0x03
    16e8:	8a 83       	std	Y+2, r24	; 0x02
    16ea:	11 96       	adiw	r26, 0x01	; 1
    16ec:	8d 91       	ld	r24, X+
    16ee:	9c 91       	ld	r25, X
    16f0:	12 97       	sbiw	r26, 0x02	; 2
    16f2:	9f 01       	movw	r18, r30
    16f4:	24 5f       	subi	r18, 0xF4	; 244
    16f6:	3f 4f       	sbci	r19, 0xFF	; 255
    16f8:	82 17       	cp	r24, r18
    16fa:	93 07       	cpc	r25, r19
    16fc:	31 f4       	brne	.+12     	; 0x170a <xTaskRemoveFromEventList+0x50>
    16fe:	80 89       	ldd	r24, Z+16	; 0x10
    1700:	91 89       	ldd	r25, Z+17	; 0x11
    1702:	12 96       	adiw	r26, 0x02	; 2
    1704:	9c 93       	st	X, r25
    1706:	8e 93       	st	-X, r24
    1708:	11 97       	sbiw	r26, 0x01	; 1
    170a:	15 8a       	std	Z+21, r1	; 0x15
    170c:	14 8a       	std	Z+20, r1	; 0x14
    170e:	8c 91       	ld	r24, X
    1710:	81 50       	subi	r24, 0x01	; 1
    1712:	8c 93       	st	X, r24
    1714:	80 91 83 06 	lds	r24, 0x0683	; 0x800683 <uxSchedulerSuspended>
    1718:	81 11       	cpse	r24, r1
    171a:	60 c0       	rjmp	.+192    	; 0x17dc <xTaskRemoveFromEventList+0x122>
    171c:	a2 85       	ldd	r26, Z+10	; 0x0a
    171e:	b3 85       	ldd	r27, Z+11	; 0x0b
    1720:	c4 81       	ldd	r28, Z+4	; 0x04
    1722:	d5 81       	ldd	r29, Z+5	; 0x05
    1724:	86 81       	ldd	r24, Z+6	; 0x06
    1726:	97 81       	ldd	r25, Z+7	; 0x07
    1728:	9d 83       	std	Y+5, r25	; 0x05
    172a:	8c 83       	std	Y+4, r24	; 0x04
    172c:	c6 81       	ldd	r28, Z+6	; 0x06
    172e:	d7 81       	ldd	r29, Z+7	; 0x07
    1730:	84 81       	ldd	r24, Z+4	; 0x04
    1732:	95 81       	ldd	r25, Z+5	; 0x05
    1734:	9b 83       	std	Y+3, r25	; 0x03
    1736:	8a 83       	std	Y+2, r24	; 0x02
    1738:	11 96       	adiw	r26, 0x01	; 1
    173a:	8d 91       	ld	r24, X+
    173c:	9c 91       	ld	r25, X
    173e:	12 97       	sbiw	r26, 0x02	; 2
    1740:	9f 01       	movw	r18, r30
    1742:	2e 5f       	subi	r18, 0xFE	; 254
    1744:	3f 4f       	sbci	r19, 0xFF	; 255
    1746:	82 17       	cp	r24, r18
    1748:	93 07       	cpc	r25, r19
    174a:	31 f4       	brne	.+12     	; 0x1758 <xTaskRemoveFromEventList+0x9e>
    174c:	86 81       	ldd	r24, Z+6	; 0x06
    174e:	97 81       	ldd	r25, Z+7	; 0x07
    1750:	12 96       	adiw	r26, 0x02	; 2
    1752:	9c 93       	st	X, r25
    1754:	8e 93       	st	-X, r24
    1756:	11 97       	sbiw	r26, 0x01	; 1
    1758:	13 86       	std	Z+11, r1	; 0x0b
    175a:	12 86       	std	Z+10, r1	; 0x0a
    175c:	8c 91       	ld	r24, X
    175e:	81 50       	subi	r24, 0x01	; 1
    1760:	8c 93       	st	X, r24
    1762:	86 89       	ldd	r24, Z+22	; 0x16
    1764:	90 91 8e 06 	lds	r25, 0x068E	; 0x80068e <uxTopReadyPriority>
    1768:	98 17       	cp	r25, r24
    176a:	10 f4       	brcc	.+4      	; 0x1770 <xTaskRemoveFromEventList+0xb6>
    176c:	80 93 8e 06 	sts	0x068E, r24	; 0x80068e <uxTopReadyPriority>
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	dc 01       	movw	r26, r24
    1774:	aa 0f       	add	r26, r26
    1776:	bb 1f       	adc	r27, r27
    1778:	aa 0f       	add	r26, r26
    177a:	bb 1f       	adc	r27, r27
    177c:	aa 0f       	add	r26, r26
    177e:	bb 1f       	adc	r27, r27
    1780:	8a 0f       	add	r24, r26
    1782:	9b 1f       	adc	r25, r27
    1784:	dc 01       	movw	r26, r24
    1786:	a5 54       	subi	r26, 0x45	; 69
    1788:	b9 4f       	sbci	r27, 0xF9	; 249
    178a:	11 96       	adiw	r26, 0x01	; 1
    178c:	0d 90       	ld	r0, X+
    178e:	bc 91       	ld	r27, X
    1790:	a0 2d       	mov	r26, r0
    1792:	b5 83       	std	Z+5, r27	; 0x05
    1794:	a4 83       	std	Z+4, r26	; 0x04
    1796:	14 96       	adiw	r26, 0x04	; 4
    1798:	8d 91       	ld	r24, X+
    179a:	9c 91       	ld	r25, X
    179c:	15 97       	sbiw	r26, 0x05	; 5
    179e:	97 83       	std	Z+7, r25	; 0x07
    17a0:	86 83       	std	Z+6, r24	; 0x06
    17a2:	14 96       	adiw	r26, 0x04	; 4
    17a4:	cd 91       	ld	r28, X+
    17a6:	dc 91       	ld	r29, X
    17a8:	15 97       	sbiw	r26, 0x05	; 5
    17aa:	3b 83       	std	Y+3, r19	; 0x03
    17ac:	2a 83       	std	Y+2, r18	; 0x02
    17ae:	15 96       	adiw	r26, 0x05	; 5
    17b0:	3c 93       	st	X, r19
    17b2:	2e 93       	st	-X, r18
    17b4:	14 97       	sbiw	r26, 0x04	; 4
    17b6:	a6 89       	ldd	r26, Z+22	; 0x16
    17b8:	b0 e0       	ldi	r27, 0x00	; 0
    17ba:	cd 01       	movw	r24, r26
    17bc:	88 0f       	add	r24, r24
    17be:	99 1f       	adc	r25, r25
    17c0:	88 0f       	add	r24, r24
    17c2:	99 1f       	adc	r25, r25
    17c4:	88 0f       	add	r24, r24
    17c6:	99 1f       	adc	r25, r25
    17c8:	a8 0f       	add	r26, r24
    17ca:	b9 1f       	adc	r27, r25
    17cc:	a5 54       	subi	r26, 0x45	; 69
    17ce:	b9 4f       	sbci	r27, 0xF9	; 249
    17d0:	b3 87       	std	Z+11, r27	; 0x0b
    17d2:	a2 87       	std	Z+10, r26	; 0x0a
    17d4:	8c 91       	ld	r24, X
    17d6:	8f 5f       	subi	r24, 0xFF	; 255
    17d8:	8c 93       	st	X, r24
    17da:	1c c0       	rjmp	.+56     	; 0x1814 <xTaskRemoveFromEventList+0x15a>
    17dc:	4c e9       	ldi	r20, 0x9C	; 156
    17de:	56 e0       	ldi	r21, 0x06	; 6
    17e0:	da 01       	movw	r26, r20
    17e2:	11 96       	adiw	r26, 0x01	; 1
    17e4:	cd 91       	ld	r28, X+
    17e6:	dc 91       	ld	r29, X
    17e8:	12 97       	sbiw	r26, 0x02	; 2
    17ea:	d7 87       	std	Z+15, r29	; 0x0f
    17ec:	c6 87       	std	Z+14, r28	; 0x0e
    17ee:	8c 81       	ldd	r24, Y+4	; 0x04
    17f0:	9d 81       	ldd	r25, Y+5	; 0x05
    17f2:	91 8b       	std	Z+17, r25	; 0x11
    17f4:	80 8b       	std	Z+16, r24	; 0x10
    17f6:	8c 81       	ldd	r24, Y+4	; 0x04
    17f8:	9d 81       	ldd	r25, Y+5	; 0x05
    17fa:	dc 01       	movw	r26, r24
    17fc:	13 96       	adiw	r26, 0x03	; 3
    17fe:	3c 93       	st	X, r19
    1800:	2e 93       	st	-X, r18
    1802:	12 97       	sbiw	r26, 0x02	; 2
    1804:	3d 83       	std	Y+5, r19	; 0x05
    1806:	2c 83       	std	Y+4, r18	; 0x04
    1808:	55 8b       	std	Z+21, r21	; 0x15
    180a:	44 8b       	std	Z+20, r20	; 0x14
    180c:	da 01       	movw	r26, r20
    180e:	8c 91       	ld	r24, X
    1810:	8f 5f       	subi	r24, 0xFF	; 255
    1812:	8c 93       	st	X, r24
    1814:	96 89       	ldd	r25, Z+22	; 0x16
    1816:	e0 91 df 06 	lds	r30, 0x06DF	; 0x8006df <pxCurrentTCB>
    181a:	f0 91 e0 06 	lds	r31, 0x06E0	; 0x8006e0 <pxCurrentTCB+0x1>
    181e:	86 89       	ldd	r24, Z+22	; 0x16
    1820:	89 17       	cp	r24, r25
    1822:	20 f4       	brcc	.+8      	; 0x182c <xTaskRemoveFromEventList+0x172>
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	80 93 8a 06 	sts	0x068A, r24	; 0x80068a <xYieldPending>
    182a:	01 c0       	rjmp	.+2      	; 0x182e <xTaskRemoveFromEventList+0x174>
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	df 91       	pop	r29
    1830:	cf 91       	pop	r28
    1832:	08 95       	ret

00001834 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
    1834:	20 91 89 06 	lds	r18, 0x0689	; 0x800689 <xNumOfOverflows>
    1838:	fc 01       	movw	r30, r24
    183a:	20 83       	st	Z, r18
    pxTimeOut->xTimeOnEntering = xTickCount;
    183c:	20 91 8f 06 	lds	r18, 0x068F	; 0x80068f <xTickCount>
    1840:	30 91 90 06 	lds	r19, 0x0690	; 0x800690 <xTickCount+0x1>
    1844:	32 83       	std	Z+2, r19	; 0x02
    1846:	21 83       	std	Z+1, r18	; 0x01
    1848:	08 95       	ret

0000184a <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
    184a:	cf 93       	push	r28
    184c:	df 93       	push	r29
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
    184e:	0f b6       	in	r0, 0x3f	; 63
    1850:	f8 94       	cli
    1852:	0f 92       	push	r0
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
    1854:	40 91 8f 06 	lds	r20, 0x068F	; 0x80068f <xTickCount>
    1858:	50 91 90 06 	lds	r21, 0x0690	; 0x800690 <xTickCount+0x1>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    185c:	ec 01       	movw	r28, r24
    185e:	29 81       	ldd	r18, Y+1	; 0x01
    1860:	3a 81       	ldd	r19, Y+2	; 0x02
    1862:	da 01       	movw	r26, r20
    1864:	a2 1b       	sub	r26, r18
    1866:	b3 0b       	sbc	r27, r19
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    1868:	f8 81       	ld	r31, Y
    186a:	e0 91 89 06 	lds	r30, 0x0689	; 0x800689 <xNumOfOverflows>
    186e:	fe 17       	cp	r31, r30
    1870:	41 f0       	breq	.+16     	; 0x1882 <xTaskCheckForTimeOut+0x38>
    1872:	42 17       	cp	r20, r18
    1874:	53 07       	cpc	r21, r19
    1876:	28 f0       	brcs	.+10     	; 0x1882 <xTaskCheckForTimeOut+0x38>
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
            *pxTicksToWait = ( TickType_t ) 0;
    1878:	fb 01       	movw	r30, r22
    187a:	11 82       	std	Z+1, r1	; 0x01
    187c:	10 82       	st	Z, r1
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
    187e:	81 e0       	ldi	r24, 0x01	; 1
            *pxTicksToWait = ( TickType_t ) 0;
    1880:	11 c0       	rjmp	.+34     	; 0x18a4 <xTaskCheckForTimeOut+0x5a>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    1882:	eb 01       	movw	r28, r22
    1884:	28 81       	ld	r18, Y
    1886:	39 81       	ldd	r19, Y+1	; 0x01
    1888:	a2 17       	cp	r26, r18
    188a:	b3 07       	cpc	r27, r19
    188c:	40 f4       	brcc	.+16     	; 0x189e <xTaskCheckForTimeOut+0x54>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
    188e:	2a 1b       	sub	r18, r26
    1890:	3b 0b       	sbc	r19, r27
    1892:	39 83       	std	Y+1, r19	; 0x01
    1894:	28 83       	st	Y, r18
            vTaskInternalSetTimeOutState( pxTimeOut );
    1896:	0e 94 1a 0c 	call	0x1834	; 0x1834 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	03 c0       	rjmp	.+6      	; 0x18a4 <xTaskCheckForTimeOut+0x5a>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
    189e:	19 82       	std	Y+1, r1	; 0x01
    18a0:	18 82       	st	Y, r1
            xReturn = pdTRUE;
    18a2:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    taskEXIT_CRITICAL();
    18a4:	0f 90       	pop	r0
    18a6:	0f be       	out	0x3f, r0	; 63

    return xReturn;
}
    18a8:	df 91       	pop	r29
    18aa:	cf 91       	pop	r28
    18ac:	08 95       	ret

000018ae <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    xYieldPending = pdTRUE;
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	80 93 8a 06 	sts	0x068A, r24	; 0x80068a <xYieldPending>
    18b4:	08 95       	ret

000018b6 <__udivmodhi4>:
    18b6:	aa 1b       	sub	r26, r26
    18b8:	bb 1b       	sub	r27, r27
    18ba:	51 e1       	ldi	r21, 0x11	; 17
    18bc:	07 c0       	rjmp	.+14     	; 0x18cc <__udivmodhi4_ep>

000018be <__udivmodhi4_loop>:
    18be:	aa 1f       	adc	r26, r26
    18c0:	bb 1f       	adc	r27, r27
    18c2:	a6 17       	cp	r26, r22
    18c4:	b7 07       	cpc	r27, r23
    18c6:	10 f0       	brcs	.+4      	; 0x18cc <__udivmodhi4_ep>
    18c8:	a6 1b       	sub	r26, r22
    18ca:	b7 0b       	sbc	r27, r23

000018cc <__udivmodhi4_ep>:
    18cc:	88 1f       	adc	r24, r24
    18ce:	99 1f       	adc	r25, r25
    18d0:	5a 95       	dec	r21
    18d2:	a9 f7       	brne	.-22     	; 0x18be <__udivmodhi4_loop>
    18d4:	80 95       	com	r24
    18d6:	90 95       	com	r25
    18d8:	bc 01       	movw	r22, r24
    18da:	cd 01       	movw	r24, r26
    18dc:	08 95       	ret

000018de <memcpy>:
    18de:	fb 01       	movw	r30, r22
    18e0:	dc 01       	movw	r26, r24
    18e2:	02 c0       	rjmp	.+4      	; 0x18e8 <memcpy+0xa>
    18e4:	01 90       	ld	r0, Z+
    18e6:	0d 92       	st	X+, r0
    18e8:	41 50       	subi	r20, 0x01	; 1
    18ea:	50 40       	sbci	r21, 0x00	; 0
    18ec:	d8 f7       	brcc	.-10     	; 0x18e4 <memcpy+0x6>
    18ee:	08 95       	ret

000018f0 <_exit>:
    18f0:	f8 94       	cli

000018f2 <__stop_program>:
    18f2:	ff cf       	rjmp	.-2      	; 0x18f2 <__stop_program>
