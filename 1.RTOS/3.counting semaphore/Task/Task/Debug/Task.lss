
Task.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001996  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004c  00800060  00001996  00001a2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000064b  008000ac  008000ac  00001a76  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001a76  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001aa8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000408  00000000  00000000  00001ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004d11  00000000  00000000  00001eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001156  00000000  00000000  00006bfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002a65  00000000  00000000  00007d53  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000be4  00000000  00000000  0000a7b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001711  00000000  00000000  0000b39c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000474a  00000000  00000000  0000caad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000400  00000000  00000000  000111f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 7e 04 	jmp	0x8fc	; 0x8fc <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e9       	ldi	r30, 0x96	; 150
      68:	f9 e1       	ldi	r31, 0x19	; 25
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 3a       	cpi	r26, 0xAC	; 172
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	26 e0       	ldi	r18, 0x06	; 6
      78:	ac ea       	ldi	r26, 0xAC	; 172
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3f       	cpi	r26, 0xF7	; 247
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <main>
      8a:	0c 94 c9 0c 	jmp	0x1992	; 0x1992 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <CLCD_voidSendCommand>:
{
	/* For the second line display add 0x40 to the Address */
	u8 Local_u8Address = (Copy_u8XPosition * 0x40) + (Copy_u8YPosition);
	
	/* Set bit 7 for DDRAM Address Command then send the Command */
	CLCD2_voidSendCommand(Local_u8Address + 128);
      92:	cf 93       	push	r28
      94:	c8 2f       	mov	r28, r24
      96:	40 e0       	ldi	r20, 0x00	; 0
      98:	61 e0       	ldi	r22, 0x01	; 1
      9a:	80 e0       	ldi	r24, 0x00	; 0
      9c:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_u8WritePinValue>
      a0:	40 e0       	ldi	r20, 0x00	; 0
      a2:	61 e0       	ldi	r22, 0x01	; 1
      a4:	81 e0       	ldi	r24, 0x01	; 1
      a6:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_u8WritePinValue>
      aa:	6c 2f       	mov	r22, r28
      ac:	80 e0       	ldi	r24, 0x00	; 0
      ae:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_u8WritePortValue>
      b2:	41 e0       	ldi	r20, 0x01	; 1
      b4:	61 e0       	ldi	r22, 0x01	; 1
      b6:	82 e0       	ldi	r24, 0x02	; 2
      b8:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_u8WritePinValue>
      bc:	8f e9       	ldi	r24, 0x9F	; 159
      be:	9f e0       	ldi	r25, 0x0F	; 15
      c0:	01 97       	sbiw	r24, 0x01	; 1
      c2:	f1 f7       	brne	.-4      	; 0xc0 <CLCD_voidSendCommand+0x2e>
      c4:	00 c0       	rjmp	.+0      	; 0xc6 <CLCD_voidSendCommand+0x34>
      c6:	00 00       	nop
      c8:	40 e0       	ldi	r20, 0x00	; 0
      ca:	61 e0       	ldi	r22, 0x01	; 1
      cc:	82 e0       	ldi	r24, 0x02	; 2
      ce:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_u8WritePinValue>
      d2:	cf 91       	pop	r28
      d4:	08 95       	ret

000000d6 <CLCD_voidInit>:
      d6:	2f ef       	ldi	r18, 0xFF	; 255
      d8:	89 ef       	ldi	r24, 0xF9	; 249
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	21 50       	subi	r18, 0x01	; 1
      de:	80 40       	sbci	r24, 0x00	; 0
      e0:	90 40       	sbci	r25, 0x00	; 0
      e2:	e1 f7       	brne	.-8      	; 0xdc <CLCD_voidInit+0x6>
      e4:	00 c0       	rjmp	.+0      	; 0xe6 <CLCD_voidInit+0x10>
      e6:	00 00       	nop
      e8:	88 e3       	ldi	r24, 0x38	; 56
      ea:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>
      ee:	8c e0       	ldi	r24, 0x0C	; 12
      f0:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>
      f4:	81 e0       	ldi	r24, 0x01	; 1
      f6:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>
      fa:	08 95       	ret

000000fc <CLCD_voidSendData>:
      fc:	cf 93       	push	r28
      fe:	c8 2f       	mov	r28, r24
     100:	41 e0       	ldi	r20, 0x01	; 1
     102:	61 e0       	ldi	r22, 0x01	; 1
     104:	80 e0       	ldi	r24, 0x00	; 0
     106:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_u8WritePinValue>
     10a:	40 e0       	ldi	r20, 0x00	; 0
     10c:	61 e0       	ldi	r22, 0x01	; 1
     10e:	81 e0       	ldi	r24, 0x01	; 1
     110:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_u8WritePinValue>
     114:	6c 2f       	mov	r22, r28
     116:	80 e0       	ldi	r24, 0x00	; 0
     118:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_u8WritePortValue>
     11c:	41 e0       	ldi	r20, 0x01	; 1
     11e:	61 e0       	ldi	r22, 0x01	; 1
     120:	82 e0       	ldi	r24, 0x02	; 2
     122:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_u8WritePinValue>
     126:	8f e9       	ldi	r24, 0x9F	; 159
     128:	9f e0       	ldi	r25, 0x0F	; 15
     12a:	01 97       	sbiw	r24, 0x01	; 1
     12c:	f1 f7       	brne	.-4      	; 0x12a <CLCD_voidSendData+0x2e>
     12e:	00 c0       	rjmp	.+0      	; 0x130 <CLCD_voidSendData+0x34>
     130:	00 00       	nop
     132:	40 e0       	ldi	r20, 0x00	; 0
     134:	61 e0       	ldi	r22, 0x01	; 1
     136:	82 e0       	ldi	r24, 0x02	; 2
     138:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_u8WritePinValue>
     13c:	cf 91       	pop	r28
     13e:	08 95       	ret

00000140 <CLCD_voidSendString>:
     140:	0f 93       	push	r16
     142:	1f 93       	push	r17
     144:	cf 93       	push	r28
     146:	8c 01       	movw	r16, r24
     148:	c0 e0       	ldi	r28, 0x00	; 0
     14a:	03 c0       	rjmp	.+6      	; 0x152 <CLCD_voidSendString+0x12>
     14c:	0e 94 7e 00 	call	0xfc	; 0xfc <CLCD_voidSendData>
     150:	cf 5f       	subi	r28, 0xFF	; 255
     152:	f8 01       	movw	r30, r16
     154:	ec 0f       	add	r30, r28
     156:	f1 1d       	adc	r31, r1
     158:	80 81       	ld	r24, Z
     15a:	81 11       	cpse	r24, r1
     15c:	f7 cf       	rjmp	.-18     	; 0x14c <CLCD_voidSendString+0xc>
     15e:	cf 91       	pop	r28
     160:	1f 91       	pop	r17
     162:	0f 91       	pop	r16
     164:	08 95       	ret

00000166 <CLCD_voidSetCursor>:
     166:	90 e4       	ldi	r25, 0x40	; 64
     168:	89 9f       	mul	r24, r25
     16a:	60 0d       	add	r22, r0
     16c:	11 24       	eor	r1, r1
     16e:	86 2f       	mov	r24, r22
     170:	80 58       	subi	r24, 0x80	; 128
     172:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>
     176:	08 95       	ret

00000178 <CLCD_voidClearDisplay>:
	
}

void CLCD_voidClearDisplay()
{
	CLCD_voidSendCommand(0b00000001);	//sending Instruction to clear the whole display
     178:	81 e0       	ldi	r24, 0x01	; 1
     17a:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>
     17e:	08 95       	ret

00000180 <DIO_u8WritePinValue>:

		                                                       
u8  DIO_u8WritePinValue(u8 Copy_u8Pin, u8 Copy_u8Port, u8 Copy_u8Value)
{	
	u8 Local_u8ErrorState=FALSE;
	if ((Copy_u8Pin < DIO_u8NumOfPins)&&(Copy_u8Port < DIO_u8NumOfPorts))
     180:	88 30       	cpi	r24, 0x08	; 8
     182:	00 f5       	brcc	.+64     	; 0x1c4 <DIO_u8WritePinValue+0x44>
     184:	64 30       	cpi	r22, 0x04	; 4
     186:	00 f5       	brcc	.+64     	; 0x1c8 <DIO_u8WritePinValue+0x48>
	{
	   ASSIGN_BIT(*DIO_u8ArrPORT[Copy_u8Port],Copy_u8Pin, Copy_u8Value);
     188:	e6 2f       	mov	r30, r22
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	ee 0f       	add	r30, r30
     18e:	ff 1f       	adc	r31, r31
     190:	ed 59       	subi	r30, 0x9D	; 157
     192:	ff 4f       	sbci	r31, 0xFF	; 255
     194:	01 90       	ld	r0, Z+
     196:	f0 81       	ld	r31, Z
     198:	e0 2d       	mov	r30, r0
     19a:	90 81       	ld	r25, Z
     19c:	21 e0       	ldi	r18, 0x01	; 1
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	08 2e       	mov	r0, r24
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DIO_u8WritePinValue+0x28>
     1a4:	22 0f       	add	r18, r18
     1a6:	33 1f       	adc	r19, r19
     1a8:	0a 94       	dec	r0
     1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <DIO_u8WritePinValue+0x24>
     1ac:	50 e0       	ldi	r21, 0x00	; 0
     1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_u8WritePinValue+0x34>
     1b0:	44 0f       	add	r20, r20
     1b2:	55 1f       	adc	r21, r21
     1b4:	8a 95       	dec	r24
     1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_u8WritePinValue+0x30>
     1b8:	20 95       	com	r18
     1ba:	29 23       	and	r18, r25
     1bc:	42 2b       	or	r20, r18
     1be:	40 83       	st	Z, r20
	   Local_u8ErrorState=TRUE;
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	08 95       	ret


		                                                       
u8  DIO_u8WritePinValue(u8 Copy_u8Pin, u8 Copy_u8Port, u8 Copy_u8Value)
{	
	u8 Local_u8ErrorState=FALSE;
     1c4:	80 e0       	ldi	r24, 0x00	; 0
     1c6:	08 95       	ret
     1c8:	80 e0       	ldi	r24, 0x00	; 0
	   Local_u8ErrorState=TRUE;
	   
	}
		
	return Local_u8ErrorState;
}
     1ca:	08 95       	ret

000001cc <DIO_u8WritePortValue>:

u8  DIO_u8WritePortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=FALSE;
	
  if (Copy_u8Port <DIO_u8NumOfPorts)
     1cc:	84 30       	cpi	r24, 0x04	; 4
     1ce:	60 f4       	brcc	.+24     	; 0x1e8 <DIO_u8WritePortValue+0x1c>
  {
	  Assign_Reg(*DIO_u8ArrPORT[Copy_u8Port],Copy_u8Value);
     1d0:	e8 2f       	mov	r30, r24
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	ee 0f       	add	r30, r30
     1d6:	ff 1f       	adc	r31, r31
     1d8:	ed 59       	subi	r30, 0x9D	; 157
     1da:	ff 4f       	sbci	r31, 0xFF	; 255
     1dc:	01 90       	ld	r0, Z+
     1de:	f0 81       	ld	r31, Z
     1e0:	e0 2d       	mov	r30, r0
     1e2:	60 83       	st	Z, r22
	  Local_u8ErrorState=TRUE;
     1e4:	81 e0       	ldi	r24, 0x01	; 1
     1e6:	08 95       	ret
	return Local_u8ErrorState;
}

u8  DIO_u8WritePortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=FALSE;
     1e8:	80 e0       	ldi	r24, 0x00	; 0
	  Assign_Reg(*DIO_u8ArrPORT[Copy_u8Port],Copy_u8Value);
	  Local_u8ErrorState=TRUE;
  } 
  			
	return Local_u8ErrorState;
}
     1ea:	08 95       	ret

000001ec <prvHeapInit>:
    /* Ensure the heap starts on a correctly aligned boundary. */
    pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     1ec:	a1 eb       	ldi	r26, 0xB1	; 177
     1ee:	b0 e0       	ldi	r27, 0x00	; 0
     1f0:	e5 eb       	ldi	r30, 0xB5	; 181
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	11 96       	adiw	r26, 0x01	; 1
     1f6:	fc 93       	st	X, r31
     1f8:	ee 93       	st	-X, r30
    xStart.xBlockSize = ( size_t ) 0;
     1fa:	13 96       	adiw	r26, 0x03	; 3
     1fc:	1c 92       	st	X, r1
     1fe:	1e 92       	st	-X, r1
     200:	12 97       	sbiw	r26, 0x02	; 2

    /* xEnd is used to mark the end of the list of free blocks. */
    xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     202:	ad ea       	ldi	r26, 0xAD	; 173
     204:	b0 e0       	ldi	r27, 0x00	; 0
     206:	8b ed       	ldi	r24, 0xDB	; 219
     208:	95 e0       	ldi	r25, 0x05	; 5
     20a:	13 96       	adiw	r26, 0x03	; 3
     20c:	9c 93       	st	X, r25
     20e:	8e 93       	st	-X, r24
     210:	12 97       	sbiw	r26, 0x02	; 2
    xEnd.pxNextFreeBlock = NULL;
     212:	11 96       	adiw	r26, 0x01	; 1
     214:	1c 92       	st	X, r1
     216:	1e 92       	st	-X, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     218:	93 83       	std	Z+3, r25	; 0x03
     21a:	82 83       	std	Z+2, r24	; 0x02
    pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     21c:	b1 83       	std	Z+1, r27	; 0x01
     21e:	a0 83       	st	Z, r26
     220:	08 95       	ret

00000222 <pvPortMalloc>:
        pxIterator->pxNextFreeBlock = pxBlockToInsert;                                                                              \
    }
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     222:	ef 92       	push	r14
     224:	ff 92       	push	r15
     226:	0f 93       	push	r16
     228:	1f 93       	push	r17
     22a:	cf 93       	push	r28
     22c:	df 93       	push	r29
     22e:	ec 01       	movw	r28, r24
    BlockLink_t * pxNewBlockLink;
    PRIVILEGED_DATA static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
     230:	0e 94 3d 09 	call	0x127a	; 0x127a <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( xHeapHasBeenInitialised == pdFALSE )
     234:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <__data_end>
     238:	81 11       	cpse	r24, r1
     23a:	05 c0       	rjmp	.+10     	; 0x246 <pvPortMalloc+0x24>
        {
            prvHeapInit();
     23c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <prvHeapInit>
            xHeapHasBeenInitialised = pdTRUE;
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__data_end>
        }

        if( xWantedSize > 0 )
     246:	20 97       	sbiw	r28, 0x00	; 0
     248:	41 f0       	breq	.+16     	; 0x25a <pvPortMalloc+0x38>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = heapSTRUCT_SIZE + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
     24a:	cb 3f       	cpi	r28, 0xFB	; 251
     24c:	8f ef       	ldi	r24, 0xFF	; 255
     24e:	d8 07       	cpc	r29, r24
     250:	10 f4       	brcc	.+4      	; 0x256 <pvPortMalloc+0x34>
            {
                xWantedSize += xAdditionalRequiredSize;
     252:	25 96       	adiw	r28, 0x05	; 5
     254:	02 c0       	rjmp	.+4      	; 0x25a <pvPortMalloc+0x38>
            }
            else
            {
                xWantedSize = 0;
     256:	c0 e0       	ldi	r28, 0x00	; 0
     258:	d0 e0       	ldi	r29, 0x00	; 0

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
     25a:	dd 23       	and	r29, r29
     25c:	0c f4       	brge	.+2      	; 0x260 <pvPortMalloc+0x3e>
     25e:	66 c0       	rjmp	.+204    	; 0x32c <pvPortMalloc+0x10a>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     260:	20 97       	sbiw	r28, 0x00	; 0
     262:	09 f4       	brne	.+2      	; 0x266 <pvPortMalloc+0x44>
     264:	66 c0       	rjmp	.+204    	; 0x332 <pvPortMalloc+0x110>
     266:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     26a:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     26e:	2c 17       	cp	r18, r28
     270:	3d 07       	cpc	r19, r29
     272:	08 f4       	brcc	.+2      	; 0x276 <pvPortMalloc+0x54>
     274:	61 c0       	rjmp	.+194    	; 0x338 <pvPortMalloc+0x116>
            {
                /* Blocks are stored in byte order - traverse the list from the start
                 * (smallest) block until one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     276:	e0 91 b1 00 	lds	r30, 0x00B1	; 0x8000b1 <xStart>
     27a:	f0 91 b2 00 	lds	r31, 0x00B2	; 0x8000b2 <xStart+0x1>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Blocks are stored in byte order - traverse the list from the start
                 * (smallest) block until one of adequate size is found. */
                pxPreviousBlock = &xStart;
     27e:	a1 eb       	ldi	r26, 0xB1	; 177
     280:	b0 e0       	ldi	r27, 0x00	; 0
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     282:	02 c0       	rjmp	.+4      	; 0x288 <pvPortMalloc+0x66>
                {
                    pxPreviousBlock = pxBlock;
     284:	df 01       	movw	r26, r30
                    pxBlock = pxBlock->pxNextFreeBlock;
     286:	fc 01       	movw	r30, r24
                /* Blocks are stored in byte order - traverse the list from the start
                 * (smallest) block until one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     288:	82 81       	ldd	r24, Z+2	; 0x02
     28a:	93 81       	ldd	r25, Z+3	; 0x03
     28c:	8c 17       	cp	r24, r28
     28e:	9d 07       	cpc	r25, r29
     290:	20 f4       	brcc	.+8      	; 0x29a <pvPortMalloc+0x78>
     292:	80 81       	ld	r24, Z
     294:	91 81       	ldd	r25, Z+1	; 0x01
     296:	00 97       	sbiw	r24, 0x00	; 0
     298:	a9 f7       	brne	.-22     	; 0x284 <pvPortMalloc+0x62>
                    pxPreviousBlock = pxBlock;
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If we found the end marker then a block of adequate size was not found. */
                if( pxBlock != &xEnd )
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	ed 3a       	cpi	r30, 0xAD	; 173
     29e:	f8 07       	cpc	r31, r24
     2a0:	09 f4       	brne	.+2      	; 0x2a4 <pvPortMalloc+0x82>
     2a2:	4d c0       	rjmp	.+154    	; 0x33e <pvPortMalloc+0x11c>
                {
                    /* Return the memory space - jumping over the BlockLink_t structure
                     * at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
     2a4:	0d 91       	ld	r16, X+
     2a6:	1c 91       	ld	r17, X
     2a8:	11 97       	sbiw	r26, 0x01	; 1
     2aa:	0c 5f       	subi	r16, 0xFC	; 252
     2ac:	1f 4f       	sbci	r17, 0xFF	; 255

                    /* This block is being returned for use so must be taken out of the
                     * list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     2ae:	80 81       	ld	r24, Z
     2b0:	91 81       	ldd	r25, Z+1	; 0x01
     2b2:	8d 93       	st	X+, r24
     2b4:	9c 93       	st	X, r25

                    /* If the block is larger than required it can be split into two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     2b6:	82 81       	ldd	r24, Z+2	; 0x02
     2b8:	93 81       	ldd	r25, Z+3	; 0x03
     2ba:	8c 1b       	sub	r24, r28
     2bc:	9d 0b       	sbc	r25, r29
     2be:	89 30       	cpi	r24, 0x09	; 9
     2c0:	91 05       	cpc	r25, r1
     2c2:	30 f1       	brcs	.+76     	; 0x310 <pvPortMalloc+0xee>
                    {
                        /* This block is to be split into two.  Create a new block
                         * following the number of bytes requested. The void cast is
                         * used to prevent byte alignment warnings from the compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     2c4:	bf 01       	movw	r22, r30
     2c6:	6c 0f       	add	r22, r28
     2c8:	7d 1f       	adc	r23, r29

                        /* Calculate the sizes of two blocks split from the single
                         * block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     2ca:	db 01       	movw	r26, r22
     2cc:	13 96       	adiw	r26, 0x03	; 3
     2ce:	9c 93       	st	X, r25
     2d0:	8e 93       	st	-X, r24
     2d2:	12 97       	sbiw	r26, 0x02	; 2
                        pxBlock->xBlockSize = xWantedSize;
     2d4:	d3 83       	std	Z+3, r29	; 0x03
     2d6:	c2 83       	std	Z+2, r28	; 0x02

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
     2d8:	12 96       	adiw	r26, 0x02	; 2
     2da:	4d 91       	ld	r20, X+
     2dc:	5c 91       	ld	r21, X
     2de:	13 97       	sbiw	r26, 0x03	; 3
     2e0:	0f 2e       	mov	r0, r31
     2e2:	f1 eb       	ldi	r31, 0xB1	; 177
     2e4:	ef 2e       	mov	r14, r31
     2e6:	f0 e0       	ldi	r31, 0x00	; 0
     2e8:	ff 2e       	mov	r15, r31
     2ea:	f0 2d       	mov	r31, r0
     2ec:	01 c0       	rjmp	.+2      	; 0x2f0 <pvPortMalloc+0xce>
     2ee:	7d 01       	movw	r14, r26
     2f0:	e7 01       	movw	r28, r14
     2f2:	a8 81       	ld	r26, Y
     2f4:	b9 81       	ldd	r27, Y+1	; 0x01
     2f6:	12 96       	adiw	r26, 0x02	; 2
     2f8:	8d 91       	ld	r24, X+
     2fa:	9c 91       	ld	r25, X
     2fc:	13 97       	sbiw	r26, 0x03	; 3
     2fe:	84 17       	cp	r24, r20
     300:	95 07       	cpc	r25, r21
     302:	a8 f3       	brcs	.-22     	; 0x2ee <pvPortMalloc+0xcc>
     304:	eb 01       	movw	r28, r22
     306:	b9 83       	std	Y+1, r27	; 0x01
     308:	a8 83       	st	Y, r26
     30a:	d7 01       	movw	r26, r14
     30c:	6d 93       	st	X+, r22
     30e:	7c 93       	st	X, r23
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     310:	82 81       	ldd	r24, Z+2	; 0x02
     312:	93 81       	ldd	r25, Z+3	; 0x03
     314:	28 1b       	sub	r18, r24
     316:	39 0b       	sbc	r19, r25
     318:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     31c:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
     320:	90 68       	ori	r25, 0x80	; 128
     322:	93 83       	std	Z+3, r25	; 0x03
     324:	82 83       	std	Z+2, r24	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     326:	11 82       	std	Z+1, r1	; 0x01
     328:	10 82       	st	Z, r1
     32a:	0b c0       	rjmp	.+22     	; 0x342 <pvPortMalloc+0x120>
{
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    PRIVILEGED_DATA static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;
     32c:	00 e0       	ldi	r16, 0x00	; 0
     32e:	10 e0       	ldi	r17, 0x00	; 0
     330:	08 c0       	rjmp	.+16     	; 0x342 <pvPortMalloc+0x120>
     332:	00 e0       	ldi	r16, 0x00	; 0
     334:	10 e0       	ldi	r17, 0x00	; 0
     336:	05 c0       	rjmp	.+10     	; 0x342 <pvPortMalloc+0x120>
     338:	00 e0       	ldi	r16, 0x00	; 0
     33a:	10 e0       	ldi	r17, 0x00	; 0
     33c:	02 c0       	rjmp	.+4      	; 0x342 <pvPortMalloc+0x120>
     33e:	00 e0       	ldi	r16, 0x00	; 0
     340:	10 e0       	ldi	r17, 0x00	; 0
            }
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     342:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <xTaskResumeAll>
        }
    }
    #endif

    return pvReturn;
}
     346:	c8 01       	movw	r24, r16
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	1f 91       	pop	r17
     34e:	0f 91       	pop	r16
     350:	ff 90       	pop	r15
     352:	ef 90       	pop	r14
     354:	08 95       	ret

00000356 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     356:	ef 92       	push	r14
     358:	ff 92       	push	r15
     35a:	0f 93       	push	r16
     35c:	1f 93       	push	r17
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     362:	00 97       	sbiw	r24, 0x00	; 0
     364:	b9 f1       	breq	.+110    	; 0x3d4 <vPortFree+0x7e>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= heapSTRUCT_SIZE;
     366:	ec 01       	movw	r28, r24
     368:	24 97       	sbiw	r28, 0x04	; 4
        pxLink = ( void * ) puc;

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
     36a:	2a 81       	ldd	r18, Y+2	; 0x02
     36c:	3b 81       	ldd	r19, Y+3	; 0x03
     36e:	33 23       	and	r19, r19
     370:	8c f5       	brge	.+98     	; 0x3d4 <vPortFree+0x7e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     372:	48 81       	ld	r20, Y
     374:	59 81       	ldd	r21, Y+1	; 0x01
     376:	45 2b       	or	r20, r21
     378:	69 f5       	brne	.+90     	; 0x3d4 <vPortFree+0x7e>
     37a:	8c 01       	movw	r16, r24
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
     37c:	3f 77       	andi	r19, 0x7F	; 127
     37e:	3b 83       	std	Y+3, r19	; 0x03
     380:	2a 83       	std	Y+2, r18	; 0x02
                {
                    ( void ) memset( puc + heapSTRUCT_SIZE, 0, pxLink->xBlockSize - heapSTRUCT_SIZE );
                }
                #endif

                vTaskSuspendAll();
     382:	0e 94 3d 09 	call	0x127a	; 0x127a <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     386:	2a 81       	ldd	r18, Y+2	; 0x02
     388:	3b 81       	ldd	r19, Y+3	; 0x03
     38a:	41 eb       	ldi	r20, 0xB1	; 177
     38c:	50 e0       	ldi	r21, 0x00	; 0
     38e:	01 c0       	rjmp	.+2      	; 0x392 <vPortFree+0x3c>
     390:	af 01       	movw	r20, r30
     392:	da 01       	movw	r26, r20
     394:	ed 91       	ld	r30, X+
     396:	fc 91       	ld	r31, X
     398:	82 81       	ldd	r24, Z+2	; 0x02
     39a:	93 81       	ldd	r25, Z+3	; 0x03
     39c:	82 17       	cp	r24, r18
     39e:	93 07       	cpc	r25, r19
     3a0:	b8 f3       	brcs	.-18     	; 0x390 <vPortFree+0x3a>
     3a2:	c8 01       	movw	r24, r16
     3a4:	04 97       	sbiw	r24, 0x04	; 4
     3a6:	dc 01       	movw	r26, r24
     3a8:	11 96       	adiw	r26, 0x01	; 1
     3aa:	fc 93       	st	X, r31
     3ac:	ee 93       	st	-X, r30
     3ae:	fa 01       	movw	r30, r20
     3b0:	d1 83       	std	Z+1, r29	; 0x01
     3b2:	c0 83       	st	Z, r28
                    xFreeBytesRemaining += pxLink->xBlockSize;
     3b4:	12 96       	adiw	r26, 0x02	; 2
     3b6:	8d 91       	ld	r24, X+
     3b8:	9c 91       	ld	r25, X
     3ba:	13 97       	sbiw	r26, 0x03	; 3
     3bc:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     3c0:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     3c4:	82 0f       	add	r24, r18
     3c6:	93 1f       	adc	r25, r19
     3c8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     3cc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
                    traceFREE( pv, pxLink->xBlockSize );
                }
                ( void ) xTaskResumeAll();
     3d0:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <xTaskResumeAll>
            }
        }
    }
}
     3d4:	df 91       	pop	r29
     3d6:	cf 91       	pop	r28
     3d8:	1f 91       	pop	r17
     3da:	0f 91       	pop	r16
     3dc:	ff 90       	pop	r15
     3de:	ef 90       	pop	r14
     3e0:	08 95       	ret

000003e2 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     3e2:	fc 01       	movw	r30, r24
     3e4:	03 96       	adiw	r24, 0x03	; 3
     3e6:	92 83       	std	Z+2, r25	; 0x02
     3e8:	81 83       	std	Z+1, r24	; 0x01
     3ea:	2f ef       	ldi	r18, 0xFF	; 255
     3ec:	3f ef       	ldi	r19, 0xFF	; 255
     3ee:	34 83       	std	Z+4, r19	; 0x04
     3f0:	23 83       	std	Z+3, r18	; 0x03
     3f2:	96 83       	std	Z+6, r25	; 0x06
     3f4:	85 83       	std	Z+5, r24	; 0x05
     3f6:	90 87       	std	Z+8, r25	; 0x08
     3f8:	87 83       	std	Z+7, r24	; 0x07
     3fa:	10 82       	st	Z, r1
     3fc:	08 95       	ret

000003fe <vListInitialiseItem>:
     3fe:	fc 01       	movw	r30, r24
     400:	11 86       	std	Z+9, r1	; 0x09
     402:	10 86       	std	Z+8, r1	; 0x08
     404:	08 95       	ret

00000406 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     40c:	48 81       	ld	r20, Y
     40e:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     410:	4f 3f       	cpi	r20, 0xFF	; 255
     412:	2f ef       	ldi	r18, 0xFF	; 255
     414:	52 07       	cpc	r21, r18
     416:	21 f4       	brne	.+8      	; 0x420 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     418:	fc 01       	movw	r30, r24
     41a:	a7 81       	ldd	r26, Z+7	; 0x07
     41c:	b0 85       	ldd	r27, Z+8	; 0x08
     41e:	0d c0       	rjmp	.+26     	; 0x43a <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     420:	dc 01       	movw	r26, r24
     422:	13 96       	adiw	r26, 0x03	; 3
     424:	01 c0       	rjmp	.+2      	; 0x428 <vListInsert+0x22>
     426:	df 01       	movw	r26, r30
     428:	12 96       	adiw	r26, 0x02	; 2
     42a:	ed 91       	ld	r30, X+
     42c:	fc 91       	ld	r31, X
     42e:	13 97       	sbiw	r26, 0x03	; 3
     430:	20 81       	ld	r18, Z
     432:	31 81       	ldd	r19, Z+1	; 0x01
     434:	42 17       	cp	r20, r18
     436:	53 07       	cpc	r21, r19
     438:	b0 f7       	brcc	.-20     	; 0x426 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     43a:	12 96       	adiw	r26, 0x02	; 2
     43c:	ed 91       	ld	r30, X+
     43e:	fc 91       	ld	r31, X
     440:	13 97       	sbiw	r26, 0x03	; 3
     442:	fb 83       	std	Y+3, r31	; 0x03
     444:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     446:	d5 83       	std	Z+5, r29	; 0x05
     448:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     44a:	bd 83       	std	Y+5, r27	; 0x05
     44c:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     44e:	13 96       	adiw	r26, 0x03	; 3
     450:	dc 93       	st	X, r29
     452:	ce 93       	st	-X, r28
     454:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     456:	99 87       	std	Y+9, r25	; 0x09
     458:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     45a:	fc 01       	movw	r30, r24
     45c:	20 81       	ld	r18, Z
     45e:	2f 5f       	subi	r18, 0xFF	; 255
     460:	20 83       	st	Z, r18
}
     462:	df 91       	pop	r29
     464:	cf 91       	pop	r28
     466:	08 95       	ret

00000468 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     468:	cf 93       	push	r28
     46a:	df 93       	push	r29
     46c:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     46e:	a0 85       	ldd	r26, Z+8	; 0x08
     470:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     472:	c2 81       	ldd	r28, Z+2	; 0x02
     474:	d3 81       	ldd	r29, Z+3	; 0x03
     476:	84 81       	ldd	r24, Z+4	; 0x04
     478:	95 81       	ldd	r25, Z+5	; 0x05
     47a:	9d 83       	std	Y+5, r25	; 0x05
     47c:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     47e:	c4 81       	ldd	r28, Z+4	; 0x04
     480:	d5 81       	ldd	r29, Z+5	; 0x05
     482:	82 81       	ldd	r24, Z+2	; 0x02
     484:	93 81       	ldd	r25, Z+3	; 0x03
     486:	9b 83       	std	Y+3, r25	; 0x03
     488:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     48a:	11 96       	adiw	r26, 0x01	; 1
     48c:	8d 91       	ld	r24, X+
     48e:	9c 91       	ld	r25, X
     490:	12 97       	sbiw	r26, 0x02	; 2
     492:	e8 17       	cp	r30, r24
     494:	f9 07       	cpc	r31, r25
     496:	31 f4       	brne	.+12     	; 0x4a4 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     498:	84 81       	ldd	r24, Z+4	; 0x04
     49a:	95 81       	ldd	r25, Z+5	; 0x05
     49c:	12 96       	adiw	r26, 0x02	; 2
     49e:	9c 93       	st	X, r25
     4a0:	8e 93       	st	-X, r24
     4a2:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     4a4:	11 86       	std	Z+9, r1	; 0x09
     4a6:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     4a8:	8c 91       	ld	r24, X
     4aa:	81 50       	subi	r24, 0x01	; 1
     4ac:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     4ae:	8c 91       	ld	r24, X
}
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	08 95       	ret

000004b6 <LCD_1>:
    }
}

void LCD_1(void *PV)
{
    xSemaphoreGive(xCSemaphore_1);
     4b6:	20 e0       	ldi	r18, 0x00	; 0
     4b8:	40 e0       	ldi	r20, 0x00	; 0
     4ba:	50 e0       	ldi	r21, 0x00	; 0
     4bc:	60 e0       	ldi	r22, 0x00	; 0
     4be:	70 e0       	ldi	r23, 0x00	; 0
     4c0:	80 91 97 06 	lds	r24, 0x0697	; 0x800697 <xCSemaphore_1>
     4c4:	90 91 98 06 	lds	r25, 0x0698	; 0x800698 <xCSemaphore_1+0x1>
     4c8:	0e 94 ee 05 	call	0xbdc	; 0xbdc <xQueueGenericSend>
	while(1)
	{
		if (xSemaphoreTake( xCSemaphore_1, 100 ) == pdTRUE)
     4cc:	64 e6       	ldi	r22, 0x64	; 100
     4ce:	70 e0       	ldi	r23, 0x00	; 0
     4d0:	80 91 97 06 	lds	r24, 0x0697	; 0x800697 <xCSemaphore_1>
     4d4:	90 91 98 06 	lds	r25, 0x0698	; 0x800698 <xCSemaphore_1+0x1>
     4d8:	0e 94 80 06 	call	0xd00	; 0xd00 <xQueueSemaphoreTake>
     4dc:	81 30       	cpi	r24, 0x01	; 1
     4de:	b1 f7       	brne	.-20     	; 0x4cc <LCD_1+0x16>
		{
			CLCD_voidClearDisplay();
     4e0:	0e 94 bc 00 	call	0x178	; 0x178 <CLCD_voidClearDisplay>
			CLCD_voidSendString("TASK 1 is On ");
     4e4:	8b e6       	ldi	r24, 0x6B	; 107
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	0e 94 a0 00 	call	0x140	; 0x140 <CLCD_voidSendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4ec:	2f ef       	ldi	r18, 0xFF	; 255
     4ee:	83 ed       	ldi	r24, 0xD3	; 211
     4f0:	90 e3       	ldi	r25, 0x30	; 48
     4f2:	21 50       	subi	r18, 0x01	; 1
     4f4:	80 40       	sbci	r24, 0x00	; 0
     4f6:	90 40       	sbci	r25, 0x00	; 0
     4f8:	e1 f7       	brne	.-8      	; 0x4f2 <LCD_1+0x3c>
     4fa:	00 c0       	rjmp	.+0      	; 0x4fc <LCD_1+0x46>
     4fc:	00 00       	nop
			_delay_ms(2000);
			xSemaphoreGive(xCSemaphore_1); // release the semaphore
     4fe:	20 e0       	ldi	r18, 0x00	; 0
     500:	40 e0       	ldi	r20, 0x00	; 0
     502:	50 e0       	ldi	r21, 0x00	; 0
     504:	60 e0       	ldi	r22, 0x00	; 0
     506:	70 e0       	ldi	r23, 0x00	; 0
     508:	80 91 97 06 	lds	r24, 0x0697	; 0x800697 <xCSemaphore_1>
     50c:	90 91 98 06 	lds	r25, 0x0698	; 0x800698 <xCSemaphore_1+0x1>
     510:	0e 94 ee 05 	call	0xbdc	; 0xbdc <xQueueGenericSend>
			vTaskDelay(500);
     514:	84 ef       	ldi	r24, 0xF4	; 244
     516:	91 e0       	ldi	r25, 0x01	; 1
     518:	0e 94 32 0b 	call	0x1664	; 0x1664 <vTaskDelay>
     51c:	d7 cf       	rjmp	.-82     	; 0x4cc <LCD_1+0x16>

0000051e <LCD_2>:
void LCD_2(void *PV)
{

	while(1)
	{
		if (xSemaphoreTake( xCSemaphore_1, 100 ) == pdTRUE)
     51e:	64 e6       	ldi	r22, 0x64	; 100
     520:	70 e0       	ldi	r23, 0x00	; 0
     522:	80 91 97 06 	lds	r24, 0x0697	; 0x800697 <xCSemaphore_1>
     526:	90 91 98 06 	lds	r25, 0x0698	; 0x800698 <xCSemaphore_1+0x1>
     52a:	0e 94 80 06 	call	0xd00	; 0xd00 <xQueueSemaphoreTake>
     52e:	81 30       	cpi	r24, 0x01	; 1
     530:	b1 f7       	brne	.-20     	; 0x51e <LCD_2>
		{
			CLCD_voidClearDisplay();
     532:	0e 94 bc 00 	call	0x178	; 0x178 <CLCD_voidClearDisplay>
			CLCD_voidSendString("TASK 2 is On ");
     536:	89 e7       	ldi	r24, 0x79	; 121
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	0e 94 a0 00 	call	0x140	; 0x140 <CLCD_voidSendString>
     53e:	2f ef       	ldi	r18, 0xFF	; 255
     540:	83 ed       	ldi	r24, 0xD3	; 211
     542:	90 e3       	ldi	r25, 0x30	; 48
     544:	21 50       	subi	r18, 0x01	; 1
     546:	80 40       	sbci	r24, 0x00	; 0
     548:	90 40       	sbci	r25, 0x00	; 0
     54a:	e1 f7       	brne	.-8      	; 0x544 <LCD_2+0x26>
     54c:	00 c0       	rjmp	.+0      	; 0x54e <LCD_2+0x30>
     54e:	00 00       	nop
			_delay_ms(2000);
			xSemaphoreGive(xCSemaphore_1); // release the semaphore
     550:	20 e0       	ldi	r18, 0x00	; 0
     552:	40 e0       	ldi	r20, 0x00	; 0
     554:	50 e0       	ldi	r21, 0x00	; 0
     556:	60 e0       	ldi	r22, 0x00	; 0
     558:	70 e0       	ldi	r23, 0x00	; 0
     55a:	80 91 97 06 	lds	r24, 0x0697	; 0x800697 <xCSemaphore_1>
     55e:	90 91 98 06 	lds	r25, 0x0698	; 0x800698 <xCSemaphore_1+0x1>
     562:	0e 94 ee 05 	call	0xbdc	; 0xbdc <xQueueGenericSend>
			vTaskDelay(500);
     566:	84 ef       	ldi	r24, 0xF4	; 244
     568:	91 e0       	ldi	r25, 0x01	; 1
     56a:	0e 94 32 0b 	call	0x1664	; 0x1664 <vTaskDelay>
     56e:	d7 cf       	rjmp	.-82     	; 0x51e <LCD_2>

00000570 <LCD_3>:
void LCD_3(void *PV)
{

	while(1)
	{
		if (xSemaphoreTake( xCSemaphore_1, 100 ) == pdTRUE)
     570:	64 e6       	ldi	r22, 0x64	; 100
     572:	70 e0       	ldi	r23, 0x00	; 0
     574:	80 91 97 06 	lds	r24, 0x0697	; 0x800697 <xCSemaphore_1>
     578:	90 91 98 06 	lds	r25, 0x0698	; 0x800698 <xCSemaphore_1+0x1>
     57c:	0e 94 80 06 	call	0xd00	; 0xd00 <xQueueSemaphoreTake>
     580:	81 30       	cpi	r24, 0x01	; 1
     582:	b1 f7       	brne	.-20     	; 0x570 <LCD_3>
		{
			CLCD_voidClearDisplay();
     584:	0e 94 bc 00 	call	0x178	; 0x178 <CLCD_voidClearDisplay>
			CLCD_voidSendString("TASK 3 is On ");
     588:	87 e8       	ldi	r24, 0x87	; 135
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	0e 94 a0 00 	call	0x140	; 0x140 <CLCD_voidSendString>
     590:	2f ef       	ldi	r18, 0xFF	; 255
     592:	83 ed       	ldi	r24, 0xD3	; 211
     594:	90 e3       	ldi	r25, 0x30	; 48
     596:	21 50       	subi	r18, 0x01	; 1
     598:	80 40       	sbci	r24, 0x00	; 0
     59a:	90 40       	sbci	r25, 0x00	; 0
     59c:	e1 f7       	brne	.-8      	; 0x596 <LCD_3+0x26>
     59e:	00 c0       	rjmp	.+0      	; 0x5a0 <LCD_3+0x30>
     5a0:	00 00       	nop
			_delay_ms(2000);
			xSemaphoreGive(xCSemaphore_1); // release the semaphore
     5a2:	20 e0       	ldi	r18, 0x00	; 0
     5a4:	40 e0       	ldi	r20, 0x00	; 0
     5a6:	50 e0       	ldi	r21, 0x00	; 0
     5a8:	60 e0       	ldi	r22, 0x00	; 0
     5aa:	70 e0       	ldi	r23, 0x00	; 0
     5ac:	80 91 97 06 	lds	r24, 0x0697	; 0x800697 <xCSemaphore_1>
     5b0:	90 91 98 06 	lds	r25, 0x0698	; 0x800698 <xCSemaphore_1+0x1>
     5b4:	0e 94 ee 05 	call	0xbdc	; 0xbdc <xQueueGenericSend>
			vTaskDelay(500);
     5b8:	84 ef       	ldi	r24, 0xF4	; 244
     5ba:	91 e0       	ldi	r25, 0x01	; 1
     5bc:	0e 94 32 0b 	call	0x1664	; 0x1664 <vTaskDelay>
     5c0:	d7 cf       	rjmp	.-82     	; 0x570 <LCD_3>

000005c2 <main>:
void LCD_3(void *PV);


int main(void)
{
	PORT_voidInit();
     5c2:	0e 94 81 04 	call	0x902	; 0x902 <PORT_voidInit>
	CLCD_voidInit();
     5c6:	0e 94 6b 00 	call	0xd6	; 0xd6 <CLCD_voidInit>
	CLCD_voidSetCursor(1,0);
     5ca:	60 e0       	ldi	r22, 0x00	; 0
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	0e 94 b3 00 	call	0x166	; 0x166 <CLCD_voidSetCursor>

	
	xCSemaphore_1 =xSemaphoreCreateCounting(2,0);
     5d2:	60 e0       	ldi	r22, 0x00	; 0
     5d4:	82 e0       	ldi	r24, 0x02	; 2
     5d6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <xQueueCreateCountingSemaphore>
     5da:	90 93 98 06 	sts	0x0698, r25	; 0x800698 <xCSemaphore_1+0x1>
     5de:	80 93 97 06 	sts	0x0697, r24	; 0x800697 <xCSemaphore_1>
	
	
	xTaskCreate(LCD_1,"LCD_1",100,NULL,1,&Task1Handler);
     5e2:	0f 2e       	mov	r0, r31
     5e4:	f5 e9       	ldi	r31, 0x95	; 149
     5e6:	ef 2e       	mov	r14, r31
     5e8:	f6 e0       	ldi	r31, 0x06	; 6
     5ea:	ff 2e       	mov	r15, r31
     5ec:	f0 2d       	mov	r31, r0
     5ee:	01 e0       	ldi	r16, 0x01	; 1
     5f0:	20 e0       	ldi	r18, 0x00	; 0
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	44 e6       	ldi	r20, 0x64	; 100
     5f6:	50 e0       	ldi	r21, 0x00	; 0
     5f8:	65 e9       	ldi	r22, 0x95	; 149
     5fa:	70 e0       	ldi	r23, 0x00	; 0
     5fc:	8b e5       	ldi	r24, 0x5B	; 91
     5fe:	92 e0       	ldi	r25, 0x02	; 2
     600:	0e 94 b8 08 	call	0x1170	; 0x1170 <xTaskCreate>
	xTaskCreate(LCD_2,"LCD_2",100,NULL,1,&Task2Handler);
     604:	0f 2e       	mov	r0, r31
     606:	f3 e9       	ldi	r31, 0x93	; 147
     608:	ef 2e       	mov	r14, r31
     60a:	f6 e0       	ldi	r31, 0x06	; 6
     60c:	ff 2e       	mov	r15, r31
     60e:	f0 2d       	mov	r31, r0
     610:	20 e0       	ldi	r18, 0x00	; 0
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	44 e6       	ldi	r20, 0x64	; 100
     616:	50 e0       	ldi	r21, 0x00	; 0
     618:	6b e9       	ldi	r22, 0x9B	; 155
     61a:	70 e0       	ldi	r23, 0x00	; 0
     61c:	8f e8       	ldi	r24, 0x8F	; 143
     61e:	92 e0       	ldi	r25, 0x02	; 2
     620:	0e 94 b8 08 	call	0x1170	; 0x1170 <xTaskCreate>
	xTaskCreate(LCD_3,"LCD_3",100,NULL,1,&Task3Handler);
     624:	0f 2e       	mov	r0, r31
     626:	f1 e9       	ldi	r31, 0x91	; 145
     628:	ef 2e       	mov	r14, r31
     62a:	f6 e0       	ldi	r31, 0x06	; 6
     62c:	ff 2e       	mov	r15, r31
     62e:	f0 2d       	mov	r31, r0
     630:	20 e0       	ldi	r18, 0x00	; 0
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	44 e6       	ldi	r20, 0x64	; 100
     636:	50 e0       	ldi	r21, 0x00	; 0
     638:	61 ea       	ldi	r22, 0xA1	; 161
     63a:	70 e0       	ldi	r23, 0x00	; 0
     63c:	88 eb       	ldi	r24, 0xB8	; 184
     63e:	92 e0       	ldi	r25, 0x02	; 2
     640:	0e 94 b8 08 	call	0x1170	; 0x1170 <xTaskCreate>
	/*start OS*/
	vTaskStartScheduler();
     644:	0e 94 11 09 	call	0x1222	; 0x1222 <vTaskStartScheduler>
     648:	ff cf       	rjmp	.-2      	; 0x648 <main+0x86>

0000064a <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     64a:	1b bc       	out	0x2b, r1	; 43
     64c:	8c e7       	ldi	r24, 0x7C	; 124
     64e:	8a bd       	out	0x2a, r24	; 42
     650:	8b e0       	ldi	r24, 0x0B	; 11
     652:	8e bd       	out	0x2e, r24	; 46
     654:	89 b7       	in	r24, 0x39	; 57
     656:	80 61       	ori	r24, 0x10	; 16
     658:	89 bf       	out	0x39, r24	; 57
     65a:	08 95       	ret

0000065c <pxPortInitialiseStack>:
     65c:	31 e1       	ldi	r19, 0x11	; 17
     65e:	fc 01       	movw	r30, r24
     660:	30 83       	st	Z, r19
     662:	31 97       	sbiw	r30, 0x01	; 1
     664:	22 e2       	ldi	r18, 0x22	; 34
     666:	20 83       	st	Z, r18
     668:	31 97       	sbiw	r30, 0x01	; 1
     66a:	a3 e3       	ldi	r26, 0x33	; 51
     66c:	a0 83       	st	Z, r26
     66e:	31 97       	sbiw	r30, 0x01	; 1
     670:	60 83       	st	Z, r22
     672:	31 97       	sbiw	r30, 0x01	; 1
     674:	70 83       	st	Z, r23
     676:	31 97       	sbiw	r30, 0x01	; 1
     678:	10 82       	st	Z, r1
     67a:	31 97       	sbiw	r30, 0x01	; 1
     67c:	60 e8       	ldi	r22, 0x80	; 128
     67e:	60 83       	st	Z, r22
     680:	31 97       	sbiw	r30, 0x01	; 1
     682:	10 82       	st	Z, r1
     684:	31 97       	sbiw	r30, 0x01	; 1
     686:	62 e0       	ldi	r22, 0x02	; 2
     688:	60 83       	st	Z, r22
     68a:	31 97       	sbiw	r30, 0x01	; 1
     68c:	63 e0       	ldi	r22, 0x03	; 3
     68e:	60 83       	st	Z, r22
     690:	31 97       	sbiw	r30, 0x01	; 1
     692:	64 e0       	ldi	r22, 0x04	; 4
     694:	60 83       	st	Z, r22
     696:	31 97       	sbiw	r30, 0x01	; 1
     698:	65 e0       	ldi	r22, 0x05	; 5
     69a:	60 83       	st	Z, r22
     69c:	31 97       	sbiw	r30, 0x01	; 1
     69e:	66 e0       	ldi	r22, 0x06	; 6
     6a0:	60 83       	st	Z, r22
     6a2:	31 97       	sbiw	r30, 0x01	; 1
     6a4:	67 e0       	ldi	r22, 0x07	; 7
     6a6:	60 83       	st	Z, r22
     6a8:	31 97       	sbiw	r30, 0x01	; 1
     6aa:	68 e0       	ldi	r22, 0x08	; 8
     6ac:	60 83       	st	Z, r22
     6ae:	31 97       	sbiw	r30, 0x01	; 1
     6b0:	69 e0       	ldi	r22, 0x09	; 9
     6b2:	60 83       	st	Z, r22
     6b4:	31 97       	sbiw	r30, 0x01	; 1
     6b6:	60 e1       	ldi	r22, 0x10	; 16
     6b8:	60 83       	st	Z, r22
     6ba:	31 97       	sbiw	r30, 0x01	; 1
     6bc:	30 83       	st	Z, r19
     6be:	31 97       	sbiw	r30, 0x01	; 1
     6c0:	32 e1       	ldi	r19, 0x12	; 18
     6c2:	30 83       	st	Z, r19
     6c4:	31 97       	sbiw	r30, 0x01	; 1
     6c6:	33 e1       	ldi	r19, 0x13	; 19
     6c8:	30 83       	st	Z, r19
     6ca:	31 97       	sbiw	r30, 0x01	; 1
     6cc:	34 e1       	ldi	r19, 0x14	; 20
     6ce:	30 83       	st	Z, r19
     6d0:	31 97       	sbiw	r30, 0x01	; 1
     6d2:	35 e1       	ldi	r19, 0x15	; 21
     6d4:	30 83       	st	Z, r19
     6d6:	31 97       	sbiw	r30, 0x01	; 1
     6d8:	36 e1       	ldi	r19, 0x16	; 22
     6da:	30 83       	st	Z, r19
     6dc:	31 97       	sbiw	r30, 0x01	; 1
     6de:	37 e1       	ldi	r19, 0x17	; 23
     6e0:	30 83       	st	Z, r19
     6e2:	31 97       	sbiw	r30, 0x01	; 1
     6e4:	38 e1       	ldi	r19, 0x18	; 24
     6e6:	30 83       	st	Z, r19
     6e8:	31 97       	sbiw	r30, 0x01	; 1
     6ea:	39 e1       	ldi	r19, 0x19	; 25
     6ec:	30 83       	st	Z, r19
     6ee:	31 97       	sbiw	r30, 0x01	; 1
     6f0:	30 e2       	ldi	r19, 0x20	; 32
     6f2:	30 83       	st	Z, r19
     6f4:	31 97       	sbiw	r30, 0x01	; 1
     6f6:	31 e2       	ldi	r19, 0x21	; 33
     6f8:	30 83       	st	Z, r19
     6fa:	31 97       	sbiw	r30, 0x01	; 1
     6fc:	20 83       	st	Z, r18
     6fe:	31 97       	sbiw	r30, 0x01	; 1
     700:	23 e2       	ldi	r18, 0x23	; 35
     702:	20 83       	st	Z, r18
     704:	31 97       	sbiw	r30, 0x01	; 1
     706:	40 83       	st	Z, r20
     708:	31 97       	sbiw	r30, 0x01	; 1
     70a:	50 83       	st	Z, r21
     70c:	31 97       	sbiw	r30, 0x01	; 1
     70e:	26 e2       	ldi	r18, 0x26	; 38
     710:	20 83       	st	Z, r18
     712:	31 97       	sbiw	r30, 0x01	; 1
     714:	27 e2       	ldi	r18, 0x27	; 39
     716:	20 83       	st	Z, r18
     718:	31 97       	sbiw	r30, 0x01	; 1
     71a:	28 e2       	ldi	r18, 0x28	; 40
     71c:	20 83       	st	Z, r18
     71e:	31 97       	sbiw	r30, 0x01	; 1
     720:	29 e2       	ldi	r18, 0x29	; 41
     722:	20 83       	st	Z, r18
     724:	31 97       	sbiw	r30, 0x01	; 1
     726:	20 e3       	ldi	r18, 0x30	; 48
     728:	20 83       	st	Z, r18
     72a:	31 97       	sbiw	r30, 0x01	; 1
     72c:	21 e3       	ldi	r18, 0x31	; 49
     72e:	20 83       	st	Z, r18
     730:	86 97       	sbiw	r24, 0x26	; 38
     732:	08 95       	ret

00000734 <xPortStartScheduler>:
     734:	0e 94 25 03 	call	0x64a	; 0x64a <prvSetupTimerInterrupt>
     738:	a0 91 f5 06 	lds	r26, 0x06F5	; 0x8006f5 <pxCurrentTCB>
     73c:	b0 91 f6 06 	lds	r27, 0x06F6	; 0x8006f6 <pxCurrentTCB+0x1>
     740:	cd 91       	ld	r28, X+
     742:	cd bf       	out	0x3d, r28	; 61
     744:	dd 91       	ld	r29, X+
     746:	de bf       	out	0x3e, r29	; 62
     748:	ff 91       	pop	r31
     74a:	ef 91       	pop	r30
     74c:	df 91       	pop	r29
     74e:	cf 91       	pop	r28
     750:	bf 91       	pop	r27
     752:	af 91       	pop	r26
     754:	9f 91       	pop	r25
     756:	8f 91       	pop	r24
     758:	7f 91       	pop	r23
     75a:	6f 91       	pop	r22
     75c:	5f 91       	pop	r21
     75e:	4f 91       	pop	r20
     760:	3f 91       	pop	r19
     762:	2f 91       	pop	r18
     764:	1f 91       	pop	r17
     766:	0f 91       	pop	r16
     768:	ff 90       	pop	r15
     76a:	ef 90       	pop	r14
     76c:	df 90       	pop	r13
     76e:	cf 90       	pop	r12
     770:	bf 90       	pop	r11
     772:	af 90       	pop	r10
     774:	9f 90       	pop	r9
     776:	8f 90       	pop	r8
     778:	7f 90       	pop	r7
     77a:	6f 90       	pop	r6
     77c:	5f 90       	pop	r5
     77e:	4f 90       	pop	r4
     780:	3f 90       	pop	r3
     782:	2f 90       	pop	r2
     784:	1f 90       	pop	r1
     786:	0f 90       	pop	r0
     788:	0f be       	out	0x3f, r0	; 63
     78a:	0f 90       	pop	r0
     78c:	08 95       	ret
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	08 95       	ret

00000792 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     792:	0f 92       	push	r0
     794:	0f b6       	in	r0, 0x3f	; 63
     796:	f8 94       	cli
     798:	0f 92       	push	r0
     79a:	1f 92       	push	r1
     79c:	11 24       	eor	r1, r1
     79e:	2f 92       	push	r2
     7a0:	3f 92       	push	r3
     7a2:	4f 92       	push	r4
     7a4:	5f 92       	push	r5
     7a6:	6f 92       	push	r6
     7a8:	7f 92       	push	r7
     7aa:	8f 92       	push	r8
     7ac:	9f 92       	push	r9
     7ae:	af 92       	push	r10
     7b0:	bf 92       	push	r11
     7b2:	cf 92       	push	r12
     7b4:	df 92       	push	r13
     7b6:	ef 92       	push	r14
     7b8:	ff 92       	push	r15
     7ba:	0f 93       	push	r16
     7bc:	1f 93       	push	r17
     7be:	2f 93       	push	r18
     7c0:	3f 93       	push	r19
     7c2:	4f 93       	push	r20
     7c4:	5f 93       	push	r21
     7c6:	6f 93       	push	r22
     7c8:	7f 93       	push	r23
     7ca:	8f 93       	push	r24
     7cc:	9f 93       	push	r25
     7ce:	af 93       	push	r26
     7d0:	bf 93       	push	r27
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	ef 93       	push	r30
     7d8:	ff 93       	push	r31
     7da:	a0 91 f5 06 	lds	r26, 0x06F5	; 0x8006f5 <pxCurrentTCB>
     7de:	b0 91 f6 06 	lds	r27, 0x06F6	; 0x8006f6 <pxCurrentTCB+0x1>
     7e2:	0d b6       	in	r0, 0x3d	; 61
     7e4:	0d 92       	st	X+, r0
     7e6:	0e b6       	in	r0, 0x3e	; 62
     7e8:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     7ea:	0e 94 48 0b 	call	0x1690	; 0x1690 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     7ee:	a0 91 f5 06 	lds	r26, 0x06F5	; 0x8006f5 <pxCurrentTCB>
     7f2:	b0 91 f6 06 	lds	r27, 0x06F6	; 0x8006f6 <pxCurrentTCB+0x1>
     7f6:	cd 91       	ld	r28, X+
     7f8:	cd bf       	out	0x3d, r28	; 61
     7fa:	dd 91       	ld	r29, X+
     7fc:	de bf       	out	0x3e, r29	; 62
     7fe:	ff 91       	pop	r31
     800:	ef 91       	pop	r30
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	bf 91       	pop	r27
     808:	af 91       	pop	r26
     80a:	9f 91       	pop	r25
     80c:	8f 91       	pop	r24
     80e:	7f 91       	pop	r23
     810:	6f 91       	pop	r22
     812:	5f 91       	pop	r21
     814:	4f 91       	pop	r20
     816:	3f 91       	pop	r19
     818:	2f 91       	pop	r18
     81a:	1f 91       	pop	r17
     81c:	0f 91       	pop	r16
     81e:	ff 90       	pop	r15
     820:	ef 90       	pop	r14
     822:	df 90       	pop	r13
     824:	cf 90       	pop	r12
     826:	bf 90       	pop	r11
     828:	af 90       	pop	r10
     82a:	9f 90       	pop	r9
     82c:	8f 90       	pop	r8
     82e:	7f 90       	pop	r7
     830:	6f 90       	pop	r6
     832:	5f 90       	pop	r5
     834:	4f 90       	pop	r4
     836:	3f 90       	pop	r3
     838:	2f 90       	pop	r2
     83a:	1f 90       	pop	r1
     83c:	0f 90       	pop	r0
     83e:	0f be       	out	0x3f, r0	; 63
     840:	0f 90       	pop	r0

	asm volatile ( "ret" );
     842:	08 95       	ret

00000844 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     844:	0f 92       	push	r0
     846:	0f b6       	in	r0, 0x3f	; 63
     848:	f8 94       	cli
     84a:	0f 92       	push	r0
     84c:	1f 92       	push	r1
     84e:	11 24       	eor	r1, r1
     850:	2f 92       	push	r2
     852:	3f 92       	push	r3
     854:	4f 92       	push	r4
     856:	5f 92       	push	r5
     858:	6f 92       	push	r6
     85a:	7f 92       	push	r7
     85c:	8f 92       	push	r8
     85e:	9f 92       	push	r9
     860:	af 92       	push	r10
     862:	bf 92       	push	r11
     864:	cf 92       	push	r12
     866:	df 92       	push	r13
     868:	ef 92       	push	r14
     86a:	ff 92       	push	r15
     86c:	0f 93       	push	r16
     86e:	1f 93       	push	r17
     870:	2f 93       	push	r18
     872:	3f 93       	push	r19
     874:	4f 93       	push	r20
     876:	5f 93       	push	r21
     878:	6f 93       	push	r22
     87a:	7f 93       	push	r23
     87c:	8f 93       	push	r24
     87e:	9f 93       	push	r25
     880:	af 93       	push	r26
     882:	bf 93       	push	r27
     884:	cf 93       	push	r28
     886:	df 93       	push	r29
     888:	ef 93       	push	r30
     88a:	ff 93       	push	r31
     88c:	a0 91 f5 06 	lds	r26, 0x06F5	; 0x8006f5 <pxCurrentTCB>
     890:	b0 91 f6 06 	lds	r27, 0x06F6	; 0x8006f6 <pxCurrentTCB+0x1>
     894:	0d b6       	in	r0, 0x3d	; 61
     896:	0d 92       	st	X+, r0
     898:	0e b6       	in	r0, 0x3e	; 62
     89a:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     89c:	0e 94 43 09 	call	0x1286	; 0x1286 <xTaskIncrementTick>
     8a0:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     8a2:	0e 94 48 0b 	call	0x1690	; 0x1690 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     8a6:	a0 91 f5 06 	lds	r26, 0x06F5	; 0x8006f5 <pxCurrentTCB>
     8aa:	b0 91 f6 06 	lds	r27, 0x06F6	; 0x8006f6 <pxCurrentTCB+0x1>
     8ae:	cd 91       	ld	r28, X+
     8b0:	cd bf       	out	0x3d, r28	; 61
     8b2:	dd 91       	ld	r29, X+
     8b4:	de bf       	out	0x3e, r29	; 62
     8b6:	ff 91       	pop	r31
     8b8:	ef 91       	pop	r30
     8ba:	df 91       	pop	r29
     8bc:	cf 91       	pop	r28
     8be:	bf 91       	pop	r27
     8c0:	af 91       	pop	r26
     8c2:	9f 91       	pop	r25
     8c4:	8f 91       	pop	r24
     8c6:	7f 91       	pop	r23
     8c8:	6f 91       	pop	r22
     8ca:	5f 91       	pop	r21
     8cc:	4f 91       	pop	r20
     8ce:	3f 91       	pop	r19
     8d0:	2f 91       	pop	r18
     8d2:	1f 91       	pop	r17
     8d4:	0f 91       	pop	r16
     8d6:	ff 90       	pop	r15
     8d8:	ef 90       	pop	r14
     8da:	df 90       	pop	r13
     8dc:	cf 90       	pop	r12
     8de:	bf 90       	pop	r11
     8e0:	af 90       	pop	r10
     8e2:	9f 90       	pop	r9
     8e4:	8f 90       	pop	r8
     8e6:	7f 90       	pop	r7
     8e8:	6f 90       	pop	r6
     8ea:	5f 90       	pop	r5
     8ec:	4f 90       	pop	r4
     8ee:	3f 90       	pop	r3
     8f0:	2f 90       	pop	r2
     8f2:	1f 90       	pop	r1
     8f4:	0f 90       	pop	r0
     8f6:	0f be       	out	0x3f, r0	; 63
     8f8:	0f 90       	pop	r0

	asm volatile ( "ret" );
     8fa:	08 95       	ret

000008fc <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     8fc:	0e 94 22 04 	call	0x844	; 0x844 <vPortYieldFromTick>
		asm volatile ( "reti" );
     900:	18 95       	reti

00000902 <PORT_voidInit>:
#include"PORT_private.h"
#include"PORT_interface.h"

void PORT_voidInit(void)
{
	DDRA=PORTA_DIR;
     902:	8f ef       	ldi	r24, 0xFF	; 255
     904:	8a bb       	out	0x1a, r24	; 26
    DDRB=PORTB_DIR;
     906:	9f e7       	ldi	r25, 0x7F	; 127
     908:	97 bb       	out	0x17, r25	; 23
    DDRC=PORTC_DIR;
     90a:	84 bb       	out	0x14, r24	; 20
    DDRD=PORTD_DIR;
     90c:	11 ba       	out	0x11, r1	; 17
	
	PORTA=PORTA_INITVAL ;
     90e:	1b ba       	out	0x1b, r1	; 27
    PORTB=PORTB_INITVAL	;
     910:	18 ba       	out	0x18, r1	; 24
    PORTC=PORTC_INITVAL	;
     912:	15 ba       	out	0x15, r1	; 21
    PORTD=PORTD_INITVAL	;
     914:	12 ba       	out	0x12, r1	; 18
     916:	08 95       	ret

00000918 <prvIsQueueEmpty>:
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
     918:	0f b6       	in	r0, 0x3f	; 63
     91a:	f8 94       	cli
     91c:	0f 92       	push	r0
     91e:	fc 01       	movw	r30, r24
     920:	82 8d       	ldd	r24, Z+26	; 0x1a
     922:	81 11       	cpse	r24, r1
     924:	02 c0       	rjmp	.+4      	; 0x92a <prvIsQueueEmpty+0x12>
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	01 c0       	rjmp	.+2      	; 0x92c <prvIsQueueEmpty+0x14>
     92a:	80 e0       	ldi	r24, 0x00	; 0
     92c:	0f 90       	pop	r0
     92e:	0f be       	out	0x3f, r0	; 63
     930:	08 95       	ret

00000932 <prvIsQueueFull>:
     932:	0f b6       	in	r0, 0x3f	; 63
     934:	f8 94       	cli
     936:	0f 92       	push	r0
     938:	fc 01       	movw	r30, r24
     93a:	22 8d       	ldd	r18, Z+26	; 0x1a
     93c:	83 8d       	ldd	r24, Z+27	; 0x1b
     93e:	28 13       	cpse	r18, r24
     940:	02 c0       	rjmp	.+4      	; 0x946 <prvIsQueueFull+0x14>
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	01 c0       	rjmp	.+2      	; 0x948 <prvIsQueueFull+0x16>
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	0f 90       	pop	r0
     94a:	0f be       	out	0x3f, r0	; 63
     94c:	08 95       	ret

0000094e <prvCopyDataToQueue>:
     94e:	0f 93       	push	r16
     950:	1f 93       	push	r17
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
     956:	ec 01       	movw	r28, r24
     958:	04 2f       	mov	r16, r20
     95a:	1a 8d       	ldd	r17, Y+26	; 0x1a
     95c:	4c 8d       	ldd	r20, Y+28	; 0x1c
     95e:	44 23       	and	r20, r20
     960:	b9 f1       	breq	.+110    	; 0x9d0 <prvCopyDataToQueue+0x82>
     962:	01 11       	cpse	r16, r1
     964:	16 c0       	rjmp	.+44     	; 0x992 <prvCopyDataToQueue+0x44>
     966:	50 e0       	ldi	r21, 0x00	; 0
     968:	8a 81       	ldd	r24, Y+2	; 0x02
     96a:	9b 81       	ldd	r25, Y+3	; 0x03
     96c:	0e 94 c0 0c 	call	0x1980	; 0x1980 <memcpy>
     970:	2c 8d       	ldd	r18, Y+28	; 0x1c
     972:	8a 81       	ldd	r24, Y+2	; 0x02
     974:	9b 81       	ldd	r25, Y+3	; 0x03
     976:	82 0f       	add	r24, r18
     978:	91 1d       	adc	r25, r1
     97a:	9b 83       	std	Y+3, r25	; 0x03
     97c:	8a 83       	std	Y+2, r24	; 0x02
     97e:	2c 81       	ldd	r18, Y+4	; 0x04
     980:	3d 81       	ldd	r19, Y+5	; 0x05
     982:	82 17       	cp	r24, r18
     984:	93 07       	cpc	r25, r19
     986:	20 f1       	brcs	.+72     	; 0x9d0 <prvCopyDataToQueue+0x82>
     988:	88 81       	ld	r24, Y
     98a:	99 81       	ldd	r25, Y+1	; 0x01
     98c:	9b 83       	std	Y+3, r25	; 0x03
     98e:	8a 83       	std	Y+2, r24	; 0x02
     990:	1f c0       	rjmp	.+62     	; 0x9d0 <prvCopyDataToQueue+0x82>
     992:	50 e0       	ldi	r21, 0x00	; 0
     994:	8e 81       	ldd	r24, Y+6	; 0x06
     996:	9f 81       	ldd	r25, Y+7	; 0x07
     998:	0e 94 c0 0c 	call	0x1980	; 0x1980 <memcpy>
     99c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	91 95       	neg	r25
     9a2:	81 95       	neg	r24
     9a4:	91 09       	sbc	r25, r1
     9a6:	2e 81       	ldd	r18, Y+6	; 0x06
     9a8:	3f 81       	ldd	r19, Y+7	; 0x07
     9aa:	28 0f       	add	r18, r24
     9ac:	39 1f       	adc	r19, r25
     9ae:	3f 83       	std	Y+7, r19	; 0x07
     9b0:	2e 83       	std	Y+6, r18	; 0x06
     9b2:	48 81       	ld	r20, Y
     9b4:	59 81       	ldd	r21, Y+1	; 0x01
     9b6:	24 17       	cp	r18, r20
     9b8:	35 07       	cpc	r19, r21
     9ba:	30 f4       	brcc	.+12     	; 0x9c8 <prvCopyDataToQueue+0x7a>
     9bc:	2c 81       	ldd	r18, Y+4	; 0x04
     9be:	3d 81       	ldd	r19, Y+5	; 0x05
     9c0:	82 0f       	add	r24, r18
     9c2:	93 1f       	adc	r25, r19
     9c4:	9f 83       	std	Y+7, r25	; 0x07
     9c6:	8e 83       	std	Y+6, r24	; 0x06
     9c8:	02 30       	cpi	r16, 0x02	; 2
     9ca:	11 f4       	brne	.+4      	; 0x9d0 <prvCopyDataToQueue+0x82>
     9cc:	11 11       	cpse	r17, r1
     9ce:	11 50       	subi	r17, 0x01	; 1
     9d0:	1f 5f       	subi	r17, 0xFF	; 255
     9d2:	1a 8f       	std	Y+26, r17	; 0x1a
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	df 91       	pop	r29
     9d8:	cf 91       	pop	r28
     9da:	1f 91       	pop	r17
     9dc:	0f 91       	pop	r16
     9de:	08 95       	ret

000009e0 <prvUnlockQueue>:
     9e0:	1f 93       	push	r17
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
     9e6:	ec 01       	movw	r28, r24
     9e8:	0f b6       	in	r0, 0x3f	; 63
     9ea:	f8 94       	cli
     9ec:	0f 92       	push	r0
     9ee:	1e 8d       	ldd	r17, Y+30	; 0x1e
     9f0:	0b c0       	rjmp	.+22     	; 0xa08 <prvUnlockQueue+0x28>
     9f2:	89 89       	ldd	r24, Y+17	; 0x11
     9f4:	88 23       	and	r24, r24
     9f6:	51 f0       	breq	.+20     	; 0xa0c <prvUnlockQueue+0x2c>
     9f8:	ce 01       	movw	r24, r28
     9fa:	41 96       	adiw	r24, 0x11	; 17
     9fc:	0e 94 ae 0b 	call	0x175c	; 0x175c <xTaskRemoveFromEventList>
     a00:	81 11       	cpse	r24, r1
     a02:	0e 94 a8 0c 	call	0x1950	; 0x1950 <vTaskMissedYield>
     a06:	11 50       	subi	r17, 0x01	; 1
     a08:	11 16       	cp	r1, r17
     a0a:	9c f3       	brlt	.-26     	; 0x9f2 <prvUnlockQueue+0x12>
     a0c:	8f ef       	ldi	r24, 0xFF	; 255
     a0e:	8e 8f       	std	Y+30, r24	; 0x1e
     a10:	0f 90       	pop	r0
     a12:	0f be       	out	0x3f, r0	; 63
     a14:	0f b6       	in	r0, 0x3f	; 63
     a16:	f8 94       	cli
     a18:	0f 92       	push	r0
     a1a:	1d 8d       	ldd	r17, Y+29	; 0x1d
     a1c:	0b c0       	rjmp	.+22     	; 0xa34 <prvUnlockQueue+0x54>
     a1e:	88 85       	ldd	r24, Y+8	; 0x08
     a20:	88 23       	and	r24, r24
     a22:	51 f0       	breq	.+20     	; 0xa38 <prvUnlockQueue+0x58>
     a24:	ce 01       	movw	r24, r28
     a26:	08 96       	adiw	r24, 0x08	; 8
     a28:	0e 94 ae 0b 	call	0x175c	; 0x175c <xTaskRemoveFromEventList>
     a2c:	81 11       	cpse	r24, r1
     a2e:	0e 94 a8 0c 	call	0x1950	; 0x1950 <vTaskMissedYield>
     a32:	11 50       	subi	r17, 0x01	; 1
     a34:	11 16       	cp	r1, r17
     a36:	9c f3       	brlt	.-26     	; 0xa1e <prvUnlockQueue+0x3e>
     a38:	8f ef       	ldi	r24, 0xFF	; 255
     a3a:	8d 8f       	std	Y+29, r24	; 0x1d
     a3c:	0f 90       	pop	r0
     a3e:	0f be       	out	0x3f, r0	; 63
     a40:	df 91       	pop	r29
     a42:	cf 91       	pop	r28
     a44:	1f 91       	pop	r17
     a46:	08 95       	ret

00000a48 <xQueueGenericReset>:
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	cf 93       	push	r28
     a4e:	df 93       	push	r29
     a50:	fc 01       	movw	r30, r24
     a52:	36 2f       	mov	r19, r22
     a54:	89 2b       	or	r24, r25
     a56:	09 f4       	brne	.+2      	; 0xa5a <xQueueGenericReset+0x12>
     a58:	4d c0       	rjmp	.+154    	; 0xaf4 <xQueueGenericReset+0xac>
     a5a:	23 8d       	ldd	r18, Z+27	; 0x1b
     a5c:	22 23       	and	r18, r18
     a5e:	09 f4       	brne	.+2      	; 0xa62 <xQueueGenericReset+0x1a>
     a60:	4b c0       	rjmp	.+150    	; 0xaf8 <xQueueGenericReset+0xb0>
     a62:	02 2f       	mov	r16, r18
     a64:	10 e0       	ldi	r17, 0x00	; 0
     a66:	8f ef       	ldi	r24, 0xFF	; 255
     a68:	9f ef       	ldi	r25, 0xFF	; 255
     a6a:	b8 01       	movw	r22, r16
     a6c:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__udivmodhi4>
     a70:	44 8d       	ldd	r20, Z+28	; 0x1c
     a72:	84 2f       	mov	r24, r20
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	68 17       	cp	r22, r24
     a78:	79 07       	cpc	r23, r25
     a7a:	08 f4       	brcc	.+2      	; 0xa7e <xQueueGenericReset+0x36>
     a7c:	3f c0       	rjmp	.+126    	; 0xafc <xQueueGenericReset+0xb4>
     a7e:	ef 01       	movw	r28, r30
     a80:	0f b6       	in	r0, 0x3f	; 63
     a82:	f8 94       	cli
     a84:	0f 92       	push	r0
     a86:	60 81       	ld	r22, Z
     a88:	71 81       	ldd	r23, Z+1	; 0x01
     a8a:	fb 01       	movw	r30, r22
     a8c:	24 9f       	mul	r18, r20
     a8e:	e0 0d       	add	r30, r0
     a90:	f1 1d       	adc	r31, r1
     a92:	11 24       	eor	r1, r1
     a94:	fd 83       	std	Y+5, r31	; 0x05
     a96:	ec 83       	std	Y+4, r30	; 0x04
     a98:	1a 8e       	std	Y+26, r1	; 0x1a
     a9a:	7b 83       	std	Y+3, r23	; 0x03
     a9c:	6a 83       	std	Y+2, r22	; 0x02
     a9e:	01 50       	subi	r16, 0x01	; 1
     aa0:	11 09       	sbc	r17, r1
     aa2:	80 9f       	mul	r24, r16
     aa4:	a0 01       	movw	r20, r0
     aa6:	81 9f       	mul	r24, r17
     aa8:	50 0d       	add	r21, r0
     aaa:	90 9f       	mul	r25, r16
     aac:	50 0d       	add	r21, r0
     aae:	11 24       	eor	r1, r1
     ab0:	cb 01       	movw	r24, r22
     ab2:	84 0f       	add	r24, r20
     ab4:	95 1f       	adc	r25, r21
     ab6:	9f 83       	std	Y+7, r25	; 0x07
     ab8:	8e 83       	std	Y+6, r24	; 0x06
     aba:	8f ef       	ldi	r24, 0xFF	; 255
     abc:	8d 8f       	std	Y+29, r24	; 0x1d
     abe:	8e 8f       	std	Y+30, r24	; 0x1e
     ac0:	31 11       	cpse	r19, r1
     ac2:	0c c0       	rjmp	.+24     	; 0xadc <xQueueGenericReset+0x94>
     ac4:	88 85       	ldd	r24, Y+8	; 0x08
     ac6:	88 23       	and	r24, r24
     ac8:	89 f0       	breq	.+34     	; 0xaec <xQueueGenericReset+0xa4>
     aca:	ce 01       	movw	r24, r28
     acc:	08 96       	adiw	r24, 0x08	; 8
     ace:	0e 94 ae 0b 	call	0x175c	; 0x175c <xTaskRemoveFromEventList>
     ad2:	88 23       	and	r24, r24
     ad4:	59 f0       	breq	.+22     	; 0xaec <xQueueGenericReset+0xa4>
     ad6:	0e 94 c9 03 	call	0x792	; 0x792 <vPortYield>
     ada:	08 c0       	rjmp	.+16     	; 0xaec <xQueueGenericReset+0xa4>
     adc:	ce 01       	movw	r24, r28
     ade:	08 96       	adiw	r24, 0x08	; 8
     ae0:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <vListInitialise>
     ae4:	ce 01       	movw	r24, r28
     ae6:	41 96       	adiw	r24, 0x11	; 17
     ae8:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <vListInitialise>
     aec:	0f 90       	pop	r0
     aee:	0f be       	out	0x3f, r0	; 63
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	05 c0       	rjmp	.+10     	; 0xafe <xQueueGenericReset+0xb6>
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	03 c0       	rjmp	.+6      	; 0xafe <xQueueGenericReset+0xb6>
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	01 c0       	rjmp	.+2      	; 0xafe <xQueueGenericReset+0xb6>
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	1f 91       	pop	r17
     b04:	0f 91       	pop	r16
     b06:	08 95       	ret

00000b08 <prvInitialiseNewQueue>:
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	f8 01       	movw	r30, r16
     b0e:	61 11       	cpse	r22, r1
     b10:	03 c0       	rjmp	.+6      	; 0xb18 <prvInitialiseNewQueue+0x10>
     b12:	11 83       	std	Z+1, r17	; 0x01
     b14:	00 83       	st	Z, r16
     b16:	02 c0       	rjmp	.+4      	; 0xb1c <prvInitialiseNewQueue+0x14>
     b18:	51 83       	std	Z+1, r21	; 0x01
     b1a:	40 83       	st	Z, r20
     b1c:	83 8f       	std	Z+27, r24	; 0x1b
     b1e:	64 8f       	std	Z+28, r22	; 0x1c
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	cf 01       	movw	r24, r30
     b24:	0e 94 24 05 	call	0xa48	; 0xa48 <xQueueGenericReset>
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	08 95       	ret

00000b2e <xQueueGenericCreate>:
     b2e:	df 92       	push	r13
     b30:	ef 92       	push	r14
     b32:	ff 92       	push	r15
     b34:	0f 93       	push	r16
     b36:	1f 93       	push	r17
     b38:	cf 93       	push	r28
     b3a:	df 93       	push	r29
     b3c:	38 2f       	mov	r19, r24
     b3e:	e6 2f       	mov	r30, r22
     b40:	88 23       	and	r24, r24
     b42:	29 f1       	breq	.+74     	; 0xb8e <xQueueGenericCreate+0x60>
     b44:	68 2f       	mov	r22, r24
     b46:	70 e0       	ldi	r23, 0x00	; 0
     b48:	8f ef       	ldi	r24, 0xFF	; 255
     b4a:	9f ef       	ldi	r25, 0xFF	; 255
     b4c:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__udivmodhi4>
     b50:	8e 2f       	mov	r24, r30
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	68 17       	cp	r22, r24
     b56:	79 07       	cpc	r23, r25
     b58:	e8 f0       	brcs	.+58     	; 0xb94 <xQueueGenericCreate+0x66>
     b5a:	3e 9f       	mul	r19, r30
     b5c:	c0 01       	movw	r24, r0
     b5e:	11 24       	eor	r1, r1
     b60:	81 3e       	cpi	r24, 0xE1	; 225
     b62:	2f ef       	ldi	r18, 0xFF	; 255
     b64:	92 07       	cpc	r25, r18
     b66:	c8 f4       	brcc	.+50     	; 0xb9a <xQueueGenericCreate+0x6c>
     b68:	d4 2e       	mov	r13, r20
     b6a:	de 2f       	mov	r29, r30
     b6c:	c3 2f       	mov	r28, r19
     b6e:	4f 96       	adiw	r24, 0x1f	; 31
     b70:	0e 94 11 01 	call	0x222	; 0x222 <pvPortMalloc>
     b74:	7c 01       	movw	r14, r24
     b76:	00 97       	sbiw	r24, 0x00	; 0
     b78:	91 f0       	breq	.+36     	; 0xb9e <xQueueGenericCreate+0x70>
     b7a:	8c 01       	movw	r16, r24
     b7c:	2d 2d       	mov	r18, r13
     b7e:	ac 01       	movw	r20, r24
     b80:	41 5e       	subi	r20, 0xE1	; 225
     b82:	5f 4f       	sbci	r21, 0xFF	; 255
     b84:	6d 2f       	mov	r22, r29
     b86:	8c 2f       	mov	r24, r28
     b88:	0e 94 84 05 	call	0xb08	; 0xb08 <prvInitialiseNewQueue>
     b8c:	08 c0       	rjmp	.+16     	; 0xb9e <xQueueGenericCreate+0x70>
     b8e:	e1 2c       	mov	r14, r1
     b90:	f1 2c       	mov	r15, r1
     b92:	05 c0       	rjmp	.+10     	; 0xb9e <xQueueGenericCreate+0x70>
     b94:	e1 2c       	mov	r14, r1
     b96:	f1 2c       	mov	r15, r1
     b98:	02 c0       	rjmp	.+4      	; 0xb9e <xQueueGenericCreate+0x70>
     b9a:	e1 2c       	mov	r14, r1
     b9c:	f1 2c       	mov	r15, r1
     b9e:	c7 01       	movw	r24, r14
     ba0:	df 91       	pop	r29
     ba2:	cf 91       	pop	r28
     ba4:	1f 91       	pop	r17
     ba6:	0f 91       	pop	r16
     ba8:	ff 90       	pop	r15
     baa:	ef 90       	pop	r14
     bac:	df 90       	pop	r13
     bae:	08 95       	ret

00000bb0 <xQueueCreateCountingSemaphore>:
     bb0:	cf 93       	push	r28
     bb2:	88 23       	and	r24, r24
     bb4:	61 f0       	breq	.+24     	; 0xbce <xQueueCreateCountingSemaphore+0x1e>
     bb6:	86 17       	cp	r24, r22
     bb8:	68 f0       	brcs	.+26     	; 0xbd4 <xQueueCreateCountingSemaphore+0x24>
     bba:	c6 2f       	mov	r28, r22
     bbc:	42 e0       	ldi	r20, 0x02	; 2
     bbe:	60 e0       	ldi	r22, 0x00	; 0
     bc0:	0e 94 97 05 	call	0xb2e	; 0xb2e <xQueueGenericCreate>
     bc4:	00 97       	sbiw	r24, 0x00	; 0
     bc6:	41 f0       	breq	.+16     	; 0xbd8 <xQueueCreateCountingSemaphore+0x28>
     bc8:	fc 01       	movw	r30, r24
     bca:	c2 8f       	std	Z+26, r28	; 0x1a
     bcc:	05 c0       	rjmp	.+10     	; 0xbd8 <xQueueCreateCountingSemaphore+0x28>
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	02 c0       	rjmp	.+4      	; 0xbd8 <xQueueCreateCountingSemaphore+0x28>
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	cf 91       	pop	r28
     bda:	08 95       	ret

00000bdc <xQueueGenericSend>:
     bdc:	cf 92       	push	r12
     bde:	df 92       	push	r13
     be0:	ef 92       	push	r14
     be2:	ff 92       	push	r15
     be4:	0f 93       	push	r16
     be6:	1f 93       	push	r17
     be8:	cf 93       	push	r28
     bea:	df 93       	push	r29
     bec:	00 d0       	rcall	.+0      	; 0xbee <xQueueGenericSend+0x12>
     bee:	00 d0       	rcall	.+0      	; 0xbf0 <xQueueGenericSend+0x14>
     bf0:	1f 92       	push	r1
     bf2:	cd b7       	in	r28, 0x3d	; 61
     bf4:	de b7       	in	r29, 0x3e	; 62
     bf6:	8c 01       	movw	r16, r24
     bf8:	7b 01       	movw	r14, r22
     bfa:	5d 83       	std	Y+5, r21	; 0x05
     bfc:	4c 83       	std	Y+4, r20	; 0x04
     bfe:	c2 2e       	mov	r12, r18
     c00:	d1 2c       	mov	r13, r1
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	f8 94       	cli
     c06:	0f 92       	push	r0
     c08:	f8 01       	movw	r30, r16
     c0a:	92 8d       	ldd	r25, Z+26	; 0x1a
     c0c:	83 8d       	ldd	r24, Z+27	; 0x1b
     c0e:	98 17       	cp	r25, r24
     c10:	18 f0       	brcs	.+6      	; 0xc18 <xQueueGenericSend+0x3c>
     c12:	f2 e0       	ldi	r31, 0x02	; 2
     c14:	cf 12       	cpse	r12, r31
     c16:	19 c0       	rjmp	.+50     	; 0xc4a <xQueueGenericSend+0x6e>
     c18:	4c 2d       	mov	r20, r12
     c1a:	b7 01       	movw	r22, r14
     c1c:	c8 01       	movw	r24, r16
     c1e:	0e 94 a7 04 	call	0x94e	; 0x94e <prvCopyDataToQueue>
     c22:	f8 01       	movw	r30, r16
     c24:	91 89       	ldd	r25, Z+17	; 0x11
     c26:	99 23       	and	r25, r25
     c28:	49 f0       	breq	.+18     	; 0xc3c <xQueueGenericSend+0x60>
     c2a:	c8 01       	movw	r24, r16
     c2c:	41 96       	adiw	r24, 0x11	; 17
     c2e:	0e 94 ae 0b 	call	0x175c	; 0x175c <xTaskRemoveFromEventList>
     c32:	88 23       	and	r24, r24
     c34:	31 f0       	breq	.+12     	; 0xc42 <xQueueGenericSend+0x66>
     c36:	0e 94 c9 03 	call	0x792	; 0x792 <vPortYield>
     c3a:	03 c0       	rjmp	.+6      	; 0xc42 <xQueueGenericSend+0x66>
     c3c:	81 11       	cpse	r24, r1
     c3e:	0e 94 c9 03 	call	0x792	; 0x792 <vPortYield>
     c42:	0f 90       	pop	r0
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	4d c0       	rjmp	.+154    	; 0xce4 <xQueueGenericSend+0x108>
     c4a:	8c 81       	ldd	r24, Y+4	; 0x04
     c4c:	9d 81       	ldd	r25, Y+5	; 0x05
     c4e:	89 2b       	or	r24, r25
     c50:	21 f4       	brne	.+8      	; 0xc5a <xQueueGenericSend+0x7e>
     c52:	0f 90       	pop	r0
     c54:	0f be       	out	0x3f, r0	; 63
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	45 c0       	rjmp	.+138    	; 0xce4 <xQueueGenericSend+0x108>
     c5a:	d1 10       	cpse	r13, r1
     c5c:	06 c0       	rjmp	.+12     	; 0xc6a <xQueueGenericSend+0x8e>
     c5e:	ce 01       	movw	r24, r28
     c60:	01 96       	adiw	r24, 0x01	; 1
     c62:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <vTaskInternalSetTimeOutState>
     c66:	dd 24       	eor	r13, r13
     c68:	d3 94       	inc	r13
     c6a:	0f 90       	pop	r0
     c6c:	0f be       	out	0x3f, r0	; 63
     c6e:	0e 94 3d 09 	call	0x127a	; 0x127a <vTaskSuspendAll>
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	0f 92       	push	r0
     c78:	f8 01       	movw	r30, r16
     c7a:	85 8d       	ldd	r24, Z+29	; 0x1d
     c7c:	8f 3f       	cpi	r24, 0xFF	; 255
     c7e:	09 f4       	brne	.+2      	; 0xc82 <xQueueGenericSend+0xa6>
     c80:	15 8e       	std	Z+29, r1	; 0x1d
     c82:	f8 01       	movw	r30, r16
     c84:	86 8d       	ldd	r24, Z+30	; 0x1e
     c86:	8f 3f       	cpi	r24, 0xFF	; 255
     c88:	09 f4       	brne	.+2      	; 0xc8c <xQueueGenericSend+0xb0>
     c8a:	16 8e       	std	Z+30, r1	; 0x1e
     c8c:	0f 90       	pop	r0
     c8e:	0f be       	out	0x3f, r0	; 63
     c90:	be 01       	movw	r22, r28
     c92:	6c 5f       	subi	r22, 0xFC	; 252
     c94:	7f 4f       	sbci	r23, 0xFF	; 255
     c96:	ce 01       	movw	r24, r28
     c98:	01 96       	adiw	r24, 0x01	; 1
     c9a:	0e 94 76 0c 	call	0x18ec	; 0x18ec <xTaskCheckForTimeOut>
     c9e:	81 11       	cpse	r24, r1
     ca0:	1b c0       	rjmp	.+54     	; 0xcd8 <xQueueGenericSend+0xfc>
     ca2:	c8 01       	movw	r24, r16
     ca4:	0e 94 99 04 	call	0x932	; 0x932 <prvIsQueueFull>
     ca8:	88 23       	and	r24, r24
     caa:	81 f0       	breq	.+32     	; 0xccc <xQueueGenericSend+0xf0>
     cac:	6c 81       	ldd	r22, Y+4	; 0x04
     cae:	7d 81       	ldd	r23, Y+5	; 0x05
     cb0:	c8 01       	movw	r24, r16
     cb2:	08 96       	adiw	r24, 0x08	; 8
     cb4:	0e 94 9c 0b 	call	0x1738	; 0x1738 <vTaskPlaceOnEventList>
     cb8:	c8 01       	movw	r24, r16
     cba:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <prvUnlockQueue>
     cbe:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <xTaskResumeAll>
     cc2:	81 11       	cpse	r24, r1
     cc4:	9e cf       	rjmp	.-196    	; 0xc02 <xQueueGenericSend+0x26>
     cc6:	0e 94 c9 03 	call	0x792	; 0x792 <vPortYield>
     cca:	9b cf       	rjmp	.-202    	; 0xc02 <xQueueGenericSend+0x26>
     ccc:	c8 01       	movw	r24, r16
     cce:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <prvUnlockQueue>
     cd2:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <xTaskResumeAll>
     cd6:	95 cf       	rjmp	.-214    	; 0xc02 <xQueueGenericSend+0x26>
     cd8:	c8 01       	movw	r24, r16
     cda:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <prvUnlockQueue>
     cde:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <xTaskResumeAll>
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	0f 90       	pop	r0
     ce6:	0f 90       	pop	r0
     ce8:	0f 90       	pop	r0
     cea:	0f 90       	pop	r0
     cec:	0f 90       	pop	r0
     cee:	df 91       	pop	r29
     cf0:	cf 91       	pop	r28
     cf2:	1f 91       	pop	r17
     cf4:	0f 91       	pop	r16
     cf6:	ff 90       	pop	r15
     cf8:	ef 90       	pop	r14
     cfa:	df 90       	pop	r13
     cfc:	cf 90       	pop	r12
     cfe:	08 95       	ret

00000d00 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
     d00:	ff 92       	push	r15
     d02:	0f 93       	push	r16
     d04:	1f 93       	push	r17
     d06:	cf 93       	push	r28
     d08:	df 93       	push	r29
     d0a:	00 d0       	rcall	.+0      	; 0xd0c <xQueueSemaphoreTake+0xc>
     d0c:	00 d0       	rcall	.+0      	; 0xd0e <xQueueSemaphoreTake+0xe>
     d0e:	1f 92       	push	r1
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
     d14:	8c 01       	movw	r16, r24
     d16:	7d 83       	std	Y+5, r23	; 0x05
     d18:	6c 83       	std	Y+4, r22	; 0x04
    BaseType_t xEntryTimeSet = pdFALSE;
     d1a:	f1 2c       	mov	r15, r1
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	f8 94       	cli
     d20:	0f 92       	push	r0
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
     d22:	f8 01       	movw	r30, r16
     d24:	82 8d       	ldd	r24, Z+26	; 0x1a

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
     d26:	88 23       	and	r24, r24
     d28:	81 f0       	breq	.+32     	; 0xd4a <xQueueSemaphoreTake+0x4a>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
     d2a:	81 50       	subi	r24, 0x01	; 1
     d2c:	82 8f       	std	Z+26, r24	; 0x1a
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     d2e:	80 85       	ldd	r24, Z+8	; 0x08
     d30:	88 23       	and	r24, r24
     d32:	39 f0       	breq	.+14     	; 0xd42 <xQueueSemaphoreTake+0x42>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     d34:	c8 01       	movw	r24, r16
     d36:	08 96       	adiw	r24, 0x08	; 8
     d38:	0e 94 ae 0b 	call	0x175c	; 0x175c <xTaskRemoveFromEventList>
     d3c:	81 11       	cpse	r24, r1
                    {
                        queueYIELD_IF_USING_PREEMPTION();
     d3e:	0e 94 c9 03 	call	0x792	; 0x792 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
     d42:	0f 90       	pop	r0
     d44:	0f be       	out	0x3f, r0	; 63
                return pdPASS;
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	53 c0       	rjmp	.+166    	; 0xdf0 <xQueueSemaphoreTake+0xf0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	89 2b       	or	r24, r25
     d50:	21 f4       	brne	.+8      	; 0xd5a <xQueueSemaphoreTake+0x5a>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
     d52:	0f 90       	pop	r0
     d54:	0f be       	out	0x3f, r0	; 63
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	4b c0       	rjmp	.+150    	; 0xdf0 <xQueueSemaphoreTake+0xf0>
                }
                else if( xEntryTimeSet == pdFALSE )
     d5a:	f1 10       	cpse	r15, r1
     d5c:	06 c0       	rjmp	.+12     	; 0xd6a <xQueueSemaphoreTake+0x6a>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
     d5e:	ce 01       	movw	r24, r28
     d60:	01 96       	adiw	r24, 0x01	; 1
     d62:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
     d66:	ff 24       	eor	r15, r15
     d68:	f3 94       	inc	r15
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
     d6a:	0f 90       	pop	r0
     d6c:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
     d6e:	0e 94 3d 09 	call	0x127a	; 0x127a <vTaskSuspendAll>
        prvLockQueue( pxQueue );
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	f8 94       	cli
     d76:	0f 92       	push	r0
     d78:	f8 01       	movw	r30, r16
     d7a:	85 8d       	ldd	r24, Z+29	; 0x1d
     d7c:	8f 3f       	cpi	r24, 0xFF	; 255
     d7e:	09 f4       	brne	.+2      	; 0xd82 <xQueueSemaphoreTake+0x82>
     d80:	15 8e       	std	Z+29, r1	; 0x1d
     d82:	f8 01       	movw	r30, r16
     d84:	86 8d       	ldd	r24, Z+30	; 0x1e
     d86:	8f 3f       	cpi	r24, 0xFF	; 255
     d88:	09 f4       	brne	.+2      	; 0xd8c <xQueueSemaphoreTake+0x8c>
     d8a:	16 8e       	std	Z+30, r1	; 0x1e
     d8c:	0f 90       	pop	r0
     d8e:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     d90:	be 01       	movw	r22, r28
     d92:	6c 5f       	subi	r22, 0xFC	; 252
     d94:	7f 4f       	sbci	r23, 0xFF	; 255
     d96:	ce 01       	movw	r24, r28
     d98:	01 96       	adiw	r24, 0x01	; 1
     d9a:	0e 94 76 0c 	call	0x18ec	; 0x18ec <xTaskCheckForTimeOut>
     d9e:	81 11       	cpse	r24, r1
     da0:	1b c0       	rjmp	.+54     	; 0xdd8 <xQueueSemaphoreTake+0xd8>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     da2:	c8 01       	movw	r24, r16
     da4:	0e 94 8c 04 	call	0x918	; 0x918 <prvIsQueueEmpty>
     da8:	88 23       	and	r24, r24
     daa:	81 f0       	breq	.+32     	; 0xdcc <xQueueSemaphoreTake+0xcc>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     dac:	6c 81       	ldd	r22, Y+4	; 0x04
     dae:	7d 81       	ldd	r23, Y+5	; 0x05
     db0:	c8 01       	movw	r24, r16
     db2:	41 96       	adiw	r24, 0x11	; 17
     db4:	0e 94 9c 0b 	call	0x1738	; 0x1738 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
     db8:	c8 01       	movw	r24, r16
     dba:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
     dbe:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <xTaskResumeAll>
     dc2:	81 11       	cpse	r24, r1
     dc4:	ab cf       	rjmp	.-170    	; 0xd1c <xQueueSemaphoreTake+0x1c>
                {
                    portYIELD_WITHIN_API();
     dc6:	0e 94 c9 03 	call	0x792	; 0x792 <vPortYield>
     dca:	a8 cf       	rjmp	.-176    	; 0xd1c <xQueueSemaphoreTake+0x1c>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
     dcc:	c8 01       	movw	r24, r16
     dce:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
     dd2:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <xTaskResumeAll>
     dd6:	a2 cf       	rjmp	.-188    	; 0xd1c <xQueueSemaphoreTake+0x1c>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
     dd8:	c8 01       	movw	r24, r16
     dda:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
     dde:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     de2:	c8 01       	movw	r24, r16
     de4:	0e 94 8c 04 	call	0x918	; 0x918 <prvIsQueueEmpty>
     de8:	88 23       	and	r24, r24
     dea:	09 f4       	brne	.+2      	; 0xdee <xQueueSemaphoreTake+0xee>
     dec:	97 cf       	rjmp	.-210    	; 0xd1c <xQueueSemaphoreTake+0x1c>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
     dee:	80 e0       	ldi	r24, 0x00	; 0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
     df0:	0f 90       	pop	r0
     df2:	0f 90       	pop	r0
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	1f 91       	pop	r17
     e00:	0f 91       	pop	r16
     e02:	ff 90       	pop	r15
     e04:	08 95       	ret

00000e06 <prvResetNextTaskUnblockTime>:
    taskENTER_CRITICAL();
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
        pxTimeOut->xTimeOnEntering = xTickCount;
    }
    taskEXIT_CRITICAL();
     e06:	e0 91 bd 06 	lds	r30, 0x06BD	; 0x8006bd <pxDelayedTaskList>
     e0a:	f0 91 be 06 	lds	r31, 0x06BE	; 0x8006be <pxDelayedTaskList+0x1>
     e0e:	80 81       	ld	r24, Z
     e10:	81 11       	cpse	r24, r1
     e12:	07 c0       	rjmp	.+14     	; 0xe22 <prvResetNextTaskUnblockTime+0x1c>
     e14:	8f ef       	ldi	r24, 0xFF	; 255
     e16:	9f ef       	ldi	r25, 0xFF	; 255
     e18:	90 93 9d 06 	sts	0x069D, r25	; 0x80069d <xNextTaskUnblockTime+0x1>
     e1c:	80 93 9c 06 	sts	0x069C, r24	; 0x80069c <xNextTaskUnblockTime>
     e20:	08 95       	ret
     e22:	e0 91 bd 06 	lds	r30, 0x06BD	; 0x8006bd <pxDelayedTaskList>
     e26:	f0 91 be 06 	lds	r31, 0x06BE	; 0x8006be <pxDelayedTaskList+0x1>
     e2a:	05 80       	ldd	r0, Z+5	; 0x05
     e2c:	f6 81       	ldd	r31, Z+6	; 0x06
     e2e:	e0 2d       	mov	r30, r0
     e30:	80 81       	ld	r24, Z
     e32:	91 81       	ldd	r25, Z+1	; 0x01
     e34:	90 93 9d 06 	sts	0x069D, r25	; 0x80069d <xNextTaskUnblockTime+0x1>
     e38:	80 93 9c 06 	sts	0x069C, r24	; 0x80069c <xNextTaskUnblockTime>
     e3c:	08 95       	ret

00000e3e <prvDeleteTCB>:
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
     e42:	ec 01       	movw	r28, r24
     e44:	8f 89       	ldd	r24, Y+23	; 0x17
     e46:	98 8d       	ldd	r25, Y+24	; 0x18
     e48:	0e 94 ab 01 	call	0x356	; 0x356 <vPortFree>
     e4c:	ce 01       	movw	r24, r28
     e4e:	0e 94 ab 01 	call	0x356	; 0x356 <vPortFree>
     e52:	df 91       	pop	r29
     e54:	cf 91       	pop	r28
     e56:	08 95       	ret

00000e58 <prvInitialiseNewTask>:
     e58:	6f 92       	push	r6
     e5a:	7f 92       	push	r7
     e5c:	8f 92       	push	r8
     e5e:	9f 92       	push	r9
     e60:	af 92       	push	r10
     e62:	bf 92       	push	r11
     e64:	cf 92       	push	r12
     e66:	df 92       	push	r13
     e68:	ef 92       	push	r14
     e6a:	0f 93       	push	r16
     e6c:	1f 93       	push	r17
     e6e:	cf 93       	push	r28
     e70:	df 93       	push	r29
     e72:	cd b7       	in	r28, 0x3d	; 61
     e74:	de b7       	in	r29, 0x3e	; 62
     e76:	4c 01       	movw	r8, r24
     e78:	f5 01       	movw	r30, r10
     e7a:	87 89       	ldd	r24, Z+23	; 0x17
     e7c:	90 8d       	ldd	r25, Z+24	; 0x18
     e7e:	21 50       	subi	r18, 0x01	; 1
     e80:	31 09       	sbc	r19, r1
     e82:	3c 01       	movw	r6, r24
     e84:	62 0e       	add	r6, r18
     e86:	73 1e       	adc	r7, r19
     e88:	61 15       	cp	r22, r1
     e8a:	71 05       	cpc	r23, r1
     e8c:	89 f4       	brne	.+34     	; 0xeb0 <prvInitialiseNewTask+0x58>
     e8e:	15 c0       	rjmp	.+42     	; 0xeba <prvInitialiseNewTask+0x62>
     e90:	82 2f       	mov	r24, r18
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	fb 01       	movw	r30, r22
     e96:	e8 0f       	add	r30, r24
     e98:	f9 1f       	adc	r31, r25
     e9a:	30 81       	ld	r19, Z
     e9c:	d5 01       	movw	r26, r10
     e9e:	a8 0f       	add	r26, r24
     ea0:	b9 1f       	adc	r27, r25
     ea2:	59 96       	adiw	r26, 0x19	; 25
     ea4:	3c 93       	st	X, r19
     ea6:	80 81       	ld	r24, Z
     ea8:	88 23       	and	r24, r24
     eaa:	29 f0       	breq	.+10     	; 0xeb6 <prvInitialiseNewTask+0x5e>
     eac:	2f 5f       	subi	r18, 0xFF	; 255
     eae:	01 c0       	rjmp	.+2      	; 0xeb2 <prvInitialiseNewTask+0x5a>
     eb0:	20 e0       	ldi	r18, 0x00	; 0
     eb2:	28 30       	cpi	r18, 0x08	; 8
     eb4:	68 f3       	brcs	.-38     	; 0xe90 <prvInitialiseNewTask+0x38>
     eb6:	f5 01       	movw	r30, r10
     eb8:	10 a2       	std	Z+32, r1	; 0x20
     eba:	f3 e0       	ldi	r31, 0x03	; 3
     ebc:	fe 15       	cp	r31, r14
     ebe:	20 f4       	brcc	.+8      	; 0xec8 <prvInitialiseNewTask+0x70>
     ec0:	0f 2e       	mov	r0, r31
     ec2:	f3 e0       	ldi	r31, 0x03	; 3
     ec4:	ef 2e       	mov	r14, r31
     ec6:	f0 2d       	mov	r31, r0
     ec8:	f5 01       	movw	r30, r10
     eca:	e6 8a       	std	Z+22, r14	; 0x16
     ecc:	c5 01       	movw	r24, r10
     ece:	02 96       	adiw	r24, 0x02	; 2
     ed0:	0e 94 ff 01 	call	0x3fe	; 0x3fe <vListInitialiseItem>
     ed4:	c5 01       	movw	r24, r10
     ed6:	0c 96       	adiw	r24, 0x0c	; 12
     ed8:	0e 94 ff 01 	call	0x3fe	; 0x3fe <vListInitialiseItem>
     edc:	f5 01       	movw	r30, r10
     ede:	b1 86       	std	Z+9, r11	; 0x09
     ee0:	a0 86       	std	Z+8, r10	; 0x08
     ee2:	84 e0       	ldi	r24, 0x04	; 4
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	8e 19       	sub	r24, r14
     ee8:	91 09       	sbc	r25, r1
     eea:	95 87       	std	Z+13, r25	; 0x0d
     eec:	84 87       	std	Z+12, r24	; 0x0c
     eee:	b3 8a       	std	Z+19, r11	; 0x13
     ef0:	a2 8a       	std	Z+18, r10	; 0x12
     ef2:	a8 01       	movw	r20, r16
     ef4:	b4 01       	movw	r22, r8
     ef6:	c3 01       	movw	r24, r6
     ef8:	0e 94 2e 03 	call	0x65c	; 0x65c <pxPortInitialiseStack>
     efc:	f5 01       	movw	r30, r10
     efe:	91 83       	std	Z+1, r25	; 0x01
     f00:	80 83       	st	Z, r24
     f02:	c1 14       	cp	r12, r1
     f04:	d1 04       	cpc	r13, r1
     f06:	19 f0       	breq	.+6      	; 0xf0e <prvInitialiseNewTask+0xb6>
     f08:	f6 01       	movw	r30, r12
     f0a:	b1 82       	std	Z+1, r11	; 0x01
     f0c:	a0 82       	st	Z, r10
     f0e:	df 91       	pop	r29
     f10:	cf 91       	pop	r28
     f12:	1f 91       	pop	r17
     f14:	0f 91       	pop	r16
     f16:	ef 90       	pop	r14
     f18:	df 90       	pop	r13
     f1a:	cf 90       	pop	r12
     f1c:	bf 90       	pop	r11
     f1e:	af 90       	pop	r10
     f20:	9f 90       	pop	r9
     f22:	8f 90       	pop	r8
     f24:	7f 90       	pop	r7
     f26:	6f 90       	pop	r6
     f28:	08 95       	ret

00000f2a <prvInitialiseTaskLists>:
     f2a:	cf 93       	push	r28
     f2c:	c0 e0       	ldi	r28, 0x00	; 0
     f2e:	10 c0       	rjmp	.+32     	; 0xf50 <prvInitialiseTaskLists+0x26>
     f30:	8c 2f       	mov	r24, r28
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	9c 01       	movw	r18, r24
     f36:	22 0f       	add	r18, r18
     f38:	33 1f       	adc	r19, r19
     f3a:	22 0f       	add	r18, r18
     f3c:	33 1f       	adc	r19, r19
     f3e:	22 0f       	add	r18, r18
     f40:	33 1f       	adc	r19, r19
     f42:	82 0f       	add	r24, r18
     f44:	93 1f       	adc	r25, r19
     f46:	8f 52       	subi	r24, 0x2F	; 47
     f48:	99 4f       	sbci	r25, 0xF9	; 249
     f4a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <vListInitialise>
     f4e:	cf 5f       	subi	r28, 0xFF	; 255
     f50:	c4 30       	cpi	r28, 0x04	; 4
     f52:	70 f3       	brcs	.-36     	; 0xf30 <prvInitialiseTaskLists+0x6>
     f54:	88 ec       	ldi	r24, 0xC8	; 200
     f56:	96 e0       	ldi	r25, 0x06	; 6
     f58:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <vListInitialise>
     f5c:	8f eb       	ldi	r24, 0xBF	; 191
     f5e:	96 e0       	ldi	r25, 0x06	; 6
     f60:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <vListInitialise>
     f64:	82 eb       	ldi	r24, 0xB2	; 178
     f66:	96 e0       	ldi	r25, 0x06	; 6
     f68:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <vListInitialise>
     f6c:	89 ea       	ldi	r24, 0xA9	; 169
     f6e:	96 e0       	ldi	r25, 0x06	; 6
     f70:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <vListInitialise>
     f74:	88 ec       	ldi	r24, 0xC8	; 200
     f76:	96 e0       	ldi	r25, 0x06	; 6
     f78:	90 93 be 06 	sts	0x06BE, r25	; 0x8006be <pxDelayedTaskList+0x1>
     f7c:	80 93 bd 06 	sts	0x06BD, r24	; 0x8006bd <pxDelayedTaskList>
     f80:	8f eb       	ldi	r24, 0xBF	; 191
     f82:	96 e0       	ldi	r25, 0x06	; 6
     f84:	90 93 bc 06 	sts	0x06BC, r25	; 0x8006bc <pxOverflowDelayedTaskList+0x1>
     f88:	80 93 bb 06 	sts	0x06BB, r24	; 0x8006bb <pxOverflowDelayedTaskList>
     f8c:	cf 91       	pop	r28
     f8e:	08 95       	ret

00000f90 <prvAddNewTaskToReadyList>:
     f90:	cf 93       	push	r28
     f92:	df 93       	push	r29
     f94:	ec 01       	movw	r28, r24
     f96:	0f b6       	in	r0, 0x3f	; 63
     f98:	f8 94       	cli
     f9a:	0f 92       	push	r0
     f9c:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <uxCurrentNumberOfTasks>
     fa0:	8f 5f       	subi	r24, 0xFF	; 255
     fa2:	80 93 a7 06 	sts	0x06A7, r24	; 0x8006a7 <uxCurrentNumberOfTasks>
     fa6:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <pxCurrentTCB>
     faa:	90 91 f6 06 	lds	r25, 0x06F6	; 0x8006f6 <pxCurrentTCB+0x1>
     fae:	89 2b       	or	r24, r25
     fb0:	59 f4       	brne	.+22     	; 0xfc8 <prvAddNewTaskToReadyList+0x38>
     fb2:	d0 93 f6 06 	sts	0x06F6, r29	; 0x8006f6 <pxCurrentTCB+0x1>
     fb6:	c0 93 f5 06 	sts	0x06F5, r28	; 0x8006f5 <pxCurrentTCB>
     fba:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <uxCurrentNumberOfTasks>
     fbe:	81 30       	cpi	r24, 0x01	; 1
     fc0:	99 f4       	brne	.+38     	; 0xfe8 <prvAddNewTaskToReadyList+0x58>
     fc2:	0e 94 95 07 	call	0xf2a	; 0xf2a <prvInitialiseTaskLists>
     fc6:	10 c0       	rjmp	.+32     	; 0xfe8 <prvAddNewTaskToReadyList+0x58>
     fc8:	80 91 a3 06 	lds	r24, 0x06A3	; 0x8006a3 <xSchedulerRunning>
     fcc:	81 11       	cpse	r24, r1
     fce:	0c c0       	rjmp	.+24     	; 0xfe8 <prvAddNewTaskToReadyList+0x58>
     fd0:	e0 91 f5 06 	lds	r30, 0x06F5	; 0x8006f5 <pxCurrentTCB>
     fd4:	f0 91 f6 06 	lds	r31, 0x06F6	; 0x8006f6 <pxCurrentTCB+0x1>
     fd8:	96 89       	ldd	r25, Z+22	; 0x16
     fda:	8e 89       	ldd	r24, Y+22	; 0x16
     fdc:	89 17       	cp	r24, r25
     fde:	20 f0       	brcs	.+8      	; 0xfe8 <prvAddNewTaskToReadyList+0x58>
     fe0:	d0 93 f6 06 	sts	0x06F6, r29	; 0x8006f6 <pxCurrentTCB+0x1>
     fe4:	c0 93 f5 06 	sts	0x06F5, r28	; 0x8006f5 <pxCurrentTCB>
     fe8:	80 91 9e 06 	lds	r24, 0x069E	; 0x80069e <uxTaskNumber>
     fec:	8f 5f       	subi	r24, 0xFF	; 255
     fee:	80 93 9e 06 	sts	0x069E, r24	; 0x80069e <uxTaskNumber>
     ff2:	8e 89       	ldd	r24, Y+22	; 0x16
     ff4:	90 91 a4 06 	lds	r25, 0x06A4	; 0x8006a4 <uxTopReadyPriority>
     ff8:	98 17       	cp	r25, r24
     ffa:	10 f4       	brcc	.+4      	; 0x1000 <prvAddNewTaskToReadyList+0x70>
     ffc:	80 93 a4 06 	sts	0x06A4, r24	; 0x8006a4 <uxTopReadyPriority>
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	fc 01       	movw	r30, r24
    1004:	ee 0f       	add	r30, r30
    1006:	ff 1f       	adc	r31, r31
    1008:	ee 0f       	add	r30, r30
    100a:	ff 1f       	adc	r31, r31
    100c:	ee 0f       	add	r30, r30
    100e:	ff 1f       	adc	r31, r31
    1010:	8e 0f       	add	r24, r30
    1012:	9f 1f       	adc	r25, r31
    1014:	fc 01       	movw	r30, r24
    1016:	ef 52       	subi	r30, 0x2F	; 47
    1018:	f9 4f       	sbci	r31, 0xF9	; 249
    101a:	01 80       	ldd	r0, Z+1	; 0x01
    101c:	f2 81       	ldd	r31, Z+2	; 0x02
    101e:	e0 2d       	mov	r30, r0
    1020:	fd 83       	std	Y+5, r31	; 0x05
    1022:	ec 83       	std	Y+4, r30	; 0x04
    1024:	84 81       	ldd	r24, Z+4	; 0x04
    1026:	95 81       	ldd	r25, Z+5	; 0x05
    1028:	9f 83       	std	Y+7, r25	; 0x07
    102a:	8e 83       	std	Y+6, r24	; 0x06
    102c:	a4 81       	ldd	r26, Z+4	; 0x04
    102e:	b5 81       	ldd	r27, Z+5	; 0x05
    1030:	ce 01       	movw	r24, r28
    1032:	02 96       	adiw	r24, 0x02	; 2
    1034:	13 96       	adiw	r26, 0x03	; 3
    1036:	9c 93       	st	X, r25
    1038:	8e 93       	st	-X, r24
    103a:	12 97       	sbiw	r26, 0x02	; 2
    103c:	95 83       	std	Z+5, r25	; 0x05
    103e:	84 83       	std	Z+4, r24	; 0x04
    1040:	ee 89       	ldd	r30, Y+22	; 0x16
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	cf 01       	movw	r24, r30
    1046:	88 0f       	add	r24, r24
    1048:	99 1f       	adc	r25, r25
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	88 0f       	add	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	e8 0f       	add	r30, r24
    1054:	f9 1f       	adc	r31, r25
    1056:	ef 52       	subi	r30, 0x2F	; 47
    1058:	f9 4f       	sbci	r31, 0xF9	; 249
    105a:	fb 87       	std	Y+11, r31	; 0x0b
    105c:	ea 87       	std	Y+10, r30	; 0x0a
    105e:	80 81       	ld	r24, Z
    1060:	8f 5f       	subi	r24, 0xFF	; 255
    1062:	80 83       	st	Z, r24
    1064:	0f 90       	pop	r0
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	80 91 a3 06 	lds	r24, 0x06A3	; 0x8006a3 <xSchedulerRunning>
    106c:	88 23       	and	r24, r24
    106e:	51 f0       	breq	.+20     	; 0x1084 <prvAddNewTaskToReadyList+0xf4>
    1070:	e0 91 f5 06 	lds	r30, 0x06F5	; 0x8006f5 <pxCurrentTCB>
    1074:	f0 91 f6 06 	lds	r31, 0x06F6	; 0x8006f6 <pxCurrentTCB+0x1>
    1078:	96 89       	ldd	r25, Z+22	; 0x16
    107a:	8e 89       	ldd	r24, Y+22	; 0x16
    107c:	98 17       	cp	r25, r24
    107e:	10 f4       	brcc	.+4      	; 0x1084 <prvAddNewTaskToReadyList+0xf4>
    1080:	0e 94 c9 03 	call	0x792	; 0x792 <vPortYield>
    1084:	df 91       	pop	r29
    1086:	cf 91       	pop	r28
    1088:	08 95       	ret

0000108a <prvCheckTasksWaitingTermination>:
    108a:	cf 93       	push	r28
    108c:	df 93       	push	r29
    108e:	1c c0       	rjmp	.+56     	; 0x10c8 <prvCheckTasksWaitingTermination+0x3e>
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	f8 94       	cli
    1094:	0f 92       	push	r0
    1096:	e0 91 ae 06 	lds	r30, 0x06AE	; 0x8006ae <xTasksWaitingTermination+0x5>
    109a:	f0 91 af 06 	lds	r31, 0x06AF	; 0x8006af <xTasksWaitingTermination+0x6>
    109e:	c6 81       	ldd	r28, Z+6	; 0x06
    10a0:	d7 81       	ldd	r29, Z+7	; 0x07
    10a2:	ce 01       	movw	r24, r28
    10a4:	02 96       	adiw	r24, 0x02	; 2
    10a6:	0e 94 34 02 	call	0x468	; 0x468 <uxListRemove>
    10aa:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <uxCurrentNumberOfTasks>
    10ae:	81 50       	subi	r24, 0x01	; 1
    10b0:	80 93 a7 06 	sts	0x06A7, r24	; 0x8006a7 <uxCurrentNumberOfTasks>
    10b4:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <uxDeletedTasksWaitingCleanUp>
    10b8:	81 50       	subi	r24, 0x01	; 1
    10ba:	80 93 a8 06 	sts	0x06A8, r24	; 0x8006a8 <uxDeletedTasksWaitingCleanUp>
    10be:	0f 90       	pop	r0
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	ce 01       	movw	r24, r28
    10c4:	0e 94 1f 07 	call	0xe3e	; 0xe3e <prvDeleteTCB>
    10c8:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <uxDeletedTasksWaitingCleanUp>
    10cc:	81 11       	cpse	r24, r1
    10ce:	e0 cf       	rjmp	.-64     	; 0x1090 <prvCheckTasksWaitingTermination+0x6>
    10d0:	df 91       	pop	r29
    10d2:	cf 91       	pop	r28
    10d4:	08 95       	ret

000010d6 <prvIdleTask>:
    10d6:	0e 94 45 08 	call	0x108a	; 0x108a <prvCheckTasksWaitingTermination>
    10da:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <pxReadyTasksLists>
    10de:	82 30       	cpi	r24, 0x02	; 2
    10e0:	d0 f3       	brcs	.-12     	; 0x10d6 <prvIdleTask>
    10e2:	0e 94 c9 03 	call	0x792	; 0x792 <vPortYield>
    10e6:	f7 cf       	rjmp	.-18     	; 0x10d6 <prvIdleTask>

000010e8 <prvAddCurrentTaskToDelayedList>:
    10e8:	0f 93       	push	r16
    10ea:	1f 93       	push	r17
    10ec:	cf 93       	push	r28
    10ee:	df 93       	push	r29
    10f0:	ec 01       	movw	r28, r24
    10f2:	00 91 a5 06 	lds	r16, 0x06A5	; 0x8006a5 <xTickCount>
    10f6:	10 91 a6 06 	lds	r17, 0x06A6	; 0x8006a6 <xTickCount+0x1>
    10fa:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <pxCurrentTCB>
    10fe:	90 91 f6 06 	lds	r25, 0x06F6	; 0x8006f6 <pxCurrentTCB+0x1>
    1102:	02 96       	adiw	r24, 0x02	; 2
    1104:	0e 94 34 02 	call	0x468	; 0x468 <uxListRemove>
    1108:	c0 0f       	add	r28, r16
    110a:	d1 1f       	adc	r29, r17
    110c:	e0 91 f5 06 	lds	r30, 0x06F5	; 0x8006f5 <pxCurrentTCB>
    1110:	f0 91 f6 06 	lds	r31, 0x06F6	; 0x8006f6 <pxCurrentTCB+0x1>
    1114:	d3 83       	std	Z+3, r29	; 0x03
    1116:	c2 83       	std	Z+2, r28	; 0x02
    1118:	c0 17       	cp	r28, r16
    111a:	d1 07       	cpc	r29, r17
    111c:	68 f4       	brcc	.+26     	; 0x1138 <prvAddCurrentTaskToDelayedList+0x50>
    111e:	60 91 f5 06 	lds	r22, 0x06F5	; 0x8006f5 <pxCurrentTCB>
    1122:	70 91 f6 06 	lds	r23, 0x06F6	; 0x8006f6 <pxCurrentTCB+0x1>
    1126:	80 91 bb 06 	lds	r24, 0x06BB	; 0x8006bb <pxOverflowDelayedTaskList>
    112a:	90 91 bc 06 	lds	r25, 0x06BC	; 0x8006bc <pxOverflowDelayedTaskList+0x1>
    112e:	6e 5f       	subi	r22, 0xFE	; 254
    1130:	7f 4f       	sbci	r23, 0xFF	; 255
    1132:	0e 94 03 02 	call	0x406	; 0x406 <vListInsert>
    1136:	17 c0       	rjmp	.+46     	; 0x1166 <prvAddCurrentTaskToDelayedList+0x7e>
    1138:	60 91 f5 06 	lds	r22, 0x06F5	; 0x8006f5 <pxCurrentTCB>
    113c:	70 91 f6 06 	lds	r23, 0x06F6	; 0x8006f6 <pxCurrentTCB+0x1>
    1140:	80 91 bd 06 	lds	r24, 0x06BD	; 0x8006bd <pxDelayedTaskList>
    1144:	90 91 be 06 	lds	r25, 0x06BE	; 0x8006be <pxDelayedTaskList+0x1>
    1148:	6e 5f       	subi	r22, 0xFE	; 254
    114a:	7f 4f       	sbci	r23, 0xFF	; 255
    114c:	0e 94 03 02 	call	0x406	; 0x406 <vListInsert>
    1150:	80 91 9c 06 	lds	r24, 0x069C	; 0x80069c <xNextTaskUnblockTime>
    1154:	90 91 9d 06 	lds	r25, 0x069D	; 0x80069d <xNextTaskUnblockTime+0x1>
    1158:	c8 17       	cp	r28, r24
    115a:	d9 07       	cpc	r29, r25
    115c:	20 f4       	brcc	.+8      	; 0x1166 <prvAddCurrentTaskToDelayedList+0x7e>
    115e:	d0 93 9d 06 	sts	0x069D, r29	; 0x80069d <xNextTaskUnblockTime+0x1>
    1162:	c0 93 9c 06 	sts	0x069C, r28	; 0x80069c <xNextTaskUnblockTime>
    1166:	df 91       	pop	r29
    1168:	cf 91       	pop	r28
    116a:	1f 91       	pop	r17
    116c:	0f 91       	pop	r16
    116e:	08 95       	ret

00001170 <xTaskCreate>:
    1170:	2f 92       	push	r2
    1172:	3f 92       	push	r3
    1174:	4f 92       	push	r4
    1176:	5f 92       	push	r5
    1178:	6f 92       	push	r6
    117a:	7f 92       	push	r7
    117c:	8f 92       	push	r8
    117e:	9f 92       	push	r9
    1180:	af 92       	push	r10
    1182:	bf 92       	push	r11
    1184:	cf 92       	push	r12
    1186:	df 92       	push	r13
    1188:	ef 92       	push	r14
    118a:	ff 92       	push	r15
    118c:	0f 93       	push	r16
    118e:	1f 93       	push	r17
    1190:	cf 93       	push	r28
    1192:	df 93       	push	r29
    1194:	3c 01       	movw	r6, r24
    1196:	1b 01       	movw	r2, r22
    1198:	5a 01       	movw	r10, r20
    119a:	29 01       	movw	r4, r18
    119c:	ca 01       	movw	r24, r20
    119e:	0e 94 11 01 	call	0x222	; 0x222 <pvPortMalloc>
    11a2:	6c 01       	movw	r12, r24
    11a4:	89 2b       	or	r24, r25
    11a6:	99 f0       	breq	.+38     	; 0x11ce <xTaskCreate+0x5e>
    11a8:	86 e2       	ldi	r24, 0x26	; 38
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	0e 94 11 01 	call	0x222	; 0x222 <pvPortMalloc>
    11b0:	ec 01       	movw	r28, r24
    11b2:	89 2b       	or	r24, r25
    11b4:	41 f0       	breq	.+16     	; 0x11c6 <xTaskCreate+0x56>
    11b6:	86 e2       	ldi	r24, 0x26	; 38
    11b8:	fe 01       	movw	r30, r28
    11ba:	11 92       	st	Z+, r1
    11bc:	8a 95       	dec	r24
    11be:	e9 f7       	brne	.-6      	; 0x11ba <xTaskCreate+0x4a>
    11c0:	d8 8e       	std	Y+24, r13	; 0x18
    11c2:	cf 8a       	std	Y+23, r12	; 0x17
    11c4:	06 c0       	rjmp	.+12     	; 0x11d2 <xTaskCreate+0x62>
    11c6:	c6 01       	movw	r24, r12
    11c8:	0e 94 ab 01 	call	0x356	; 0x356 <vPortFree>
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <xTaskCreate+0x62>
    11ce:	c0 e0       	ldi	r28, 0x00	; 0
    11d0:	d0 e0       	ldi	r29, 0x00	; 0
    11d2:	20 97       	sbiw	r28, 0x00	; 0
    11d4:	91 f0       	breq	.+36     	; 0x11fa <xTaskCreate+0x8a>
    11d6:	95 01       	movw	r18, r10
    11d8:	40 e0       	ldi	r20, 0x00	; 0
    11da:	50 e0       	ldi	r21, 0x00	; 0
    11dc:	81 2c       	mov	r8, r1
    11de:	91 2c       	mov	r9, r1
    11e0:	5e 01       	movw	r10, r28
    11e2:	67 01       	movw	r12, r14
    11e4:	e0 2e       	mov	r14, r16
    11e6:	82 01       	movw	r16, r4
    11e8:	b1 01       	movw	r22, r2
    11ea:	c3 01       	movw	r24, r6
    11ec:	0e 94 2c 07 	call	0xe58	; 0xe58 <prvInitialiseNewTask>
    11f0:	ce 01       	movw	r24, r28
    11f2:	0e 94 c8 07 	call	0xf90	; 0xf90 <prvAddNewTaskToReadyList>
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	01 c0       	rjmp	.+2      	; 0x11fc <xTaskCreate+0x8c>
    11fa:	8f ef       	ldi	r24, 0xFF	; 255
    11fc:	df 91       	pop	r29
    11fe:	cf 91       	pop	r28
    1200:	1f 91       	pop	r17
    1202:	0f 91       	pop	r16
    1204:	ff 90       	pop	r15
    1206:	ef 90       	pop	r14
    1208:	df 90       	pop	r13
    120a:	cf 90       	pop	r12
    120c:	bf 90       	pop	r11
    120e:	af 90       	pop	r10
    1210:	9f 90       	pop	r9
    1212:	8f 90       	pop	r8
    1214:	7f 90       	pop	r7
    1216:	6f 90       	pop	r6
    1218:	5f 90       	pop	r5
    121a:	4f 90       	pop	r4
    121c:	3f 90       	pop	r3
    121e:	2f 90       	pop	r2
    1220:	08 95       	ret

00001222 <vTaskStartScheduler>:
    1222:	ef 92       	push	r14
    1224:	ff 92       	push	r15
    1226:	0f 93       	push	r16
    1228:	0f 2e       	mov	r0, r31
    122a:	fa e9       	ldi	r31, 0x9A	; 154
    122c:	ef 2e       	mov	r14, r31
    122e:	f6 e0       	ldi	r31, 0x06	; 6
    1230:	ff 2e       	mov	r15, r31
    1232:	f0 2d       	mov	r31, r0
    1234:	00 e0       	ldi	r16, 0x00	; 0
    1236:	20 e0       	ldi	r18, 0x00	; 0
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	40 e2       	ldi	r20, 0x20	; 32
    123c:	53 e0       	ldi	r21, 0x03	; 3
    123e:	67 ea       	ldi	r22, 0xA7	; 167
    1240:	70 e0       	ldi	r23, 0x00	; 0
    1242:	8b e6       	ldi	r24, 0x6B	; 107
    1244:	98 e0       	ldi	r25, 0x08	; 8
    1246:	0e 94 b8 08 	call	0x1170	; 0x1170 <xTaskCreate>
    124a:	81 30       	cpi	r24, 0x01	; 1
    124c:	81 f4       	brne	.+32     	; 0x126e <vTaskStartScheduler+0x4c>
    124e:	f8 94       	cli
    1250:	8f ef       	ldi	r24, 0xFF	; 255
    1252:	9f ef       	ldi	r25, 0xFF	; 255
    1254:	90 93 9d 06 	sts	0x069D, r25	; 0x80069d <xNextTaskUnblockTime+0x1>
    1258:	80 93 9c 06 	sts	0x069C, r24	; 0x80069c <xNextTaskUnblockTime>
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	80 93 a3 06 	sts	0x06A3, r24	; 0x8006a3 <xSchedulerRunning>
    1262:	10 92 a6 06 	sts	0x06A6, r1	; 0x8006a6 <xTickCount+0x1>
    1266:	10 92 a5 06 	sts	0x06A5, r1	; 0x8006a5 <xTickCount>
    126a:	0e 94 9a 03 	call	0x734	; 0x734 <xPortStartScheduler>
    126e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <uxTopUsedPriority>
    1272:	0f 91       	pop	r16
    1274:	ff 90       	pop	r15
    1276:	ef 90       	pop	r14
    1278:	08 95       	ret

0000127a <vTaskSuspendAll>:
    127a:	80 91 99 06 	lds	r24, 0x0699	; 0x800699 <uxSchedulerSuspended>
    127e:	8f 5f       	subi	r24, 0xFF	; 255
    1280:	80 93 99 06 	sts	0x0699, r24	; 0x800699 <uxSchedulerSuspended>
    1284:	08 95       	ret

00001286 <xTaskIncrementTick>:
    1286:	0f 93       	push	r16
    1288:	1f 93       	push	r17
    128a:	cf 93       	push	r28
    128c:	df 93       	push	r29
    128e:	80 91 99 06 	lds	r24, 0x0699	; 0x800699 <uxSchedulerSuspended>
    1292:	81 11       	cpse	r24, r1
    1294:	01 c1       	rjmp	.+514    	; 0x1498 <xTaskIncrementTick+0x212>
    1296:	c0 91 a5 06 	lds	r28, 0x06A5	; 0x8006a5 <xTickCount>
    129a:	d0 91 a6 06 	lds	r29, 0x06A6	; 0x8006a6 <xTickCount+0x1>
    129e:	8e 01       	movw	r16, r28
    12a0:	0f 5f       	subi	r16, 0xFF	; 255
    12a2:	1f 4f       	sbci	r17, 0xFF	; 255
    12a4:	10 93 a6 06 	sts	0x06A6, r17	; 0x8006a6 <xTickCount+0x1>
    12a8:	00 93 a5 06 	sts	0x06A5, r16	; 0x8006a5 <xTickCount>
    12ac:	01 15       	cp	r16, r1
    12ae:	11 05       	cpc	r17, r1
    12b0:	b9 f4       	brne	.+46     	; 0x12e0 <xTaskIncrementTick+0x5a>
    12b2:	80 91 bd 06 	lds	r24, 0x06BD	; 0x8006bd <pxDelayedTaskList>
    12b6:	90 91 be 06 	lds	r25, 0x06BE	; 0x8006be <pxDelayedTaskList+0x1>
    12ba:	20 91 bb 06 	lds	r18, 0x06BB	; 0x8006bb <pxOverflowDelayedTaskList>
    12be:	30 91 bc 06 	lds	r19, 0x06BC	; 0x8006bc <pxOverflowDelayedTaskList+0x1>
    12c2:	30 93 be 06 	sts	0x06BE, r19	; 0x8006be <pxDelayedTaskList+0x1>
    12c6:	20 93 bd 06 	sts	0x06BD, r18	; 0x8006bd <pxDelayedTaskList>
    12ca:	90 93 bc 06 	sts	0x06BC, r25	; 0x8006bc <pxOverflowDelayedTaskList+0x1>
    12ce:	80 93 bb 06 	sts	0x06BB, r24	; 0x8006bb <pxOverflowDelayedTaskList>
    12d2:	80 91 9f 06 	lds	r24, 0x069F	; 0x80069f <xNumOfOverflows>
    12d6:	8f 5f       	subi	r24, 0xFF	; 255
    12d8:	80 93 9f 06 	sts	0x069F, r24	; 0x80069f <xNumOfOverflows>
    12dc:	0e 94 03 07 	call	0xe06	; 0xe06 <prvResetNextTaskUnblockTime>
    12e0:	80 91 9c 06 	lds	r24, 0x069C	; 0x80069c <xNextTaskUnblockTime>
    12e4:	90 91 9d 06 	lds	r25, 0x069D	; 0x80069d <xNextTaskUnblockTime+0x1>
    12e8:	08 17       	cp	r16, r24
    12ea:	19 07       	cpc	r17, r25
    12ec:	20 f4       	brcc	.+8      	; 0x12f6 <xTaskIncrementTick+0x70>
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    12f0:	b8 c0       	rjmp	.+368    	; 0x1462 <xTaskIncrementTick+0x1dc>
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	01 c0       	rjmp	.+2      	; 0x12f8 <xTaskIncrementTick+0x72>
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	e0 91 bd 06 	lds	r30, 0x06BD	; 0x8006bd <pxDelayedTaskList>
    12fc:	f0 91 be 06 	lds	r31, 0x06BE	; 0x8006be <pxDelayedTaskList+0x1>
    1300:	90 81       	ld	r25, Z
    1302:	91 11       	cpse	r25, r1
    1304:	07 c0       	rjmp	.+14     	; 0x1314 <xTaskIncrementTick+0x8e>
    1306:	2f ef       	ldi	r18, 0xFF	; 255
    1308:	3f ef       	ldi	r19, 0xFF	; 255
    130a:	30 93 9d 06 	sts	0x069D, r19	; 0x80069d <xNextTaskUnblockTime+0x1>
    130e:	20 93 9c 06 	sts	0x069C, r18	; 0x80069c <xNextTaskUnblockTime>
    1312:	a7 c0       	rjmp	.+334    	; 0x1462 <xTaskIncrementTick+0x1dc>
    1314:	e0 91 bd 06 	lds	r30, 0x06BD	; 0x8006bd <pxDelayedTaskList>
    1318:	f0 91 be 06 	lds	r31, 0x06BE	; 0x8006be <pxDelayedTaskList+0x1>
    131c:	05 80       	ldd	r0, Z+5	; 0x05
    131e:	f6 81       	ldd	r31, Z+6	; 0x06
    1320:	e0 2d       	mov	r30, r0
    1322:	06 80       	ldd	r0, Z+6	; 0x06
    1324:	f7 81       	ldd	r31, Z+7	; 0x07
    1326:	e0 2d       	mov	r30, r0
    1328:	22 81       	ldd	r18, Z+2	; 0x02
    132a:	33 81       	ldd	r19, Z+3	; 0x03
    132c:	02 17       	cp	r16, r18
    132e:	13 07       	cpc	r17, r19
    1330:	28 f4       	brcc	.+10     	; 0x133c <xTaskIncrementTick+0xb6>
    1332:	30 93 9d 06 	sts	0x069D, r19	; 0x80069d <xNextTaskUnblockTime+0x1>
    1336:	20 93 9c 06 	sts	0x069C, r18	; 0x80069c <xNextTaskUnblockTime>
    133a:	93 c0       	rjmp	.+294    	; 0x1462 <xTaskIncrementTick+0x1dc>
    133c:	a2 85       	ldd	r26, Z+10	; 0x0a
    133e:	b3 85       	ldd	r27, Z+11	; 0x0b
    1340:	24 81       	ldd	r18, Z+4	; 0x04
    1342:	35 81       	ldd	r19, Z+5	; 0x05
    1344:	46 81       	ldd	r20, Z+6	; 0x06
    1346:	57 81       	ldd	r21, Z+7	; 0x07
    1348:	e9 01       	movw	r28, r18
    134a:	5d 83       	std	Y+5, r21	; 0x05
    134c:	4c 83       	std	Y+4, r20	; 0x04
    134e:	26 81       	ldd	r18, Z+6	; 0x06
    1350:	37 81       	ldd	r19, Z+7	; 0x07
    1352:	44 81       	ldd	r20, Z+4	; 0x04
    1354:	55 81       	ldd	r21, Z+5	; 0x05
    1356:	e9 01       	movw	r28, r18
    1358:	5b 83       	std	Y+3, r21	; 0x03
    135a:	4a 83       	std	Y+2, r20	; 0x02
    135c:	11 96       	adiw	r26, 0x01	; 1
    135e:	2d 91       	ld	r18, X+
    1360:	3c 91       	ld	r19, X
    1362:	12 97       	sbiw	r26, 0x02	; 2
    1364:	af 01       	movw	r20, r30
    1366:	4e 5f       	subi	r20, 0xFE	; 254
    1368:	5f 4f       	sbci	r21, 0xFF	; 255
    136a:	24 17       	cp	r18, r20
    136c:	35 07       	cpc	r19, r21
    136e:	31 f4       	brne	.+12     	; 0x137c <xTaskIncrementTick+0xf6>
    1370:	26 81       	ldd	r18, Z+6	; 0x06
    1372:	37 81       	ldd	r19, Z+7	; 0x07
    1374:	12 96       	adiw	r26, 0x02	; 2
    1376:	3c 93       	st	X, r19
    1378:	2e 93       	st	-X, r18
    137a:	11 97       	sbiw	r26, 0x01	; 1
    137c:	13 86       	std	Z+11, r1	; 0x0b
    137e:	12 86       	std	Z+10, r1	; 0x0a
    1380:	9c 91       	ld	r25, X
    1382:	91 50       	subi	r25, 0x01	; 1
    1384:	9c 93       	st	X, r25
    1386:	a4 89       	ldd	r26, Z+20	; 0x14
    1388:	b5 89       	ldd	r27, Z+21	; 0x15
    138a:	10 97       	sbiw	r26, 0x00	; 0
    138c:	19 f1       	breq	.+70     	; 0x13d4 <xTaskIncrementTick+0x14e>
    138e:	26 85       	ldd	r18, Z+14	; 0x0e
    1390:	37 85       	ldd	r19, Z+15	; 0x0f
    1392:	60 89       	ldd	r22, Z+16	; 0x10
    1394:	71 89       	ldd	r23, Z+17	; 0x11
    1396:	e9 01       	movw	r28, r18
    1398:	7d 83       	std	Y+5, r23	; 0x05
    139a:	6c 83       	std	Y+4, r22	; 0x04
    139c:	20 89       	ldd	r18, Z+16	; 0x10
    139e:	31 89       	ldd	r19, Z+17	; 0x11
    13a0:	66 85       	ldd	r22, Z+14	; 0x0e
    13a2:	77 85       	ldd	r23, Z+15	; 0x0f
    13a4:	e9 01       	movw	r28, r18
    13a6:	7b 83       	std	Y+3, r23	; 0x03
    13a8:	6a 83       	std	Y+2, r22	; 0x02
    13aa:	11 96       	adiw	r26, 0x01	; 1
    13ac:	6d 91       	ld	r22, X+
    13ae:	7c 91       	ld	r23, X
    13b0:	12 97       	sbiw	r26, 0x02	; 2
    13b2:	9f 01       	movw	r18, r30
    13b4:	24 5f       	subi	r18, 0xF4	; 244
    13b6:	3f 4f       	sbci	r19, 0xFF	; 255
    13b8:	62 17       	cp	r22, r18
    13ba:	73 07       	cpc	r23, r19
    13bc:	31 f4       	brne	.+12     	; 0x13ca <xTaskIncrementTick+0x144>
    13be:	20 89       	ldd	r18, Z+16	; 0x10
    13c0:	31 89       	ldd	r19, Z+17	; 0x11
    13c2:	12 96       	adiw	r26, 0x02	; 2
    13c4:	3c 93       	st	X, r19
    13c6:	2e 93       	st	-X, r18
    13c8:	11 97       	sbiw	r26, 0x01	; 1
    13ca:	15 8a       	std	Z+21, r1	; 0x15
    13cc:	14 8a       	std	Z+20, r1	; 0x14
    13ce:	9c 91       	ld	r25, X
    13d0:	91 50       	subi	r25, 0x01	; 1
    13d2:	9c 93       	st	X, r25
    13d4:	26 89       	ldd	r18, Z+22	; 0x16
    13d6:	90 91 a4 06 	lds	r25, 0x06A4	; 0x8006a4 <uxTopReadyPriority>
    13da:	92 17       	cp	r25, r18
    13dc:	10 f4       	brcc	.+4      	; 0x13e2 <xTaskIncrementTick+0x15c>
    13de:	20 93 a4 06 	sts	0x06A4, r18	; 0x8006a4 <uxTopReadyPriority>
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	d9 01       	movw	r26, r18
    13e6:	aa 0f       	add	r26, r26
    13e8:	bb 1f       	adc	r27, r27
    13ea:	aa 0f       	add	r26, r26
    13ec:	bb 1f       	adc	r27, r27
    13ee:	aa 0f       	add	r26, r26
    13f0:	bb 1f       	adc	r27, r27
    13f2:	2a 0f       	add	r18, r26
    13f4:	3b 1f       	adc	r19, r27
    13f6:	d9 01       	movw	r26, r18
    13f8:	af 52       	subi	r26, 0x2F	; 47
    13fa:	b9 4f       	sbci	r27, 0xF9	; 249
    13fc:	11 96       	adiw	r26, 0x01	; 1
    13fe:	0d 90       	ld	r0, X+
    1400:	bc 91       	ld	r27, X
    1402:	a0 2d       	mov	r26, r0
    1404:	b5 83       	std	Z+5, r27	; 0x05
    1406:	a4 83       	std	Z+4, r26	; 0x04
    1408:	14 96       	adiw	r26, 0x04	; 4
    140a:	2d 91       	ld	r18, X+
    140c:	3c 91       	ld	r19, X
    140e:	15 97       	sbiw	r26, 0x05	; 5
    1410:	37 83       	std	Z+7, r19	; 0x07
    1412:	26 83       	std	Z+6, r18	; 0x06
    1414:	14 96       	adiw	r26, 0x04	; 4
    1416:	2d 91       	ld	r18, X+
    1418:	3c 91       	ld	r19, X
    141a:	15 97       	sbiw	r26, 0x05	; 5
    141c:	e9 01       	movw	r28, r18
    141e:	5b 83       	std	Y+3, r21	; 0x03
    1420:	4a 83       	std	Y+2, r20	; 0x02
    1422:	15 96       	adiw	r26, 0x05	; 5
    1424:	5c 93       	st	X, r21
    1426:	4e 93       	st	-X, r20
    1428:	14 97       	sbiw	r26, 0x04	; 4
    142a:	a6 89       	ldd	r26, Z+22	; 0x16
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	9d 01       	movw	r18, r26
    1430:	22 0f       	add	r18, r18
    1432:	33 1f       	adc	r19, r19
    1434:	22 0f       	add	r18, r18
    1436:	33 1f       	adc	r19, r19
    1438:	22 0f       	add	r18, r18
    143a:	33 1f       	adc	r19, r19
    143c:	a2 0f       	add	r26, r18
    143e:	b3 1f       	adc	r27, r19
    1440:	af 52       	subi	r26, 0x2F	; 47
    1442:	b9 4f       	sbci	r27, 0xF9	; 249
    1444:	b3 87       	std	Z+11, r27	; 0x0b
    1446:	a2 87       	std	Z+10, r26	; 0x0a
    1448:	9c 91       	ld	r25, X
    144a:	9f 5f       	subi	r25, 0xFF	; 255
    144c:	9c 93       	st	X, r25
    144e:	26 89       	ldd	r18, Z+22	; 0x16
    1450:	e0 91 f5 06 	lds	r30, 0x06F5	; 0x8006f5 <pxCurrentTCB>
    1454:	f0 91 f6 06 	lds	r31, 0x06F6	; 0x8006f6 <pxCurrentTCB+0x1>
    1458:	96 89       	ldd	r25, Z+22	; 0x16
    145a:	92 17       	cp	r25, r18
    145c:	08 f4       	brcc	.+2      	; 0x1460 <xTaskIncrementTick+0x1da>
    145e:	49 cf       	rjmp	.-366    	; 0x12f2 <xTaskIncrementTick+0x6c>
    1460:	4b cf       	rjmp	.-362    	; 0x12f8 <xTaskIncrementTick+0x72>
    1462:	e0 91 f5 06 	lds	r30, 0x06F5	; 0x8006f5 <pxCurrentTCB>
    1466:	f0 91 f6 06 	lds	r31, 0x06F6	; 0x8006f6 <pxCurrentTCB+0x1>
    146a:	26 89       	ldd	r18, Z+22	; 0x16
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	f9 01       	movw	r30, r18
    1470:	ee 0f       	add	r30, r30
    1472:	ff 1f       	adc	r31, r31
    1474:	ee 0f       	add	r30, r30
    1476:	ff 1f       	adc	r31, r31
    1478:	ee 0f       	add	r30, r30
    147a:	ff 1f       	adc	r31, r31
    147c:	2e 0f       	add	r18, r30
    147e:	3f 1f       	adc	r19, r31
    1480:	f9 01       	movw	r30, r18
    1482:	ef 52       	subi	r30, 0x2F	; 47
    1484:	f9 4f       	sbci	r31, 0xF9	; 249
    1486:	90 81       	ld	r25, Z
    1488:	92 30       	cpi	r25, 0x02	; 2
    148a:	08 f0       	brcs	.+2      	; 0x148e <xTaskIncrementTick+0x208>
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	90 91 a0 06 	lds	r25, 0x06A0	; 0x8006a0 <xYieldPending>
    1492:	91 11       	cpse	r25, r1
    1494:	0c c0       	rjmp	.+24     	; 0x14ae <xTaskIncrementTick+0x228>
    1496:	0c c0       	rjmp	.+24     	; 0x14b0 <xTaskIncrementTick+0x22a>
    1498:	80 91 a1 06 	lds	r24, 0x06A1	; 0x8006a1 <xPendedTicks>
    149c:	90 91 a2 06 	lds	r25, 0x06A2	; 0x8006a2 <xPendedTicks+0x1>
    14a0:	01 96       	adiw	r24, 0x01	; 1
    14a2:	90 93 a2 06 	sts	0x06A2, r25	; 0x8006a2 <xPendedTicks+0x1>
    14a6:	80 93 a1 06 	sts	0x06A1, r24	; 0x8006a1 <xPendedTicks>
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	01 c0       	rjmp	.+2      	; 0x14b0 <xTaskIncrementTick+0x22a>
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	df 91       	pop	r29
    14b2:	cf 91       	pop	r28
    14b4:	1f 91       	pop	r17
    14b6:	0f 91       	pop	r16
    14b8:	08 95       	ret

000014ba <xTaskResumeAll>:
    14ba:	cf 93       	push	r28
    14bc:	df 93       	push	r29
    14be:	0f b6       	in	r0, 0x3f	; 63
    14c0:	f8 94       	cli
    14c2:	0f 92       	push	r0
    14c4:	80 91 99 06 	lds	r24, 0x0699	; 0x800699 <uxSchedulerSuspended>
    14c8:	81 50       	subi	r24, 0x01	; 1
    14ca:	80 93 99 06 	sts	0x0699, r24	; 0x800699 <uxSchedulerSuspended>
    14ce:	80 91 99 06 	lds	r24, 0x0699	; 0x800699 <uxSchedulerSuspended>
    14d2:	81 11       	cpse	r24, r1
    14d4:	bf c0       	rjmp	.+382    	; 0x1654 <xTaskResumeAll+0x19a>
    14d6:	80 91 a7 06 	lds	r24, 0x06A7	; 0x8006a7 <uxCurrentNumberOfTasks>
    14da:	81 11       	cpse	r24, r1
    14dc:	96 c0       	rjmp	.+300    	; 0x160a <xTaskResumeAll+0x150>
    14de:	bd c0       	rjmp	.+378    	; 0x165a <xTaskResumeAll+0x1a0>
    14e0:	e0 91 b7 06 	lds	r30, 0x06B7	; 0x8006b7 <xPendingReadyList+0x5>
    14e4:	f0 91 b8 06 	lds	r31, 0x06B8	; 0x8006b8 <xPendingReadyList+0x6>
    14e8:	06 80       	ldd	r0, Z+6	; 0x06
    14ea:	f7 81       	ldd	r31, Z+7	; 0x07
    14ec:	e0 2d       	mov	r30, r0
    14ee:	a4 89       	ldd	r26, Z+20	; 0x14
    14f0:	b5 89       	ldd	r27, Z+21	; 0x15
    14f2:	c6 85       	ldd	r28, Z+14	; 0x0e
    14f4:	d7 85       	ldd	r29, Z+15	; 0x0f
    14f6:	80 89       	ldd	r24, Z+16	; 0x10
    14f8:	91 89       	ldd	r25, Z+17	; 0x11
    14fa:	9d 83       	std	Y+5, r25	; 0x05
    14fc:	8c 83       	std	Y+4, r24	; 0x04
    14fe:	c0 89       	ldd	r28, Z+16	; 0x10
    1500:	d1 89       	ldd	r29, Z+17	; 0x11
    1502:	86 85       	ldd	r24, Z+14	; 0x0e
    1504:	97 85       	ldd	r25, Z+15	; 0x0f
    1506:	9b 83       	std	Y+3, r25	; 0x03
    1508:	8a 83       	std	Y+2, r24	; 0x02
    150a:	11 96       	adiw	r26, 0x01	; 1
    150c:	2d 91       	ld	r18, X+
    150e:	3c 91       	ld	r19, X
    1510:	12 97       	sbiw	r26, 0x02	; 2
    1512:	cf 01       	movw	r24, r30
    1514:	0c 96       	adiw	r24, 0x0c	; 12
    1516:	28 17       	cp	r18, r24
    1518:	39 07       	cpc	r19, r25
    151a:	31 f4       	brne	.+12     	; 0x1528 <xTaskResumeAll+0x6e>
    151c:	80 89       	ldd	r24, Z+16	; 0x10
    151e:	91 89       	ldd	r25, Z+17	; 0x11
    1520:	12 96       	adiw	r26, 0x02	; 2
    1522:	9c 93       	st	X, r25
    1524:	8e 93       	st	-X, r24
    1526:	11 97       	sbiw	r26, 0x01	; 1
    1528:	15 8a       	std	Z+21, r1	; 0x15
    152a:	14 8a       	std	Z+20, r1	; 0x14
    152c:	8c 91       	ld	r24, X
    152e:	81 50       	subi	r24, 0x01	; 1
    1530:	8c 93       	st	X, r24
    1532:	a2 85       	ldd	r26, Z+10	; 0x0a
    1534:	b3 85       	ldd	r27, Z+11	; 0x0b
    1536:	c4 81       	ldd	r28, Z+4	; 0x04
    1538:	d5 81       	ldd	r29, Z+5	; 0x05
    153a:	86 81       	ldd	r24, Z+6	; 0x06
    153c:	97 81       	ldd	r25, Z+7	; 0x07
    153e:	9d 83       	std	Y+5, r25	; 0x05
    1540:	8c 83       	std	Y+4, r24	; 0x04
    1542:	c6 81       	ldd	r28, Z+6	; 0x06
    1544:	d7 81       	ldd	r29, Z+7	; 0x07
    1546:	84 81       	ldd	r24, Z+4	; 0x04
    1548:	95 81       	ldd	r25, Z+5	; 0x05
    154a:	9b 83       	std	Y+3, r25	; 0x03
    154c:	8a 83       	std	Y+2, r24	; 0x02
    154e:	11 96       	adiw	r26, 0x01	; 1
    1550:	8d 91       	ld	r24, X+
    1552:	9c 91       	ld	r25, X
    1554:	12 97       	sbiw	r26, 0x02	; 2
    1556:	9f 01       	movw	r18, r30
    1558:	2e 5f       	subi	r18, 0xFE	; 254
    155a:	3f 4f       	sbci	r19, 0xFF	; 255
    155c:	82 17       	cp	r24, r18
    155e:	93 07       	cpc	r25, r19
    1560:	31 f4       	brne	.+12     	; 0x156e <xTaskResumeAll+0xb4>
    1562:	86 81       	ldd	r24, Z+6	; 0x06
    1564:	97 81       	ldd	r25, Z+7	; 0x07
    1566:	12 96       	adiw	r26, 0x02	; 2
    1568:	9c 93       	st	X, r25
    156a:	8e 93       	st	-X, r24
    156c:	11 97       	sbiw	r26, 0x01	; 1
    156e:	13 86       	std	Z+11, r1	; 0x0b
    1570:	12 86       	std	Z+10, r1	; 0x0a
    1572:	8c 91       	ld	r24, X
    1574:	81 50       	subi	r24, 0x01	; 1
    1576:	8c 93       	st	X, r24
    1578:	86 89       	ldd	r24, Z+22	; 0x16
    157a:	90 91 a4 06 	lds	r25, 0x06A4	; 0x8006a4 <uxTopReadyPriority>
    157e:	98 17       	cp	r25, r24
    1580:	10 f4       	brcc	.+4      	; 0x1586 <xTaskResumeAll+0xcc>
    1582:	80 93 a4 06 	sts	0x06A4, r24	; 0x8006a4 <uxTopReadyPriority>
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	dc 01       	movw	r26, r24
    158a:	aa 0f       	add	r26, r26
    158c:	bb 1f       	adc	r27, r27
    158e:	aa 0f       	add	r26, r26
    1590:	bb 1f       	adc	r27, r27
    1592:	aa 0f       	add	r26, r26
    1594:	bb 1f       	adc	r27, r27
    1596:	8a 0f       	add	r24, r26
    1598:	9b 1f       	adc	r25, r27
    159a:	dc 01       	movw	r26, r24
    159c:	af 52       	subi	r26, 0x2F	; 47
    159e:	b9 4f       	sbci	r27, 0xF9	; 249
    15a0:	11 96       	adiw	r26, 0x01	; 1
    15a2:	0d 90       	ld	r0, X+
    15a4:	bc 91       	ld	r27, X
    15a6:	a0 2d       	mov	r26, r0
    15a8:	b5 83       	std	Z+5, r27	; 0x05
    15aa:	a4 83       	std	Z+4, r26	; 0x04
    15ac:	14 96       	adiw	r26, 0x04	; 4
    15ae:	8d 91       	ld	r24, X+
    15b0:	9c 91       	ld	r25, X
    15b2:	15 97       	sbiw	r26, 0x05	; 5
    15b4:	97 83       	std	Z+7, r25	; 0x07
    15b6:	86 83       	std	Z+6, r24	; 0x06
    15b8:	14 96       	adiw	r26, 0x04	; 4
    15ba:	cd 91       	ld	r28, X+
    15bc:	dc 91       	ld	r29, X
    15be:	15 97       	sbiw	r26, 0x05	; 5
    15c0:	3b 83       	std	Y+3, r19	; 0x03
    15c2:	2a 83       	std	Y+2, r18	; 0x02
    15c4:	15 96       	adiw	r26, 0x05	; 5
    15c6:	3c 93       	st	X, r19
    15c8:	2e 93       	st	-X, r18
    15ca:	14 97       	sbiw	r26, 0x04	; 4
    15cc:	a6 89       	ldd	r26, Z+22	; 0x16
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	cd 01       	movw	r24, r26
    15d2:	88 0f       	add	r24, r24
    15d4:	99 1f       	adc	r25, r25
    15d6:	88 0f       	add	r24, r24
    15d8:	99 1f       	adc	r25, r25
    15da:	88 0f       	add	r24, r24
    15dc:	99 1f       	adc	r25, r25
    15de:	a8 0f       	add	r26, r24
    15e0:	b9 1f       	adc	r27, r25
    15e2:	af 52       	subi	r26, 0x2F	; 47
    15e4:	b9 4f       	sbci	r27, 0xF9	; 249
    15e6:	b3 87       	std	Z+11, r27	; 0x0b
    15e8:	a2 87       	std	Z+10, r26	; 0x0a
    15ea:	8c 91       	ld	r24, X
    15ec:	8f 5f       	subi	r24, 0xFF	; 255
    15ee:	8c 93       	st	X, r24
    15f0:	96 89       	ldd	r25, Z+22	; 0x16
    15f2:	a0 91 f5 06 	lds	r26, 0x06F5	; 0x8006f5 <pxCurrentTCB>
    15f6:	b0 91 f6 06 	lds	r27, 0x06F6	; 0x8006f6 <pxCurrentTCB+0x1>
    15fa:	56 96       	adiw	r26, 0x16	; 22
    15fc:	8c 91       	ld	r24, X
    15fe:	98 17       	cp	r25, r24
    1600:	30 f0       	brcs	.+12     	; 0x160e <xTaskResumeAll+0x154>
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <xYieldPending>
    1608:	02 c0       	rjmp	.+4      	; 0x160e <xTaskResumeAll+0x154>
    160a:	e0 e0       	ldi	r30, 0x00	; 0
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 91 b2 06 	lds	r24, 0x06B2	; 0x8006b2 <xPendingReadyList>
    1612:	81 11       	cpse	r24, r1
    1614:	65 cf       	rjmp	.-310    	; 0x14e0 <xTaskResumeAll+0x26>
    1616:	ef 2b       	or	r30, r31
    1618:	11 f0       	breq	.+4      	; 0x161e <xTaskResumeAll+0x164>
    161a:	0e 94 03 07 	call	0xe06	; 0xe06 <prvResetNextTaskUnblockTime>
    161e:	c0 91 a1 06 	lds	r28, 0x06A1	; 0x8006a1 <xPendedTicks>
    1622:	d0 91 a2 06 	lds	r29, 0x06A2	; 0x8006a2 <xPendedTicks+0x1>
    1626:	20 97       	sbiw	r28, 0x00	; 0
    1628:	69 f0       	breq	.+26     	; 0x1644 <xTaskResumeAll+0x18a>
    162a:	0e 94 43 09 	call	0x1286	; 0x1286 <xTaskIncrementTick>
    162e:	88 23       	and	r24, r24
    1630:	19 f0       	breq	.+6      	; 0x1638 <xTaskResumeAll+0x17e>
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <xYieldPending>
    1638:	21 97       	sbiw	r28, 0x01	; 1
    163a:	b9 f7       	brne	.-18     	; 0x162a <xTaskResumeAll+0x170>
    163c:	10 92 a2 06 	sts	0x06A2, r1	; 0x8006a2 <xPendedTicks+0x1>
    1640:	10 92 a1 06 	sts	0x06A1, r1	; 0x8006a1 <xPendedTicks>
    1644:	80 91 a0 06 	lds	r24, 0x06A0	; 0x8006a0 <xYieldPending>
    1648:	88 23       	and	r24, r24
    164a:	31 f0       	breq	.+12     	; 0x1658 <xTaskResumeAll+0x19e>
    164c:	0e 94 c9 03 	call	0x792	; 0x792 <vPortYield>
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	03 c0       	rjmp	.+6      	; 0x165a <xTaskResumeAll+0x1a0>
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	01 c0       	rjmp	.+2      	; 0x165a <xTaskResumeAll+0x1a0>
    1658:	80 e0       	ldi	r24, 0x00	; 0
    165a:	0f 90       	pop	r0
    165c:	0f be       	out	0x3f, r0	; 63
    165e:	df 91       	pop	r29
    1660:	cf 91       	pop	r28
    1662:	08 95       	ret

00001664 <vTaskDelay>:
    1664:	cf 93       	push	r28
    1666:	df 93       	push	r29
    1668:	ec 01       	movw	r28, r24
    166a:	89 2b       	or	r24, r25
    166c:	49 f0       	breq	.+18     	; 0x1680 <vTaskDelay+0x1c>
    166e:	0e 94 3d 09 	call	0x127a	; 0x127a <vTaskSuspendAll>
    1672:	60 e0       	ldi	r22, 0x00	; 0
    1674:	ce 01       	movw	r24, r28
    1676:	0e 94 74 08 	call	0x10e8	; 0x10e8 <prvAddCurrentTaskToDelayedList>
    167a:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <xTaskResumeAll>
    167e:	01 c0       	rjmp	.+2      	; 0x1682 <vTaskDelay+0x1e>
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	81 11       	cpse	r24, r1
    1684:	02 c0       	rjmp	.+4      	; 0x168a <vTaskDelay+0x26>
    1686:	0e 94 c9 03 	call	0x792	; 0x792 <vPortYield>
    168a:	df 91       	pop	r29
    168c:	cf 91       	pop	r28
    168e:	08 95       	ret

00001690 <vTaskSwitchContext>:
    1690:	80 91 99 06 	lds	r24, 0x0699	; 0x800699 <uxSchedulerSuspended>
    1694:	88 23       	and	r24, r24
    1696:	21 f0       	breq	.+8      	; 0x16a0 <vTaskSwitchContext+0x10>
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <xYieldPending>
    169e:	08 95       	ret
    16a0:	10 92 a0 06 	sts	0x06A0, r1	; 0x8006a0 <xYieldPending>
    16a4:	20 91 a4 06 	lds	r18, 0x06A4	; 0x8006a4 <uxTopReadyPriority>
    16a8:	01 c0       	rjmp	.+2      	; 0x16ac <vTaskSwitchContext+0x1c>
    16aa:	21 50       	subi	r18, 0x01	; 1
    16ac:	82 2f       	mov	r24, r18
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	fc 01       	movw	r30, r24
    16b2:	ee 0f       	add	r30, r30
    16b4:	ff 1f       	adc	r31, r31
    16b6:	ee 0f       	add	r30, r30
    16b8:	ff 1f       	adc	r31, r31
    16ba:	ee 0f       	add	r30, r30
    16bc:	ff 1f       	adc	r31, r31
    16be:	e8 0f       	add	r30, r24
    16c0:	f9 1f       	adc	r31, r25
    16c2:	ef 52       	subi	r30, 0x2F	; 47
    16c4:	f9 4f       	sbci	r31, 0xF9	; 249
    16c6:	30 81       	ld	r19, Z
    16c8:	33 23       	and	r19, r19
    16ca:	79 f3       	breq	.-34     	; 0x16aa <vTaskSwitchContext+0x1a>
    16cc:	ac 01       	movw	r20, r24
    16ce:	44 0f       	add	r20, r20
    16d0:	55 1f       	adc	r21, r21
    16d2:	44 0f       	add	r20, r20
    16d4:	55 1f       	adc	r21, r21
    16d6:	44 0f       	add	r20, r20
    16d8:	55 1f       	adc	r21, r21
    16da:	48 0f       	add	r20, r24
    16dc:	59 1f       	adc	r21, r25
    16de:	df 01       	movw	r26, r30
    16e0:	01 80       	ldd	r0, Z+1	; 0x01
    16e2:	f2 81       	ldd	r31, Z+2	; 0x02
    16e4:	e0 2d       	mov	r30, r0
    16e6:	02 80       	ldd	r0, Z+2	; 0x02
    16e8:	f3 81       	ldd	r31, Z+3	; 0x03
    16ea:	e0 2d       	mov	r30, r0
    16ec:	12 96       	adiw	r26, 0x02	; 2
    16ee:	fc 93       	st	X, r31
    16f0:	ee 93       	st	-X, r30
    16f2:	11 97       	sbiw	r26, 0x01	; 1
    16f4:	4c 52       	subi	r20, 0x2C	; 44
    16f6:	59 4f       	sbci	r21, 0xF9	; 249
    16f8:	e4 17       	cp	r30, r20
    16fa:	f5 07       	cpc	r31, r21
    16fc:	29 f4       	brne	.+10     	; 0x1708 <vTaskSwitchContext+0x78>
    16fe:	42 81       	ldd	r20, Z+2	; 0x02
    1700:	53 81       	ldd	r21, Z+3	; 0x03
    1702:	fd 01       	movw	r30, r26
    1704:	52 83       	std	Z+2, r21	; 0x02
    1706:	41 83       	std	Z+1, r20	; 0x01
    1708:	fc 01       	movw	r30, r24
    170a:	ee 0f       	add	r30, r30
    170c:	ff 1f       	adc	r31, r31
    170e:	ee 0f       	add	r30, r30
    1710:	ff 1f       	adc	r31, r31
    1712:	ee 0f       	add	r30, r30
    1714:	ff 1f       	adc	r31, r31
    1716:	8e 0f       	add	r24, r30
    1718:	9f 1f       	adc	r25, r31
    171a:	fc 01       	movw	r30, r24
    171c:	ef 52       	subi	r30, 0x2F	; 47
    171e:	f9 4f       	sbci	r31, 0xF9	; 249
    1720:	01 80       	ldd	r0, Z+1	; 0x01
    1722:	f2 81       	ldd	r31, Z+2	; 0x02
    1724:	e0 2d       	mov	r30, r0
    1726:	86 81       	ldd	r24, Z+6	; 0x06
    1728:	97 81       	ldd	r25, Z+7	; 0x07
    172a:	90 93 f6 06 	sts	0x06F6, r25	; 0x8006f6 <pxCurrentTCB+0x1>
    172e:	80 93 f5 06 	sts	0x06F5, r24	; 0x8006f5 <pxCurrentTCB>
    1732:	20 93 a4 06 	sts	0x06A4, r18	; 0x8006a4 <uxTopReadyPriority>
    1736:	08 95       	ret

00001738 <vTaskPlaceOnEventList>:
    1738:	cf 93       	push	r28
    173a:	df 93       	push	r29
    173c:	eb 01       	movw	r28, r22
    173e:	60 91 f5 06 	lds	r22, 0x06F5	; 0x8006f5 <pxCurrentTCB>
    1742:	70 91 f6 06 	lds	r23, 0x06F6	; 0x8006f6 <pxCurrentTCB+0x1>
    1746:	64 5f       	subi	r22, 0xF4	; 244
    1748:	7f 4f       	sbci	r23, 0xFF	; 255
    174a:	0e 94 03 02 	call	0x406	; 0x406 <vListInsert>
    174e:	61 e0       	ldi	r22, 0x01	; 1
    1750:	ce 01       	movw	r24, r28
    1752:	0e 94 74 08 	call	0x10e8	; 0x10e8 <prvAddCurrentTaskToDelayedList>
    1756:	df 91       	pop	r29
    1758:	cf 91       	pop	r28
    175a:	08 95       	ret

0000175c <xTaskRemoveFromEventList>:
    175c:	cf 93       	push	r28
    175e:	df 93       	push	r29
    1760:	dc 01       	movw	r26, r24
    1762:	15 96       	adiw	r26, 0x05	; 5
    1764:	ed 91       	ld	r30, X+
    1766:	fc 91       	ld	r31, X
    1768:	16 97       	sbiw	r26, 0x06	; 6
    176a:	06 80       	ldd	r0, Z+6	; 0x06
    176c:	f7 81       	ldd	r31, Z+7	; 0x07
    176e:	e0 2d       	mov	r30, r0
    1770:	a4 89       	ldd	r26, Z+20	; 0x14
    1772:	b5 89       	ldd	r27, Z+21	; 0x15
    1774:	c6 85       	ldd	r28, Z+14	; 0x0e
    1776:	d7 85       	ldd	r29, Z+15	; 0x0f
    1778:	80 89       	ldd	r24, Z+16	; 0x10
    177a:	91 89       	ldd	r25, Z+17	; 0x11
    177c:	9d 83       	std	Y+5, r25	; 0x05
    177e:	8c 83       	std	Y+4, r24	; 0x04
    1780:	c0 89       	ldd	r28, Z+16	; 0x10
    1782:	d1 89       	ldd	r29, Z+17	; 0x11
    1784:	86 85       	ldd	r24, Z+14	; 0x0e
    1786:	97 85       	ldd	r25, Z+15	; 0x0f
    1788:	9b 83       	std	Y+3, r25	; 0x03
    178a:	8a 83       	std	Y+2, r24	; 0x02
    178c:	11 96       	adiw	r26, 0x01	; 1
    178e:	8d 91       	ld	r24, X+
    1790:	9c 91       	ld	r25, X
    1792:	12 97       	sbiw	r26, 0x02	; 2
    1794:	9f 01       	movw	r18, r30
    1796:	24 5f       	subi	r18, 0xF4	; 244
    1798:	3f 4f       	sbci	r19, 0xFF	; 255
    179a:	82 17       	cp	r24, r18
    179c:	93 07       	cpc	r25, r19
    179e:	31 f4       	brne	.+12     	; 0x17ac <xTaskRemoveFromEventList+0x50>
    17a0:	80 89       	ldd	r24, Z+16	; 0x10
    17a2:	91 89       	ldd	r25, Z+17	; 0x11
    17a4:	12 96       	adiw	r26, 0x02	; 2
    17a6:	9c 93       	st	X, r25
    17a8:	8e 93       	st	-X, r24
    17aa:	11 97       	sbiw	r26, 0x01	; 1
    17ac:	15 8a       	std	Z+21, r1	; 0x15
    17ae:	14 8a       	std	Z+20, r1	; 0x14
    17b0:	8c 91       	ld	r24, X
    17b2:	81 50       	subi	r24, 0x01	; 1
    17b4:	8c 93       	st	X, r24
    17b6:	80 91 99 06 	lds	r24, 0x0699	; 0x800699 <uxSchedulerSuspended>
    17ba:	81 11       	cpse	r24, r1
    17bc:	60 c0       	rjmp	.+192    	; 0x187e <xTaskRemoveFromEventList+0x122>
    17be:	a2 85       	ldd	r26, Z+10	; 0x0a
    17c0:	b3 85       	ldd	r27, Z+11	; 0x0b
    17c2:	c4 81       	ldd	r28, Z+4	; 0x04
    17c4:	d5 81       	ldd	r29, Z+5	; 0x05
    17c6:	86 81       	ldd	r24, Z+6	; 0x06
    17c8:	97 81       	ldd	r25, Z+7	; 0x07
    17ca:	9d 83       	std	Y+5, r25	; 0x05
    17cc:	8c 83       	std	Y+4, r24	; 0x04
    17ce:	c6 81       	ldd	r28, Z+6	; 0x06
    17d0:	d7 81       	ldd	r29, Z+7	; 0x07
    17d2:	84 81       	ldd	r24, Z+4	; 0x04
    17d4:	95 81       	ldd	r25, Z+5	; 0x05
    17d6:	9b 83       	std	Y+3, r25	; 0x03
    17d8:	8a 83       	std	Y+2, r24	; 0x02
    17da:	11 96       	adiw	r26, 0x01	; 1
    17dc:	8d 91       	ld	r24, X+
    17de:	9c 91       	ld	r25, X
    17e0:	12 97       	sbiw	r26, 0x02	; 2
    17e2:	9f 01       	movw	r18, r30
    17e4:	2e 5f       	subi	r18, 0xFE	; 254
    17e6:	3f 4f       	sbci	r19, 0xFF	; 255
    17e8:	82 17       	cp	r24, r18
    17ea:	93 07       	cpc	r25, r19
    17ec:	31 f4       	brne	.+12     	; 0x17fa <xTaskRemoveFromEventList+0x9e>
    17ee:	86 81       	ldd	r24, Z+6	; 0x06
    17f0:	97 81       	ldd	r25, Z+7	; 0x07
    17f2:	12 96       	adiw	r26, 0x02	; 2
    17f4:	9c 93       	st	X, r25
    17f6:	8e 93       	st	-X, r24
    17f8:	11 97       	sbiw	r26, 0x01	; 1
    17fa:	13 86       	std	Z+11, r1	; 0x0b
    17fc:	12 86       	std	Z+10, r1	; 0x0a
    17fe:	8c 91       	ld	r24, X
    1800:	81 50       	subi	r24, 0x01	; 1
    1802:	8c 93       	st	X, r24
    1804:	86 89       	ldd	r24, Z+22	; 0x16
    1806:	90 91 a4 06 	lds	r25, 0x06A4	; 0x8006a4 <uxTopReadyPriority>
    180a:	98 17       	cp	r25, r24
    180c:	10 f4       	brcc	.+4      	; 0x1812 <xTaskRemoveFromEventList+0xb6>
    180e:	80 93 a4 06 	sts	0x06A4, r24	; 0x8006a4 <uxTopReadyPriority>
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	dc 01       	movw	r26, r24
    1816:	aa 0f       	add	r26, r26
    1818:	bb 1f       	adc	r27, r27
    181a:	aa 0f       	add	r26, r26
    181c:	bb 1f       	adc	r27, r27
    181e:	aa 0f       	add	r26, r26
    1820:	bb 1f       	adc	r27, r27
    1822:	8a 0f       	add	r24, r26
    1824:	9b 1f       	adc	r25, r27
    1826:	dc 01       	movw	r26, r24
    1828:	af 52       	subi	r26, 0x2F	; 47
    182a:	b9 4f       	sbci	r27, 0xF9	; 249
    182c:	11 96       	adiw	r26, 0x01	; 1
    182e:	0d 90       	ld	r0, X+
    1830:	bc 91       	ld	r27, X
    1832:	a0 2d       	mov	r26, r0
    1834:	b5 83       	std	Z+5, r27	; 0x05
    1836:	a4 83       	std	Z+4, r26	; 0x04
    1838:	14 96       	adiw	r26, 0x04	; 4
    183a:	8d 91       	ld	r24, X+
    183c:	9c 91       	ld	r25, X
    183e:	15 97       	sbiw	r26, 0x05	; 5
    1840:	97 83       	std	Z+7, r25	; 0x07
    1842:	86 83       	std	Z+6, r24	; 0x06
    1844:	14 96       	adiw	r26, 0x04	; 4
    1846:	cd 91       	ld	r28, X+
    1848:	dc 91       	ld	r29, X
    184a:	15 97       	sbiw	r26, 0x05	; 5
    184c:	3b 83       	std	Y+3, r19	; 0x03
    184e:	2a 83       	std	Y+2, r18	; 0x02
    1850:	15 96       	adiw	r26, 0x05	; 5
    1852:	3c 93       	st	X, r19
    1854:	2e 93       	st	-X, r18
    1856:	14 97       	sbiw	r26, 0x04	; 4
    1858:	a6 89       	ldd	r26, Z+22	; 0x16
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	cd 01       	movw	r24, r26
    185e:	88 0f       	add	r24, r24
    1860:	99 1f       	adc	r25, r25
    1862:	88 0f       	add	r24, r24
    1864:	99 1f       	adc	r25, r25
    1866:	88 0f       	add	r24, r24
    1868:	99 1f       	adc	r25, r25
    186a:	a8 0f       	add	r26, r24
    186c:	b9 1f       	adc	r27, r25
    186e:	af 52       	subi	r26, 0x2F	; 47
    1870:	b9 4f       	sbci	r27, 0xF9	; 249
    1872:	b3 87       	std	Z+11, r27	; 0x0b
    1874:	a2 87       	std	Z+10, r26	; 0x0a
    1876:	8c 91       	ld	r24, X
    1878:	8f 5f       	subi	r24, 0xFF	; 255
    187a:	8c 93       	st	X, r24
    187c:	1c c0       	rjmp	.+56     	; 0x18b6 <xTaskRemoveFromEventList+0x15a>
    187e:	42 eb       	ldi	r20, 0xB2	; 178
    1880:	56 e0       	ldi	r21, 0x06	; 6
    1882:	da 01       	movw	r26, r20
    1884:	11 96       	adiw	r26, 0x01	; 1
    1886:	cd 91       	ld	r28, X+
    1888:	dc 91       	ld	r29, X
    188a:	12 97       	sbiw	r26, 0x02	; 2
    188c:	d7 87       	std	Z+15, r29	; 0x0f
    188e:	c6 87       	std	Z+14, r28	; 0x0e
    1890:	8c 81       	ldd	r24, Y+4	; 0x04
    1892:	9d 81       	ldd	r25, Y+5	; 0x05
    1894:	91 8b       	std	Z+17, r25	; 0x11
    1896:	80 8b       	std	Z+16, r24	; 0x10
    1898:	8c 81       	ldd	r24, Y+4	; 0x04
    189a:	9d 81       	ldd	r25, Y+5	; 0x05
    189c:	dc 01       	movw	r26, r24
    189e:	13 96       	adiw	r26, 0x03	; 3
    18a0:	3c 93       	st	X, r19
    18a2:	2e 93       	st	-X, r18
    18a4:	12 97       	sbiw	r26, 0x02	; 2
    18a6:	3d 83       	std	Y+5, r19	; 0x05
    18a8:	2c 83       	std	Y+4, r18	; 0x04
    18aa:	55 8b       	std	Z+21, r21	; 0x15
    18ac:	44 8b       	std	Z+20, r20	; 0x14
    18ae:	da 01       	movw	r26, r20
    18b0:	8c 91       	ld	r24, X
    18b2:	8f 5f       	subi	r24, 0xFF	; 255
    18b4:	8c 93       	st	X, r24
    18b6:	96 89       	ldd	r25, Z+22	; 0x16
    18b8:	e0 91 f5 06 	lds	r30, 0x06F5	; 0x8006f5 <pxCurrentTCB>
    18bc:	f0 91 f6 06 	lds	r31, 0x06F6	; 0x8006f6 <pxCurrentTCB+0x1>
    18c0:	86 89       	ldd	r24, Z+22	; 0x16
    18c2:	89 17       	cp	r24, r25
    18c4:	20 f4       	brcc	.+8      	; 0x18ce <xTaskRemoveFromEventList+0x172>
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <xYieldPending>
    18cc:	01 c0       	rjmp	.+2      	; 0x18d0 <xTaskRemoveFromEventList+0x174>
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	df 91       	pop	r29
    18d2:	cf 91       	pop	r28
    18d4:	08 95       	ret

000018d6 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
    18d6:	20 91 9f 06 	lds	r18, 0x069F	; 0x80069f <xNumOfOverflows>
    18da:	fc 01       	movw	r30, r24
    18dc:	20 83       	st	Z, r18
    pxTimeOut->xTimeOnEntering = xTickCount;
    18de:	20 91 a5 06 	lds	r18, 0x06A5	; 0x8006a5 <xTickCount>
    18e2:	30 91 a6 06 	lds	r19, 0x06A6	; 0x8006a6 <xTickCount+0x1>
    18e6:	32 83       	std	Z+2, r19	; 0x02
    18e8:	21 83       	std	Z+1, r18	; 0x01
    18ea:	08 95       	ret

000018ec <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
    18ec:	cf 93       	push	r28
    18ee:	df 93       	push	r29
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
    18f0:	0f b6       	in	r0, 0x3f	; 63
    18f2:	f8 94       	cli
    18f4:	0f 92       	push	r0
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
    18f6:	40 91 a5 06 	lds	r20, 0x06A5	; 0x8006a5 <xTickCount>
    18fa:	50 91 a6 06 	lds	r21, 0x06A6	; 0x8006a6 <xTickCount+0x1>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    18fe:	ec 01       	movw	r28, r24
    1900:	29 81       	ldd	r18, Y+1	; 0x01
    1902:	3a 81       	ldd	r19, Y+2	; 0x02
    1904:	da 01       	movw	r26, r20
    1906:	a2 1b       	sub	r26, r18
    1908:	b3 0b       	sbc	r27, r19
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    190a:	f8 81       	ld	r31, Y
    190c:	e0 91 9f 06 	lds	r30, 0x069F	; 0x80069f <xNumOfOverflows>
    1910:	fe 17       	cp	r31, r30
    1912:	41 f0       	breq	.+16     	; 0x1924 <xTaskCheckForTimeOut+0x38>
    1914:	42 17       	cp	r20, r18
    1916:	53 07       	cpc	r21, r19
    1918:	28 f0       	brcs	.+10     	; 0x1924 <xTaskCheckForTimeOut+0x38>
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
            *pxTicksToWait = ( TickType_t ) 0;
    191a:	fb 01       	movw	r30, r22
    191c:	11 82       	std	Z+1, r1	; 0x01
    191e:	10 82       	st	Z, r1
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
    1920:	81 e0       	ldi	r24, 0x01	; 1
            *pxTicksToWait = ( TickType_t ) 0;
    1922:	11 c0       	rjmp	.+34     	; 0x1946 <xTaskCheckForTimeOut+0x5a>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    1924:	eb 01       	movw	r28, r22
    1926:	28 81       	ld	r18, Y
    1928:	39 81       	ldd	r19, Y+1	; 0x01
    192a:	a2 17       	cp	r26, r18
    192c:	b3 07       	cpc	r27, r19
    192e:	40 f4       	brcc	.+16     	; 0x1940 <xTaskCheckForTimeOut+0x54>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
    1930:	2a 1b       	sub	r18, r26
    1932:	3b 0b       	sbc	r19, r27
    1934:	39 83       	std	Y+1, r19	; 0x01
    1936:	28 83       	st	Y, r18
            vTaskInternalSetTimeOutState( pxTimeOut );
    1938:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	03 c0       	rjmp	.+6      	; 0x1946 <xTaskCheckForTimeOut+0x5a>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
    1940:	19 82       	std	Y+1, r1	; 0x01
    1942:	18 82       	st	Y, r1
            xReturn = pdTRUE;
    1944:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    taskEXIT_CRITICAL();
    1946:	0f 90       	pop	r0
    1948:	0f be       	out	0x3f, r0	; 63

    return xReturn;
}
    194a:	df 91       	pop	r29
    194c:	cf 91       	pop	r28
    194e:	08 95       	ret

00001950 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    xYieldPending = pdTRUE;
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	80 93 a0 06 	sts	0x06A0, r24	; 0x8006a0 <xYieldPending>
    1956:	08 95       	ret

00001958 <__udivmodhi4>:
    1958:	aa 1b       	sub	r26, r26
    195a:	bb 1b       	sub	r27, r27
    195c:	51 e1       	ldi	r21, 0x11	; 17
    195e:	07 c0       	rjmp	.+14     	; 0x196e <__udivmodhi4_ep>

00001960 <__udivmodhi4_loop>:
    1960:	aa 1f       	adc	r26, r26
    1962:	bb 1f       	adc	r27, r27
    1964:	a6 17       	cp	r26, r22
    1966:	b7 07       	cpc	r27, r23
    1968:	10 f0       	brcs	.+4      	; 0x196e <__udivmodhi4_ep>
    196a:	a6 1b       	sub	r26, r22
    196c:	b7 0b       	sbc	r27, r23

0000196e <__udivmodhi4_ep>:
    196e:	88 1f       	adc	r24, r24
    1970:	99 1f       	adc	r25, r25
    1972:	5a 95       	dec	r21
    1974:	a9 f7       	brne	.-22     	; 0x1960 <__udivmodhi4_loop>
    1976:	80 95       	com	r24
    1978:	90 95       	com	r25
    197a:	bc 01       	movw	r22, r24
    197c:	cd 01       	movw	r24, r26
    197e:	08 95       	ret

00001980 <memcpy>:
    1980:	fb 01       	movw	r30, r22
    1982:	dc 01       	movw	r26, r24
    1984:	02 c0       	rjmp	.+4      	; 0x198a <memcpy+0xa>
    1986:	01 90       	ld	r0, Z+
    1988:	0d 92       	st	X+, r0
    198a:	41 50       	subi	r20, 0x01	; 1
    198c:	50 40       	sbci	r21, 0x00	; 0
    198e:	d8 f7       	brcc	.-10     	; 0x1986 <memcpy+0x6>
    1990:	08 95       	ret

00001992 <_exit>:
    1992:	f8 94       	cli

00001994 <__stop_program>:
    1994:	ff cf       	rjmp	.-2      	; 0x1994 <__stop_program>
