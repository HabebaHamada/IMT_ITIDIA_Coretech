
CLCD_APP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000062  00800060  00001a9c  00001b30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000064b  008000c2  008000c2  00001b92  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001b92  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001bc4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000430  00000000  00000000  00001c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004ea8  00000000  00000000  00002030  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011ee  00000000  00000000  00006ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002b3b  00000000  00000000  000080c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c10  00000000  00000000  0000ac04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001780  00000000  00000000  0000b814  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000046f2  00000000  00000000  0000cf94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000418  00000000  00000000  00011686  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 0c 05 	jmp	0xa18	; 0xa18 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e9       	ldi	r30, 0x9C	; 156
      68:	fa e1       	ldi	r31, 0x1A	; 26
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 3c       	cpi	r26, 0xC2	; 194
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	27 e0       	ldi	r18, 0x07	; 7
      78:	a2 ec       	ldi	r26, 0xC2	; 194
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 30       	cpi	r26, 0x0D	; 13
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 58 03 	call	0x6b0	; 0x6b0 <main>
      8a:	0c 94 4c 0d 	jmp	0x1a98	; 0x1a98 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <CLCD_voidSendCommand>:
	
	
}

void CLCD_voidSendCommand(u8 Copy_u8Command)
{
      92:	cf 93       	push	r28
      94:	c8 2f       	mov	r28, r24
	/*Set RS to low for Command*/
   DIO_u8WritePinValue(CLCD_RS_PIN,CLCD_CONTROL_PORT ,DIO_u8PIN_LOW);
      96:	40 e0       	ldi	r20, 0x00	; 0
      98:	61 e0       	ldi	r22, 0x01	; 1
      9a:	80 e0       	ldi	r24, 0x00	; 0
      9c:	0e 94 37 01 	call	0x26e	; 0x26e <DIO_u8WritePinValue>
   
   /*Set RW to low for write*/
   DIO_u8WritePinValue(CLCD_RW_PIN,CLCD_CONTROL_PORT ,DIO_u8PIN_LOW);
      a0:	40 e0       	ldi	r20, 0x00	; 0
      a2:	61 e0       	ldi	r22, 0x01	; 1
      a4:	81 e0       	ldi	r24, 0x01	; 1
      a6:	0e 94 37 01 	call	0x26e	; 0x26e <DIO_u8WritePinValue>
   
   /*Send Command to data pins*/
   DIO_u8WritePortValue(CLCD_DATA_PORT,Copy_u8Command);
      aa:	6c 2f       	mov	r22, r28
      ac:	80 e0       	ldi	r24, 0x00	; 0
      ae:	0e 94 5d 01 	call	0x2ba	; 0x2ba <DIO_u8WritePortValue>
   
   /* Send Enable pulse */
   DIO_u8WritePinValue(CLCD_E_PIN,CLCD_CONTROL_PORT ,DIO_u8PIN_HIGH);
      b2:	41 e0       	ldi	r20, 0x01	; 1
      b4:	61 e0       	ldi	r22, 0x01	; 1
      b6:	82 e0       	ldi	r24, 0x02	; 2
      b8:	0e 94 37 01 	call	0x26e	; 0x26e <DIO_u8WritePinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      bc:	8f e9       	ldi	r24, 0x9F	; 159
      be:	9f e0       	ldi	r25, 0x0F	; 15
      c0:	01 97       	sbiw	r24, 0x01	; 1
      c2:	f1 f7       	brne	.-4      	; 0xc0 <CLCD_voidSendCommand+0x2e>
      c4:	00 c0       	rjmp	.+0      	; 0xc6 <CLCD_voidSendCommand+0x34>
      c6:	00 00       	nop
   _delay_ms(2);
   DIO_u8WritePinValue(CLCD_E_PIN,CLCD_CONTROL_PORT ,DIO_u8PIN_LOW);
      c8:	40 e0       	ldi	r20, 0x00	; 0
      ca:	61 e0       	ldi	r22, 0x01	; 1
      cc:	82 e0       	ldi	r24, 0x02	; 2
      ce:	0e 94 37 01 	call	0x26e	; 0x26e <DIO_u8WritePinValue>

   
	
}
      d2:	cf 91       	pop	r28
      d4:	08 95       	ret

000000d6 <CLCD_voidInit>:
      d6:	2f ef       	ldi	r18, 0xFF	; 255
      d8:	89 ef       	ldi	r24, 0xF9	; 249
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	21 50       	subi	r18, 0x01	; 1
      de:	80 40       	sbci	r24, 0x00	; 0
      e0:	90 40       	sbci	r25, 0x00	; 0
      e2:	e1 f7       	brne	.-8      	; 0xdc <CLCD_voidInit+0x6>
      e4:	00 c0       	rjmp	.+0      	; 0xe6 <CLCD_voidInit+0x10>
      e6:	00 00       	nop
{
	/* Wait for more than 30ms */
	_delay_ms(40);
	
	/* Function Set Command : 2 Lines and 5*8 Font size */
	CLCD_voidSendCommand(0x38);
      e8:	88 e3       	ldi	r24, 0x38	; 56
      ea:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>
	
	/* Display ON/OFF Control : Display Enable, Cursor Disable and No Blinking Cursor*/
	CLCD_voidSendCommand(0x0C);
      ee:	8c e0       	ldi	r24, 0x0C	; 12
      f0:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>
		
	/* Display Clear Command */
	CLCD_voidSendCommand(0x01);
      f4:	81 e0       	ldi	r24, 0x01	; 1
      f6:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>
      fa:	08 95       	ret

000000fc <CLCD_voidSendData>:
   
	
}

void CLCD_voidSendData(u8 Copy_u8Data)
{
      fc:	cf 93       	push	r28
      fe:	c8 2f       	mov	r28, r24
	/*Set RS to high for Data*/
	DIO_u8WritePinValue(CLCD_RS_PIN,CLCD_CONTROL_PORT ,DIO_u8PIN_HIGH);
     100:	41 e0       	ldi	r20, 0x01	; 1
     102:	61 e0       	ldi	r22, 0x01	; 1
     104:	80 e0       	ldi	r24, 0x00	; 0
     106:	0e 94 37 01 	call	0x26e	; 0x26e <DIO_u8WritePinValue>
	
	/*Set RW to low for write*/
	DIO_u8WritePinValue(CLCD_RW_PIN,CLCD_CONTROL_PORT ,DIO_u8PIN_LOW);
     10a:	40 e0       	ldi	r20, 0x00	; 0
     10c:	61 e0       	ldi	r22, 0x01	; 1
     10e:	81 e0       	ldi	r24, 0x01	; 1
     110:	0e 94 37 01 	call	0x26e	; 0x26e <DIO_u8WritePinValue>
	
	/*Send Command to data pins*/
	DIO_u8WritePortValue(CLCD_DATA_PORT,Copy_u8Data);
     114:	6c 2f       	mov	r22, r28
     116:	80 e0       	ldi	r24, 0x00	; 0
     118:	0e 94 5d 01 	call	0x2ba	; 0x2ba <DIO_u8WritePortValue>
	
	/* Send Enable pulse */
	DIO_u8WritePinValue(CLCD_E_PIN,CLCD_CONTROL_PORT ,DIO_u8PIN_HIGH);
     11c:	41 e0       	ldi	r20, 0x01	; 1
     11e:	61 e0       	ldi	r22, 0x01	; 1
     120:	82 e0       	ldi	r24, 0x02	; 2
     122:	0e 94 37 01 	call	0x26e	; 0x26e <DIO_u8WritePinValue>
     126:	8f e9       	ldi	r24, 0x9F	; 159
     128:	9f e0       	ldi	r25, 0x0F	; 15
     12a:	01 97       	sbiw	r24, 0x01	; 1
     12c:	f1 f7       	brne	.-4      	; 0x12a <CLCD_voidSendData+0x2e>
     12e:	00 c0       	rjmp	.+0      	; 0x130 <CLCD_voidSendData+0x34>
     130:	00 00       	nop
	_delay_ms(2);
	DIO_u8WritePinValue(CLCD_E_PIN,CLCD_CONTROL_PORT ,DIO_u8PIN_LOW);
     132:	40 e0       	ldi	r20, 0x00	; 0
     134:	61 e0       	ldi	r22, 0x01	; 1
     136:	82 e0       	ldi	r24, 0x02	; 2
     138:	0e 94 37 01 	call	0x26e	; 0x26e <DIO_u8WritePinValue>

	
	
}
     13c:	cf 91       	pop	r28
     13e:	08 95       	ret

00000140 <CLCD_voidSendString>:

void CLCD_voidSendString(const char* Copy_pcString)
{
     140:	0f 93       	push	r16
     142:	1f 93       	push	r17
     144:	cf 93       	push	r28
     146:	8c 01       	movw	r16, r24
	u8 Local_u8Counter = 0;
     148:	c0 e0       	ldi	r28, 0x00	; 0
	
	while(Copy_pcString[Local_u8Counter] != '\0')
     14a:	03 c0       	rjmp	.+6      	; 0x152 <CLCD_voidSendString+0x12>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
     14c:	0e 94 7e 00 	call	0xfc	; 0xfc <CLCD_voidSendData>
		Local_u8Counter++;
     150:	cf 5f       	subi	r28, 0xFF	; 255

void CLCD_voidSendString(const char* Copy_pcString)
{
	u8 Local_u8Counter = 0;
	
	while(Copy_pcString[Local_u8Counter] != '\0')
     152:	f8 01       	movw	r30, r16
     154:	ec 0f       	add	r30, r28
     156:	f1 1d       	adc	r31, r1
     158:	80 81       	ld	r24, Z
     15a:	81 11       	cpse	r24, r1
     15c:	f7 cf       	rjmp	.-18     	; 0x14c <CLCD_voidSendString+0xc>
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
	}
}
     15e:	cf 91       	pop	r28
     160:	1f 91       	pop	r17
     162:	0f 91       	pop	r16
     164:	08 95       	ret

00000166 <CLCD_voidSetCursor>:

void CLCD_voidSetCursor(u8 Copy_u8XPosition, u8 Copy_u8YPosition)
{
	/* For the second line display add 0x40 to the Address */
	u8 Local_u8Address = (Copy_u8XPosition * 0x40) + (Copy_u8YPosition);
     166:	90 e4       	ldi	r25, 0x40	; 64
     168:	89 9f       	mul	r24, r25
     16a:	60 0d       	add	r22, r0
     16c:	11 24       	eor	r1, r1
     16e:	86 2f       	mov	r24, r22
	
	/* Set bit 7 for DDRAM Address Command then send the Command */
	CLCD_voidSendCommand(Local_u8Address + 128);
     170:	80 58       	subi	r24, 0x80	; 128
     172:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>
     176:	08 95       	ret

00000178 <CLCD2_voidSendCommand>:
	
	
}

void CLCD2_voidSendCommand(u8 Copy_u8Command)
{
     178:	cf 93       	push	r28
     17a:	c8 2f       	mov	r28, r24
	/*Set RS to low for Command*/
	DIO_u8WritePinValue(CLCD2_RS_PIN,CLCD2_CONTROL_PORT ,DIO_u8PIN_LOW);
     17c:	40 e0       	ldi	r20, 0x00	; 0
     17e:	61 e0       	ldi	r22, 0x01	; 1
     180:	83 e0       	ldi	r24, 0x03	; 3
     182:	0e 94 37 01 	call	0x26e	; 0x26e <DIO_u8WritePinValue>
	
	/*Set RW to low for write*/
	DIO_u8WritePinValue(CLCD2_RW_PIN,CLCD2_CONTROL_PORT ,DIO_u8PIN_LOW);
     186:	40 e0       	ldi	r20, 0x00	; 0
     188:	61 e0       	ldi	r22, 0x01	; 1
     18a:	84 e0       	ldi	r24, 0x04	; 4
     18c:	0e 94 37 01 	call	0x26e	; 0x26e <DIO_u8WritePinValue>
	
	/*Send Command to data pins*/
	DIO_u8WritePortValue(CLCD2_DATA_PORT,Copy_u8Command);
     190:	6c 2f       	mov	r22, r28
     192:	82 e0       	ldi	r24, 0x02	; 2
     194:	0e 94 5d 01 	call	0x2ba	; 0x2ba <DIO_u8WritePortValue>
	
	/* Send Enable pulse */
	DIO_u8WritePinValue(CLCD2_E_PIN,CLCD2_CONTROL_PORT ,DIO_u8PIN_HIGH);
     198:	41 e0       	ldi	r20, 0x01	; 1
     19a:	61 e0       	ldi	r22, 0x01	; 1
     19c:	85 e0       	ldi	r24, 0x05	; 5
     19e:	0e 94 37 01 	call	0x26e	; 0x26e <DIO_u8WritePinValue>
     1a2:	8f e9       	ldi	r24, 0x9F	; 159
     1a4:	9f e0       	ldi	r25, 0x0F	; 15
     1a6:	01 97       	sbiw	r24, 0x01	; 1
     1a8:	f1 f7       	brne	.-4      	; 0x1a6 <CLCD2_voidSendCommand+0x2e>
     1aa:	00 c0       	rjmp	.+0      	; 0x1ac <CLCD2_voidSendCommand+0x34>
     1ac:	00 00       	nop
	_delay_ms(2);
	DIO_u8WritePinValue(CLCD2_E_PIN,CLCD2_CONTROL_PORT ,DIO_u8PIN_LOW);
     1ae:	40 e0       	ldi	r20, 0x00	; 0
     1b0:	61 e0       	ldi	r22, 0x01	; 1
     1b2:	85 e0       	ldi	r24, 0x05	; 5
     1b4:	0e 94 37 01 	call	0x26e	; 0x26e <DIO_u8WritePinValue>

}
     1b8:	cf 91       	pop	r28
     1ba:	08 95       	ret

000001bc <CLCD2_voidInit>:
     1bc:	2f ef       	ldi	r18, 0xFF	; 255
     1be:	89 ef       	ldi	r24, 0xF9	; 249
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	21 50       	subi	r18, 0x01	; 1
     1c4:	80 40       	sbci	r24, 0x00	; 0
     1c6:	90 40       	sbci	r25, 0x00	; 0
     1c8:	e1 f7       	brne	.-8      	; 0x1c2 <CLCD2_voidInit+0x6>
     1ca:	00 c0       	rjmp	.+0      	; 0x1cc <CLCD2_voidInit+0x10>
     1cc:	00 00       	nop
{
	/* Wait for more than 30ms */
	_delay_ms(40);
	
	/* Function Set Command : 2 Lines and 5*8 Font size */
	CLCD2_voidSendCommand(0x38);
     1ce:	88 e3       	ldi	r24, 0x38	; 56
     1d0:	0e 94 bc 00 	call	0x178	; 0x178 <CLCD2_voidSendCommand>
	
	/* Display ON/OFF Control : Display Enable, Cursor Disable and No Blinking Cursor*/
	CLCD2_voidSendCommand(0x0C);
     1d4:	8c e0       	ldi	r24, 0x0C	; 12
     1d6:	0e 94 bc 00 	call	0x178	; 0x178 <CLCD2_voidSendCommand>
	
	/* Display Clear Command */
	CLCD2_voidSendCommand(0x01);
     1da:	81 e0       	ldi	r24, 0x01	; 1
     1dc:	0e 94 bc 00 	call	0x178	; 0x178 <CLCD2_voidSendCommand>
     1e0:	08 95       	ret

000001e2 <CLCD2_voidSendData>:
	DIO_u8WritePinValue(CLCD2_E_PIN,CLCD2_CONTROL_PORT ,DIO_u8PIN_LOW);

}

void CLCD2_voidSendData(u8 Copy_u8Data)
{
     1e2:	cf 93       	push	r28
     1e4:	c8 2f       	mov	r28, r24
	/*Set RS to high for Data*/
	DIO_u8WritePinValue(CLCD2_RS_PIN,CLCD2_CONTROL_PORT ,DIO_u8PIN_HIGH);
     1e6:	41 e0       	ldi	r20, 0x01	; 1
     1e8:	61 e0       	ldi	r22, 0x01	; 1
     1ea:	83 e0       	ldi	r24, 0x03	; 3
     1ec:	0e 94 37 01 	call	0x26e	; 0x26e <DIO_u8WritePinValue>
	
	/*Set RW to low for write*/
	DIO_u8WritePinValue(CLCD2_RW_PIN,CLCD2_CONTROL_PORT ,DIO_u8PIN_LOW);
     1f0:	40 e0       	ldi	r20, 0x00	; 0
     1f2:	61 e0       	ldi	r22, 0x01	; 1
     1f4:	84 e0       	ldi	r24, 0x04	; 4
     1f6:	0e 94 37 01 	call	0x26e	; 0x26e <DIO_u8WritePinValue>
	
	/*Send Command to data pins*/
	DIO_u8WritePortValue(CLCD2_DATA_PORT,Copy_u8Data);
     1fa:	6c 2f       	mov	r22, r28
     1fc:	82 e0       	ldi	r24, 0x02	; 2
     1fe:	0e 94 5d 01 	call	0x2ba	; 0x2ba <DIO_u8WritePortValue>
	
	/* Send Enable pulse */
	DIO_u8WritePinValue(CLCD2_E_PIN,CLCD2_CONTROL_PORT ,DIO_u8PIN_HIGH);
     202:	41 e0       	ldi	r20, 0x01	; 1
     204:	61 e0       	ldi	r22, 0x01	; 1
     206:	85 e0       	ldi	r24, 0x05	; 5
     208:	0e 94 37 01 	call	0x26e	; 0x26e <DIO_u8WritePinValue>
     20c:	8f e9       	ldi	r24, 0x9F	; 159
     20e:	9f e0       	ldi	r25, 0x0F	; 15
     210:	01 97       	sbiw	r24, 0x01	; 1
     212:	f1 f7       	brne	.-4      	; 0x210 <CLCD2_voidSendData+0x2e>
     214:	00 c0       	rjmp	.+0      	; 0x216 <CLCD2_voidSendData+0x34>
     216:	00 00       	nop
	_delay_ms(2);
	DIO_u8WritePinValue(CLCD2_E_PIN,CLCD2_CONTROL_PORT ,DIO_u8PIN_LOW);
     218:	40 e0       	ldi	r20, 0x00	; 0
     21a:	61 e0       	ldi	r22, 0x01	; 1
     21c:	85 e0       	ldi	r24, 0x05	; 5
     21e:	0e 94 37 01 	call	0x26e	; 0x26e <DIO_u8WritePinValue>

	
	
}
     222:	cf 91       	pop	r28
     224:	08 95       	ret

00000226 <CLCD2_voidSendString>:

void CLCD2_voidSendString(const char* Copy_pcString)
{
     226:	0f 93       	push	r16
     228:	1f 93       	push	r17
     22a:	cf 93       	push	r28
     22c:	8c 01       	movw	r16, r24
	u8 Local_u8Counter = 0;
     22e:	c0 e0       	ldi	r28, 0x00	; 0
	
	while(Copy_pcString[Local_u8Counter] != '\0')
     230:	03 c0       	rjmp	.+6      	; 0x238 <CLCD2_voidSendString+0x12>
	{
		CLCD2_voidSendData(Copy_pcString[Local_u8Counter]);
     232:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <CLCD2_voidSendData>
		Local_u8Counter++;
     236:	cf 5f       	subi	r28, 0xFF	; 255

void CLCD2_voidSendString(const char* Copy_pcString)
{
	u8 Local_u8Counter = 0;
	
	while(Copy_pcString[Local_u8Counter] != '\0')
     238:	f8 01       	movw	r30, r16
     23a:	ec 0f       	add	r30, r28
     23c:	f1 1d       	adc	r31, r1
     23e:	80 81       	ld	r24, Z
     240:	81 11       	cpse	r24, r1
     242:	f7 cf       	rjmp	.-18     	; 0x232 <CLCD2_voidSendString+0xc>
	{
		CLCD2_voidSendData(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
	}
}
     244:	cf 91       	pop	r28
     246:	1f 91       	pop	r17
     248:	0f 91       	pop	r16
     24a:	08 95       	ret

0000024c <CLCD2_voidSetCursor>:

void CLCD2_voidSetCursor(u8 Copy_u8XPosition, u8 Copy_u8YPosition)
{
	/* For the second line display add 0x40 to the Address */
	u8 Local_u8Address = (Copy_u8XPosition * 0x40) + (Copy_u8YPosition);
     24c:	90 e4       	ldi	r25, 0x40	; 64
     24e:	89 9f       	mul	r24, r25
     250:	60 0d       	add	r22, r0
     252:	11 24       	eor	r1, r1
     254:	86 2f       	mov	r24, r22
	
	/* Set bit 7 for DDRAM Address Command then send the Command */
	CLCD2_voidSendCommand(Local_u8Address + 128);
     256:	80 58       	subi	r24, 0x80	; 128
     258:	0e 94 bc 00 	call	0x178	; 0x178 <CLCD2_voidSendCommand>
     25c:	08 95       	ret

0000025e <CLCD_voidClearDisplay>:
	
}

void CLCD_voidClearDisplay()
{
	CLCD_voidSendCommand(0b00000001);	//sending Instruction to clear the whole display
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	0e 94 49 00 	call	0x92	; 0x92 <CLCD_voidSendCommand>
     264:	08 95       	ret

00000266 <CLCD2_voidClearDisplay>:
}

void CLCD2_voidClearDisplay()
{
	CLCD2_voidSendCommand(0b00000001);	//sending Instruction to clear the whole display
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	0e 94 bc 00 	call	0x178	; 0x178 <CLCD2_voidSendCommand>
     26c:	08 95       	ret

0000026e <DIO_u8WritePinValue>:

		                                                       
u8  DIO_u8WritePinValue(u8 Copy_u8Pin, u8 Copy_u8Port, u8 Copy_u8Value)
{	
	u8 Local_u8ErrorState=FALSE;
	if ((Copy_u8Pin < DIO_u8NumOfPins)&&(Copy_u8Port < DIO_u8NumOfPorts))
     26e:	88 30       	cpi	r24, 0x08	; 8
     270:	00 f5       	brcc	.+64     	; 0x2b2 <DIO_u8WritePinValue+0x44>
     272:	64 30       	cpi	r22, 0x04	; 4
     274:	00 f5       	brcc	.+64     	; 0x2b6 <DIO_u8WritePinValue+0x48>
	{
	   ASSIGN_BIT(*DIO_u8ArrPORT[Copy_u8Port],Copy_u8Pin, Copy_u8Value);
     276:	e6 2f       	mov	r30, r22
     278:	f0 e0       	ldi	r31, 0x00	; 0
     27a:	ee 0f       	add	r30, r30
     27c:	ff 1f       	adc	r31, r31
     27e:	ed 59       	subi	r30, 0x9D	; 157
     280:	ff 4f       	sbci	r31, 0xFF	; 255
     282:	01 90       	ld	r0, Z+
     284:	f0 81       	ld	r31, Z
     286:	e0 2d       	mov	r30, r0
     288:	90 81       	ld	r25, Z
     28a:	21 e0       	ldi	r18, 0x01	; 1
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	08 2e       	mov	r0, r24
     290:	02 c0       	rjmp	.+4      	; 0x296 <DIO_u8WritePinValue+0x28>
     292:	22 0f       	add	r18, r18
     294:	33 1f       	adc	r19, r19
     296:	0a 94       	dec	r0
     298:	e2 f7       	brpl	.-8      	; 0x292 <DIO_u8WritePinValue+0x24>
     29a:	50 e0       	ldi	r21, 0x00	; 0
     29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_u8WritePinValue+0x34>
     29e:	44 0f       	add	r20, r20
     2a0:	55 1f       	adc	r21, r21
     2a2:	8a 95       	dec	r24
     2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_u8WritePinValue+0x30>
     2a6:	20 95       	com	r18
     2a8:	29 23       	and	r18, r25
     2aa:	42 2b       	or	r20, r18
     2ac:	40 83       	st	Z, r20
	   Local_u8ErrorState=TRUE;
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	08 95       	ret


		                                                       
u8  DIO_u8WritePinValue(u8 Copy_u8Pin, u8 Copy_u8Port, u8 Copy_u8Value)
{	
	u8 Local_u8ErrorState=FALSE;
     2b2:	80 e0       	ldi	r24, 0x00	; 0
     2b4:	08 95       	ret
     2b6:	80 e0       	ldi	r24, 0x00	; 0
	   Local_u8ErrorState=TRUE;
	   
	}
		
	return Local_u8ErrorState;
}
     2b8:	08 95       	ret

000002ba <DIO_u8WritePortValue>:

u8  DIO_u8WritePortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=FALSE;
	
  if (Copy_u8Port <DIO_u8NumOfPorts)
     2ba:	84 30       	cpi	r24, 0x04	; 4
     2bc:	60 f4       	brcc	.+24     	; 0x2d6 <DIO_u8WritePortValue+0x1c>
  {
	  Assign_Reg(*DIO_u8ArrPORT[Copy_u8Port],Copy_u8Value);
     2be:	e8 2f       	mov	r30, r24
     2c0:	f0 e0       	ldi	r31, 0x00	; 0
     2c2:	ee 0f       	add	r30, r30
     2c4:	ff 1f       	adc	r31, r31
     2c6:	ed 59       	subi	r30, 0x9D	; 157
     2c8:	ff 4f       	sbci	r31, 0xFF	; 255
     2ca:	01 90       	ld	r0, Z+
     2cc:	f0 81       	ld	r31, Z
     2ce:	e0 2d       	mov	r30, r0
     2d0:	60 83       	st	Z, r22
	  Local_u8ErrorState=TRUE;
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	08 95       	ret
	return Local_u8ErrorState;
}

u8  DIO_u8WritePortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
	u8 Local_u8ErrorState=FALSE;
     2d6:	80 e0       	ldi	r24, 0x00	; 0
	  Assign_Reg(*DIO_u8ArrPORT[Copy_u8Port],Copy_u8Value);
	  Local_u8ErrorState=TRUE;
  } 
  			
	return Local_u8ErrorState;
}
     2d8:	08 95       	ret

000002da <prvHeapInit>:
    /* Ensure the heap starts on a correctly aligned boundary. */
    pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     2da:	a7 ec       	ldi	r26, 0xC7	; 199
     2dc:	b0 e0       	ldi	r27, 0x00	; 0
     2de:	eb ec       	ldi	r30, 0xCB	; 203
     2e0:	f0 e0       	ldi	r31, 0x00	; 0
     2e2:	11 96       	adiw	r26, 0x01	; 1
     2e4:	fc 93       	st	X, r31
     2e6:	ee 93       	st	-X, r30
    xStart.xBlockSize = ( size_t ) 0;
     2e8:	13 96       	adiw	r26, 0x03	; 3
     2ea:	1c 92       	st	X, r1
     2ec:	1e 92       	st	-X, r1
     2ee:	12 97       	sbiw	r26, 0x02	; 2

    /* xEnd is used to mark the end of the list of free blocks. */
    xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
     2f0:	a3 ec       	ldi	r26, 0xC3	; 195
     2f2:	b0 e0       	ldi	r27, 0x00	; 0
     2f4:	8b ed       	ldi	r24, 0xDB	; 219
     2f6:	95 e0       	ldi	r25, 0x05	; 5
     2f8:	13 96       	adiw	r26, 0x03	; 3
     2fa:	9c 93       	st	X, r25
     2fc:	8e 93       	st	-X, r24
     2fe:	12 97       	sbiw	r26, 0x02	; 2
    xEnd.pxNextFreeBlock = NULL;
     300:	11 96       	adiw	r26, 0x01	; 1
     302:	1c 92       	st	X, r1
     304:	1e 92       	st	-X, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
     306:	93 83       	std	Z+3, r25	; 0x03
     308:	82 83       	std	Z+2, r24	; 0x02
    pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
     30a:	b1 83       	std	Z+1, r27	; 0x01
     30c:	a0 83       	st	Z, r26
     30e:	08 95       	ret

00000310 <pvPortMalloc>:
        pxIterator->pxNextFreeBlock = pxBlockToInsert;                                                                              \
    }
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     310:	ef 92       	push	r14
     312:	ff 92       	push	r15
     314:	0f 93       	push	r16
     316:	1f 93       	push	r17
     318:	cf 93       	push	r28
     31a:	df 93       	push	r29
     31c:	ec 01       	movw	r28, r24
    BlockLink_t * pxNewBlockLink;
    PRIVILEGED_DATA static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
     31e:	0e 94 b5 09 	call	0x136a	; 0x136a <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( xHeapHasBeenInitialised == pdFALSE )
     322:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__data_end>
     326:	81 11       	cpse	r24, r1
     328:	05 c0       	rjmp	.+10     	; 0x334 <pvPortMalloc+0x24>
        {
            prvHeapInit();
     32a:	0e 94 6d 01 	call	0x2da	; 0x2da <prvHeapInit>
            xHeapHasBeenInitialised = pdTRUE;
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__data_end>
        }

        if( xWantedSize > 0 )
     334:	20 97       	sbiw	r28, 0x00	; 0
     336:	41 f0       	breq	.+16     	; 0x348 <pvPortMalloc+0x38>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = heapSTRUCT_SIZE + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
     338:	cb 3f       	cpi	r28, 0xFB	; 251
     33a:	8f ef       	ldi	r24, 0xFF	; 255
     33c:	d8 07       	cpc	r29, r24
     33e:	10 f4       	brcc	.+4      	; 0x344 <pvPortMalloc+0x34>
            {
                xWantedSize += xAdditionalRequiredSize;
     340:	25 96       	adiw	r28, 0x05	; 5
     342:	02 c0       	rjmp	.+4      	; 0x348 <pvPortMalloc+0x38>
            }
            else
            {
                xWantedSize = 0;
     344:	c0 e0       	ldi	r28, 0x00	; 0
     346:	d0 e0       	ldi	r29, 0x00	; 0

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
     348:	dd 23       	and	r29, r29
     34a:	0c f4       	brge	.+2      	; 0x34e <pvPortMalloc+0x3e>
     34c:	66 c0       	rjmp	.+204    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     34e:	20 97       	sbiw	r28, 0x00	; 0
     350:	09 f4       	brne	.+2      	; 0x354 <pvPortMalloc+0x44>
     352:	66 c0       	rjmp	.+204    	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
     354:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     358:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     35c:	2c 17       	cp	r18, r28
     35e:	3d 07       	cpc	r19, r29
     360:	08 f4       	brcc	.+2      	; 0x364 <pvPortMalloc+0x54>
     362:	61 c0       	rjmp	.+194    	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
            {
                /* Blocks are stored in byte order - traverse the list from the start
                 * (smallest) block until one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     364:	e0 91 c7 00 	lds	r30, 0x00C7	; 0x8000c7 <xStart>
     368:	f0 91 c8 00 	lds	r31, 0x00C8	; 0x8000c8 <xStart+0x1>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Blocks are stored in byte order - traverse the list from the start
                 * (smallest) block until one of adequate size is found. */
                pxPreviousBlock = &xStart;
     36c:	a7 ec       	ldi	r26, 0xC7	; 199
     36e:	b0 e0       	ldi	r27, 0x00	; 0
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     370:	02 c0       	rjmp	.+4      	; 0x376 <pvPortMalloc+0x66>
                {
                    pxPreviousBlock = pxBlock;
     372:	df 01       	movw	r26, r30
                    pxBlock = pxBlock->pxNextFreeBlock;
     374:	fc 01       	movw	r30, r24
                /* Blocks are stored in byte order - traverse the list from the start
                 * (smallest) block until one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     376:	82 81       	ldd	r24, Z+2	; 0x02
     378:	93 81       	ldd	r25, Z+3	; 0x03
     37a:	8c 17       	cp	r24, r28
     37c:	9d 07       	cpc	r25, r29
     37e:	20 f4       	brcc	.+8      	; 0x388 <pvPortMalloc+0x78>
     380:	80 81       	ld	r24, Z
     382:	91 81       	ldd	r25, Z+1	; 0x01
     384:	00 97       	sbiw	r24, 0x00	; 0
     386:	a9 f7       	brne	.-22     	; 0x372 <pvPortMalloc+0x62>
                    pxPreviousBlock = pxBlock;
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If we found the end marker then a block of adequate size was not found. */
                if( pxBlock != &xEnd )
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	e3 3c       	cpi	r30, 0xC3	; 195
     38c:	f8 07       	cpc	r31, r24
     38e:	09 f4       	brne	.+2      	; 0x392 <pvPortMalloc+0x82>
     390:	4d c0       	rjmp	.+154    	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
                {
                    /* Return the memory space - jumping over the BlockLink_t structure
                     * at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
     392:	0d 91       	ld	r16, X+
     394:	1c 91       	ld	r17, X
     396:	11 97       	sbiw	r26, 0x01	; 1
     398:	0c 5f       	subi	r16, 0xFC	; 252
     39a:	1f 4f       	sbci	r17, 0xFF	; 255

                    /* This block is being returned for use so must be taken out of the
                     * list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     39c:	80 81       	ld	r24, Z
     39e:	91 81       	ldd	r25, Z+1	; 0x01
     3a0:	8d 93       	st	X+, r24
     3a2:	9c 93       	st	X, r25

                    /* If the block is larger than required it can be split into two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     3a4:	82 81       	ldd	r24, Z+2	; 0x02
     3a6:	93 81       	ldd	r25, Z+3	; 0x03
     3a8:	8c 1b       	sub	r24, r28
     3aa:	9d 0b       	sbc	r25, r29
     3ac:	89 30       	cpi	r24, 0x09	; 9
     3ae:	91 05       	cpc	r25, r1
     3b0:	30 f1       	brcs	.+76     	; 0x3fe <pvPortMalloc+0xee>
                    {
                        /* This block is to be split into two.  Create a new block
                         * following the number of bytes requested. The void cast is
                         * used to prevent byte alignment warnings from the compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     3b2:	bf 01       	movw	r22, r30
     3b4:	6c 0f       	add	r22, r28
     3b6:	7d 1f       	adc	r23, r29

                        /* Calculate the sizes of two blocks split from the single
                         * block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     3b8:	db 01       	movw	r26, r22
     3ba:	13 96       	adiw	r26, 0x03	; 3
     3bc:	9c 93       	st	X, r25
     3be:	8e 93       	st	-X, r24
     3c0:	12 97       	sbiw	r26, 0x02	; 2
                        pxBlock->xBlockSize = xWantedSize;
     3c2:	d3 83       	std	Z+3, r29	; 0x03
     3c4:	c2 83       	std	Z+2, r28	; 0x02

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
     3c6:	12 96       	adiw	r26, 0x02	; 2
     3c8:	4d 91       	ld	r20, X+
     3ca:	5c 91       	ld	r21, X
     3cc:	13 97       	sbiw	r26, 0x03	; 3
     3ce:	0f 2e       	mov	r0, r31
     3d0:	f7 ec       	ldi	r31, 0xC7	; 199
     3d2:	ef 2e       	mov	r14, r31
     3d4:	f0 e0       	ldi	r31, 0x00	; 0
     3d6:	ff 2e       	mov	r15, r31
     3d8:	f0 2d       	mov	r31, r0
     3da:	01 c0       	rjmp	.+2      	; 0x3de <pvPortMalloc+0xce>
     3dc:	7d 01       	movw	r14, r26
     3de:	e7 01       	movw	r28, r14
     3e0:	a8 81       	ld	r26, Y
     3e2:	b9 81       	ldd	r27, Y+1	; 0x01
     3e4:	12 96       	adiw	r26, 0x02	; 2
     3e6:	8d 91       	ld	r24, X+
     3e8:	9c 91       	ld	r25, X
     3ea:	13 97       	sbiw	r26, 0x03	; 3
     3ec:	84 17       	cp	r24, r20
     3ee:	95 07       	cpc	r25, r21
     3f0:	a8 f3       	brcs	.-22     	; 0x3dc <pvPortMalloc+0xcc>
     3f2:	eb 01       	movw	r28, r22
     3f4:	b9 83       	std	Y+1, r27	; 0x01
     3f6:	a8 83       	st	Y, r26
     3f8:	d7 01       	movw	r26, r14
     3fa:	6d 93       	st	X+, r22
     3fc:	7c 93       	st	X, r23
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     3fe:	82 81       	ldd	r24, Z+2	; 0x02
     400:	93 81       	ldd	r25, Z+3	; 0x03
     402:	28 1b       	sub	r18, r24
     404:	39 0b       	sbc	r19, r25
     406:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     40a:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
     40e:	90 68       	ori	r25, 0x80	; 128
     410:	93 83       	std	Z+3, r25	; 0x03
     412:	82 83       	std	Z+2, r24	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     414:	11 82       	std	Z+1, r1	; 0x01
     416:	10 82       	st	Z, r1
     418:	0b c0       	rjmp	.+22     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
{
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    PRIVILEGED_DATA static BaseType_t xHeapHasBeenInitialised = pdFALSE;
    void * pvReturn = NULL;
     41a:	00 e0       	ldi	r16, 0x00	; 0
     41c:	10 e0       	ldi	r17, 0x00	; 0
     41e:	08 c0       	rjmp	.+16     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     420:	00 e0       	ldi	r16, 0x00	; 0
     422:	10 e0       	ldi	r17, 0x00	; 0
     424:	05 c0       	rjmp	.+10     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     426:	00 e0       	ldi	r16, 0x00	; 0
     428:	10 e0       	ldi	r17, 0x00	; 0
     42a:	02 c0       	rjmp	.+4      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
     42c:	00 e0       	ldi	r16, 0x00	; 0
     42e:	10 e0       	ldi	r17, 0x00	; 0
            }
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     430:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <xTaskResumeAll>
        }
    }
    #endif

    return pvReturn;
}
     434:	c8 01       	movw	r24, r16
     436:	df 91       	pop	r29
     438:	cf 91       	pop	r28
     43a:	1f 91       	pop	r17
     43c:	0f 91       	pop	r16
     43e:	ff 90       	pop	r15
     440:	ef 90       	pop	r14
     442:	08 95       	ret

00000444 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     444:	ef 92       	push	r14
     446:	ff 92       	push	r15
     448:	0f 93       	push	r16
     44a:	1f 93       	push	r17
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     450:	00 97       	sbiw	r24, 0x00	; 0
     452:	b9 f1       	breq	.+110    	; 0x4c2 <vPortFree+0x7e>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= heapSTRUCT_SIZE;
     454:	ec 01       	movw	r28, r24
     456:	24 97       	sbiw	r28, 0x04	; 4
        pxLink = ( void * ) puc;

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
     458:	2a 81       	ldd	r18, Y+2	; 0x02
     45a:	3b 81       	ldd	r19, Y+3	; 0x03
     45c:	33 23       	and	r19, r19
     45e:	8c f5       	brge	.+98     	; 0x4c2 <vPortFree+0x7e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     460:	48 81       	ld	r20, Y
     462:	59 81       	ldd	r21, Y+1	; 0x01
     464:	45 2b       	or	r20, r21
     466:	69 f5       	brne	.+90     	; 0x4c2 <vPortFree+0x7e>
     468:	8c 01       	movw	r16, r24
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
     46a:	3f 77       	andi	r19, 0x7F	; 127
     46c:	3b 83       	std	Y+3, r19	; 0x03
     46e:	2a 83       	std	Y+2, r18	; 0x02
                {
                    ( void ) memset( puc + heapSTRUCT_SIZE, 0, pxLink->xBlockSize - heapSTRUCT_SIZE );
                }
                #endif

                vTaskSuspendAll();
     470:	0e 94 b5 09 	call	0x136a	; 0x136a <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     474:	2a 81       	ldd	r18, Y+2	; 0x02
     476:	3b 81       	ldd	r19, Y+3	; 0x03
     478:	47 ec       	ldi	r20, 0xC7	; 199
     47a:	50 e0       	ldi	r21, 0x00	; 0
     47c:	01 c0       	rjmp	.+2      	; 0x480 <vPortFree+0x3c>
     47e:	af 01       	movw	r20, r30
     480:	da 01       	movw	r26, r20
     482:	ed 91       	ld	r30, X+
     484:	fc 91       	ld	r31, X
     486:	82 81       	ldd	r24, Z+2	; 0x02
     488:	93 81       	ldd	r25, Z+3	; 0x03
     48a:	82 17       	cp	r24, r18
     48c:	93 07       	cpc	r25, r19
     48e:	b8 f3       	brcs	.-18     	; 0x47e <vPortFree+0x3a>
     490:	c8 01       	movw	r24, r16
     492:	04 97       	sbiw	r24, 0x04	; 4
     494:	dc 01       	movw	r26, r24
     496:	11 96       	adiw	r26, 0x01	; 1
     498:	fc 93       	st	X, r31
     49a:	ee 93       	st	-X, r30
     49c:	fa 01       	movw	r30, r20
     49e:	d1 83       	std	Z+1, r29	; 0x01
     4a0:	c0 83       	st	Z, r28
                    xFreeBytesRemaining += pxLink->xBlockSize;
     4a2:	12 96       	adiw	r26, 0x02	; 2
     4a4:	8d 91       	ld	r24, X+
     4a6:	9c 91       	ld	r25, X
     4a8:	13 97       	sbiw	r26, 0x03	; 3
     4aa:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     4ae:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     4b2:	82 0f       	add	r24, r18
     4b4:	93 1f       	adc	r25, r19
     4b6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     4ba:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
                    traceFREE( pv, pxLink->xBlockSize );
                }
                ( void ) xTaskResumeAll();
     4be:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <xTaskResumeAll>
            }
        }
    }
}
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	1f 91       	pop	r17
     4c8:	0f 91       	pop	r16
     4ca:	ff 90       	pop	r15
     4cc:	ef 90       	pop	r14
     4ce:	08 95       	ret

000004d0 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     4d0:	fc 01       	movw	r30, r24
     4d2:	03 96       	adiw	r24, 0x03	; 3
     4d4:	92 83       	std	Z+2, r25	; 0x02
     4d6:	81 83       	std	Z+1, r24	; 0x01
     4d8:	2f ef       	ldi	r18, 0xFF	; 255
     4da:	3f ef       	ldi	r19, 0xFF	; 255
     4dc:	34 83       	std	Z+4, r19	; 0x04
     4de:	23 83       	std	Z+3, r18	; 0x03
     4e0:	96 83       	std	Z+6, r25	; 0x06
     4e2:	85 83       	std	Z+5, r24	; 0x05
     4e4:	90 87       	std	Z+8, r25	; 0x08
     4e6:	87 83       	std	Z+7, r24	; 0x07
     4e8:	10 82       	st	Z, r1
     4ea:	08 95       	ret

000004ec <vListInitialiseItem>:
     4ec:	fc 01       	movw	r30, r24
     4ee:	11 86       	std	Z+9, r1	; 0x09
     4f0:	10 86       	std	Z+8, r1	; 0x08
     4f2:	08 95       	ret

000004f4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     4f4:	cf 93       	push	r28
     4f6:	df 93       	push	r29
     4f8:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     4fa:	48 81       	ld	r20, Y
     4fc:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     4fe:	4f 3f       	cpi	r20, 0xFF	; 255
     500:	2f ef       	ldi	r18, 0xFF	; 255
     502:	52 07       	cpc	r21, r18
     504:	21 f4       	brne	.+8      	; 0x50e <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     506:	fc 01       	movw	r30, r24
     508:	a7 81       	ldd	r26, Z+7	; 0x07
     50a:	b0 85       	ldd	r27, Z+8	; 0x08
     50c:	0d c0       	rjmp	.+26     	; 0x528 <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     50e:	dc 01       	movw	r26, r24
     510:	13 96       	adiw	r26, 0x03	; 3
     512:	01 c0       	rjmp	.+2      	; 0x516 <vListInsert+0x22>
     514:	df 01       	movw	r26, r30
     516:	12 96       	adiw	r26, 0x02	; 2
     518:	ed 91       	ld	r30, X+
     51a:	fc 91       	ld	r31, X
     51c:	13 97       	sbiw	r26, 0x03	; 3
     51e:	20 81       	ld	r18, Z
     520:	31 81       	ldd	r19, Z+1	; 0x01
     522:	42 17       	cp	r20, r18
     524:	53 07       	cpc	r21, r19
     526:	b0 f7       	brcc	.-20     	; 0x514 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     528:	12 96       	adiw	r26, 0x02	; 2
     52a:	ed 91       	ld	r30, X+
     52c:	fc 91       	ld	r31, X
     52e:	13 97       	sbiw	r26, 0x03	; 3
     530:	fb 83       	std	Y+3, r31	; 0x03
     532:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     534:	d5 83       	std	Z+5, r29	; 0x05
     536:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     538:	bd 83       	std	Y+5, r27	; 0x05
     53a:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     53c:	13 96       	adiw	r26, 0x03	; 3
     53e:	dc 93       	st	X, r29
     540:	ce 93       	st	-X, r28
     542:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     544:	99 87       	std	Y+9, r25	; 0x09
     546:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     548:	fc 01       	movw	r30, r24
     54a:	20 81       	ld	r18, Z
     54c:	2f 5f       	subi	r18, 0xFF	; 255
     54e:	20 83       	st	Z, r18
}
     550:	df 91       	pop	r29
     552:	cf 91       	pop	r28
     554:	08 95       	ret

00000556 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     556:	cf 93       	push	r28
     558:	df 93       	push	r29
     55a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     55c:	a0 85       	ldd	r26, Z+8	; 0x08
     55e:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     560:	c2 81       	ldd	r28, Z+2	; 0x02
     562:	d3 81       	ldd	r29, Z+3	; 0x03
     564:	84 81       	ldd	r24, Z+4	; 0x04
     566:	95 81       	ldd	r25, Z+5	; 0x05
     568:	9d 83       	std	Y+5, r25	; 0x05
     56a:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     56c:	c4 81       	ldd	r28, Z+4	; 0x04
     56e:	d5 81       	ldd	r29, Z+5	; 0x05
     570:	82 81       	ldd	r24, Z+2	; 0x02
     572:	93 81       	ldd	r25, Z+3	; 0x03
     574:	9b 83       	std	Y+3, r25	; 0x03
     576:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     578:	11 96       	adiw	r26, 0x01	; 1
     57a:	8d 91       	ld	r24, X+
     57c:	9c 91       	ld	r25, X
     57e:	12 97       	sbiw	r26, 0x02	; 2
     580:	e8 17       	cp	r30, r24
     582:	f9 07       	cpc	r31, r25
     584:	31 f4       	brne	.+12     	; 0x592 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     586:	84 81       	ldd	r24, Z+4	; 0x04
     588:	95 81       	ldd	r25, Z+5	; 0x05
     58a:	12 96       	adiw	r26, 0x02	; 2
     58c:	9c 93       	st	X, r25
     58e:	8e 93       	st	-X, r24
     590:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     592:	11 86       	std	Z+9, r1	; 0x09
     594:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     596:	8c 91       	ld	r24, X
     598:	81 50       	subi	r24, 0x01	; 1
     59a:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     59c:	8c 91       	ld	r24, X
}
     59e:	df 91       	pop	r29
     5a0:	cf 91       	pop	r28
     5a2:	08 95       	ret

000005a4 <LCD_1>:
    }
}

void LCD_1(void *PV)
{
	vTaskDelay(500);
     5a4:	84 ef       	ldi	r24, 0xF4	; 244
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	0e 94 aa 0b 	call	0x1754	; 0x1754 <vTaskDelay>
	
	while(1)
	{	  
		  if(xSemaphoreTake( xBinarySemaphore_2, 100 ) == pdTRUE )
     5ac:	64 e6       	ldi	r22, 0x64	; 100
     5ae:	70 e0       	ldi	r23, 0x00	; 0
     5b0:	80 91 ab 06 	lds	r24, 0x06AB	; 0x8006ab <xBinarySemaphore_2>
     5b4:	90 91 ac 06 	lds	r25, 0x06AC	; 0x8006ac <xBinarySemaphore_2+0x1>
     5b8:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <xQueueSemaphoreTake>
     5bc:	81 30       	cpi	r24, 0x01	; 1
     5be:	79 f4       	brne	.+30     	; 0x5de <LCD_1+0x3a>
		  {
			  CLCD2_voidClearDisplay();
     5c0:	0e 94 33 01 	call	0x266	; 0x266 <CLCD2_voidClearDisplay>
			  CLCD2_voidSendString("TASK 1 is On ");
     5c4:	8b e6       	ldi	r24, 0x6B	; 107
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	0e 94 13 01 	call	0x226	; 0x226 <CLCD2_voidSendString>
     5cc:	2f ef       	ldi	r18, 0xFF	; 255
     5ce:	89 e6       	ldi	r24, 0x69	; 105
     5d0:	98 e1       	ldi	r25, 0x18	; 24
     5d2:	21 50       	subi	r18, 0x01	; 1
     5d4:	80 40       	sbci	r24, 0x00	; 0
     5d6:	90 40       	sbci	r25, 0x00	; 0
     5d8:	e1 f7       	brne	.-8      	; 0x5d2 <LCD_1+0x2e>
     5da:	00 c0       	rjmp	.+0      	; 0x5dc <LCD_1+0x38>
     5dc:	00 00       	nop
			  _delay_ms(1000);
			  //xSemaphoreGive( xBinarySemaphore_2 );
			 // vTaskDelay(2000);
		  }
		  
		  if(xSemaphoreTake( xBinarySemaphore_1, 100 ) == pdTRUE )
     5de:	64 e6       	ldi	r22, 0x64	; 100
     5e0:	70 e0       	ldi	r23, 0x00	; 0
     5e2:	80 91 ad 06 	lds	r24, 0x06AD	; 0x8006ad <xBinarySemaphore_1>
     5e6:	90 91 ae 06 	lds	r25, 0x06AE	; 0x8006ae <xBinarySemaphore_1+0x1>
     5ea:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <xQueueSemaphoreTake>
     5ee:	81 30       	cpi	r24, 0x01	; 1
     5f0:	e9 f6       	brne	.-70     	; 0x5ac <LCD_1+0x8>
		   {
			   CLCD_voidClearDisplay();
     5f2:	0e 94 2f 01 	call	0x25e	; 0x25e <CLCD_voidClearDisplay>
			   CLCD_voidSendString("TASK 1 is On WOOOOW ");
     5f6:	89 e7       	ldi	r24, 0x79	; 121
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	0e 94 a0 00 	call	0x140	; 0x140 <CLCD_voidSendString>
     5fe:	2f ef       	ldi	r18, 0xFF	; 255
     600:	83 ed       	ldi	r24, 0xD3	; 211
     602:	90 e3       	ldi	r25, 0x30	; 48
     604:	21 50       	subi	r18, 0x01	; 1
     606:	80 40       	sbci	r24, 0x00	; 0
     608:	90 40       	sbci	r25, 0x00	; 0
     60a:	e1 f7       	brne	.-8      	; 0x604 <LCD_1+0x60>
     60c:	00 c0       	rjmp	.+0      	; 0x60e <LCD_1+0x6a>
     60e:	00 00       	nop
			  	 _delay_ms(2000);
                  
			  	 xSemaphoreGive( xBinarySemaphore_1 );
     610:	20 e0       	ldi	r18, 0x00	; 0
     612:	40 e0       	ldi	r20, 0x00	; 0
     614:	50 e0       	ldi	r21, 0x00	; 0
     616:	60 e0       	ldi	r22, 0x00	; 0
     618:	70 e0       	ldi	r23, 0x00	; 0
     61a:	80 91 ad 06 	lds	r24, 0x06AD	; 0x8006ad <xBinarySemaphore_1>
     61e:	90 91 ae 06 	lds	r25, 0x06AE	; 0x8006ae <xBinarySemaphore_1+0x1>
     622:	0e 94 66 06 	call	0xccc	; 0xccc <xQueueGenericSend>
				 xSemaphoreGive( xBinarySemaphore_2 );
     626:	20 e0       	ldi	r18, 0x00	; 0
     628:	40 e0       	ldi	r20, 0x00	; 0
     62a:	50 e0       	ldi	r21, 0x00	; 0
     62c:	60 e0       	ldi	r22, 0x00	; 0
     62e:	70 e0       	ldi	r23, 0x00	; 0
     630:	80 91 ab 06 	lds	r24, 0x06AB	; 0x8006ab <xBinarySemaphore_2>
     634:	90 91 ac 06 	lds	r25, 0x06AC	; 0x8006ac <xBinarySemaphore_2+0x1>
     638:	0e 94 66 06 	call	0xccc	; 0xccc <xQueueGenericSend>

				 WDT_voidSleep();
     63c:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <WDT_voidSleep>
     640:	b5 cf       	rjmp	.-150    	; 0x5ac <LCD_1+0x8>

00000642 <LCD_2>:
	}
}

void LCD_2(void *PV)
{
	WDT_voidEnable();
     642:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <WDT_voidEnable>
	WDT_voidSleep();
     646:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <WDT_voidSleep>
	while(1)
	{
		 if(xSemaphoreTake( xBinarySemaphore_1, 100 ) == pdTRUE )
     64a:	64 e6       	ldi	r22, 0x64	; 100
     64c:	70 e0       	ldi	r23, 0x00	; 0
     64e:	80 91 ad 06 	lds	r24, 0x06AD	; 0x8006ad <xBinarySemaphore_1>
     652:	90 91 ae 06 	lds	r25, 0x06AE	; 0x8006ae <xBinarySemaphore_1+0x1>
     656:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <xQueueSemaphoreTake>
     65a:	81 30       	cpi	r24, 0x01	; 1
     65c:	79 f4       	brne	.+30     	; 0x67c <LCD_2+0x3a>
		 	{
			 	CLCD_voidClearDisplay();
     65e:	0e 94 2f 01 	call	0x25e	; 0x25e <CLCD_voidClearDisplay>
			 	CLCD_voidSendString("TASK 2 is On ");
     662:	8e e8       	ldi	r24, 0x8E	; 142
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	0e 94 a0 00 	call	0x140	; 0x140 <CLCD_voidSendString>
     66a:	2f ef       	ldi	r18, 0xFF	; 255
     66c:	89 e6       	ldi	r24, 0x69	; 105
     66e:	98 e1       	ldi	r25, 0x18	; 24
     670:	21 50       	subi	r18, 0x01	; 1
     672:	80 40       	sbci	r24, 0x00	; 0
     674:	90 40       	sbci	r25, 0x00	; 0
     676:	e1 f7       	brne	.-8      	; 0x670 <LCD_2+0x2e>
     678:	00 c0       	rjmp	.+0      	; 0x67a <LCD_2+0x38>
     67a:	00 00       	nop
			 	_delay_ms(1000);
				 //xSemaphoreGive( xBinarySemaphore_1 );
			 	//vTaskDelay(2000);
		 	}
			 
		 if(xSemaphoreTake( xBinarySemaphore_2, 100 ) == pdTRUE )
     67c:	64 e6       	ldi	r22, 0x64	; 100
     67e:	70 e0       	ldi	r23, 0x00	; 0
     680:	80 91 ab 06 	lds	r24, 0x06AB	; 0x8006ab <xBinarySemaphore_2>
     684:	90 91 ac 06 	lds	r25, 0x06AC	; 0x8006ac <xBinarySemaphore_2+0x1>
     688:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <xQueueSemaphoreTake>
     68c:	81 30       	cpi	r24, 0x01	; 1
     68e:	e9 f6       	brne	.-70     	; 0x64a <LCD_2+0x8>
		 {
			 CLCD2_voidClearDisplay();
     690:	0e 94 33 01 	call	0x266	; 0x266 <CLCD2_voidClearDisplay>
			 CLCD2_voidSendString("TASK 2 is On WOOOOW ");
     694:	8c e9       	ldi	r24, 0x9C	; 156
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	0e 94 13 01 	call	0x226	; 0x226 <CLCD2_voidSendString>
     69c:	2f ef       	ldi	r18, 0xFF	; 255
     69e:	83 ed       	ldi	r24, 0xD3	; 211
     6a0:	90 e3       	ldi	r25, 0x30	; 48
     6a2:	21 50       	subi	r18, 0x01	; 1
     6a4:	80 40       	sbci	r24, 0x00	; 0
     6a6:	90 40       	sbci	r25, 0x00	; 0
     6a8:	e1 f7       	brne	.-8      	; 0x6a2 <LCD_2+0x60>
     6aa:	00 c0       	rjmp	.+0      	; 0x6ac <LCD_2+0x6a>
     6ac:	00 00       	nop
     6ae:	cd cf       	rjmp	.-102    	; 0x64a <LCD_2+0x8>

000006b0 <main>:
void WatchdogTask2(void *PV);
void watchdogTask3(void* pvParameters) ;

int main(void)
{
	PORT_voidInit();
     6b0:	0e 94 0f 05 	call	0xa1e	; 0xa1e <PORT_voidInit>
	CLCD_voidInit();
     6b4:	0e 94 6b 00 	call	0xd6	; 0xd6 <CLCD_voidInit>
	CLCD_voidSetCursor(1,0);
     6b8:	60 e0       	ldi	r22, 0x00	; 0
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	0e 94 b3 00 	call	0x166	; 0x166 <CLCD_voidSetCursor>
	
	CLCD2_voidInit();
     6c0:	0e 94 de 00 	call	0x1bc	; 0x1bc <CLCD2_voidInit>
	CLCD2_voidSetCursor(1,0);
     6c4:	60 e0       	ldi	r22, 0x00	; 0
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	0e 94 26 01 	call	0x24c	; 0x24c <CLCD2_voidSetCursor>

	
	xBinarySemaphore_1 =xSemaphoreCreateBinary( ); 
     6cc:	43 e0       	ldi	r20, 0x03	; 3
     6ce:	60 e0       	ldi	r22, 0x00	; 0
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	0e 94 25 06 	call	0xc4a	; 0xc4a <xQueueGenericCreate>
     6d6:	90 93 ae 06 	sts	0x06AE, r25	; 0x8006ae <xBinarySemaphore_1+0x1>
     6da:	80 93 ad 06 	sts	0x06AD, r24	; 0x8006ad <xBinarySemaphore_1>
	xBinarySemaphore_2 =xSemaphoreCreateBinary( ); 
     6de:	43 e0       	ldi	r20, 0x03	; 3
     6e0:	60 e0       	ldi	r22, 0x00	; 0
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	0e 94 25 06 	call	0xc4a	; 0xc4a <xQueueGenericCreate>
     6e8:	90 93 ac 06 	sts	0x06AC, r25	; 0x8006ac <xBinarySemaphore_2+0x1>
     6ec:	80 93 ab 06 	sts	0x06AB, r24	; 0x8006ab <xBinarySemaphore_2>
	
	xSemaphoreGive( xBinarySemaphore_1 );
     6f0:	20 e0       	ldi	r18, 0x00	; 0
     6f2:	40 e0       	ldi	r20, 0x00	; 0
     6f4:	50 e0       	ldi	r21, 0x00	; 0
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	70 e0       	ldi	r23, 0x00	; 0
     6fa:	80 91 ad 06 	lds	r24, 0x06AD	; 0x8006ad <xBinarySemaphore_1>
     6fe:	90 91 ae 06 	lds	r25, 0x06AE	; 0x8006ae <xBinarySemaphore_1+0x1>
     702:	0e 94 66 06 	call	0xccc	; 0xccc <xQueueGenericSend>
	xSemaphoreGive( xBinarySemaphore_2 );
     706:	20 e0       	ldi	r18, 0x00	; 0
     708:	40 e0       	ldi	r20, 0x00	; 0
     70a:	50 e0       	ldi	r21, 0x00	; 0
     70c:	60 e0       	ldi	r22, 0x00	; 0
     70e:	70 e0       	ldi	r23, 0x00	; 0
     710:	80 91 ab 06 	lds	r24, 0x06AB	; 0x8006ab <xBinarySemaphore_2>
     714:	90 91 ac 06 	lds	r25, 0x06AC	; 0x8006ac <xBinarySemaphore_2+0x1>
     718:	0e 94 66 06 	call	0xccc	; 0xccc <xQueueGenericSend>
	

	xTaskCreate(LCD_1,"LCD_1",100,NULL,1,&Task1Handler);
     71c:	0f 2e       	mov	r0, r31
     71e:	f9 ea       	ldi	r31, 0xA9	; 169
     720:	ef 2e       	mov	r14, r31
     722:	f6 e0       	ldi	r31, 0x06	; 6
     724:	ff 2e       	mov	r15, r31
     726:	f0 2d       	mov	r31, r0
     728:	01 e0       	ldi	r16, 0x01	; 1
     72a:	20 e0       	ldi	r18, 0x00	; 0
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	44 e6       	ldi	r20, 0x64	; 100
     730:	50 e0       	ldi	r21, 0x00	; 0
     732:	61 eb       	ldi	r22, 0xB1	; 177
     734:	70 e0       	ldi	r23, 0x00	; 0
     736:	82 ed       	ldi	r24, 0xD2	; 210
     738:	92 e0       	ldi	r25, 0x02	; 2
     73a:	0e 94 30 09 	call	0x1260	; 0x1260 <xTaskCreate>
	xTaskCreate(LCD_2,"LCD_2",100,NULL,0,&Task2Handler);
     73e:	0f 2e       	mov	r0, r31
     740:	f7 ea       	ldi	r31, 0xA7	; 167
     742:	ef 2e       	mov	r14, r31
     744:	f6 e0       	ldi	r31, 0x06	; 6
     746:	ff 2e       	mov	r15, r31
     748:	f0 2d       	mov	r31, r0
     74a:	00 e0       	ldi	r16, 0x00	; 0
     74c:	20 e0       	ldi	r18, 0x00	; 0
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	44 e6       	ldi	r20, 0x64	; 100
     752:	50 e0       	ldi	r21, 0x00	; 0
     754:	67 eb       	ldi	r22, 0xB7	; 183
     756:	70 e0       	ldi	r23, 0x00	; 0
     758:	81 e2       	ldi	r24, 0x21	; 33
     75a:	93 e0       	ldi	r25, 0x03	; 3
     75c:	0e 94 30 09 	call	0x1260	; 0x1260 <xTaskCreate>
	/*start OS*/
	vTaskStartScheduler();
     760:	0e 94 89 09 	call	0x1312	; 0x1312 <vTaskStartScheduler>
     764:	ff cf       	rjmp	.-2      	; 0x764 <main+0xb4>

00000766 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     766:	1b bc       	out	0x2b, r1	; 43
     768:	8c e7       	ldi	r24, 0x7C	; 124
     76a:	8a bd       	out	0x2a, r24	; 42
     76c:	8b e0       	ldi	r24, 0x0B	; 11
     76e:	8e bd       	out	0x2e, r24	; 46
     770:	89 b7       	in	r24, 0x39	; 57
     772:	80 61       	ori	r24, 0x10	; 16
     774:	89 bf       	out	0x39, r24	; 57
     776:	08 95       	ret

00000778 <pxPortInitialiseStack>:
     778:	31 e1       	ldi	r19, 0x11	; 17
     77a:	fc 01       	movw	r30, r24
     77c:	30 83       	st	Z, r19
     77e:	31 97       	sbiw	r30, 0x01	; 1
     780:	22 e2       	ldi	r18, 0x22	; 34
     782:	20 83       	st	Z, r18
     784:	31 97       	sbiw	r30, 0x01	; 1
     786:	a3 e3       	ldi	r26, 0x33	; 51
     788:	a0 83       	st	Z, r26
     78a:	31 97       	sbiw	r30, 0x01	; 1
     78c:	60 83       	st	Z, r22
     78e:	31 97       	sbiw	r30, 0x01	; 1
     790:	70 83       	st	Z, r23
     792:	31 97       	sbiw	r30, 0x01	; 1
     794:	10 82       	st	Z, r1
     796:	31 97       	sbiw	r30, 0x01	; 1
     798:	60 e8       	ldi	r22, 0x80	; 128
     79a:	60 83       	st	Z, r22
     79c:	31 97       	sbiw	r30, 0x01	; 1
     79e:	10 82       	st	Z, r1
     7a0:	31 97       	sbiw	r30, 0x01	; 1
     7a2:	62 e0       	ldi	r22, 0x02	; 2
     7a4:	60 83       	st	Z, r22
     7a6:	31 97       	sbiw	r30, 0x01	; 1
     7a8:	63 e0       	ldi	r22, 0x03	; 3
     7aa:	60 83       	st	Z, r22
     7ac:	31 97       	sbiw	r30, 0x01	; 1
     7ae:	64 e0       	ldi	r22, 0x04	; 4
     7b0:	60 83       	st	Z, r22
     7b2:	31 97       	sbiw	r30, 0x01	; 1
     7b4:	65 e0       	ldi	r22, 0x05	; 5
     7b6:	60 83       	st	Z, r22
     7b8:	31 97       	sbiw	r30, 0x01	; 1
     7ba:	66 e0       	ldi	r22, 0x06	; 6
     7bc:	60 83       	st	Z, r22
     7be:	31 97       	sbiw	r30, 0x01	; 1
     7c0:	67 e0       	ldi	r22, 0x07	; 7
     7c2:	60 83       	st	Z, r22
     7c4:	31 97       	sbiw	r30, 0x01	; 1
     7c6:	68 e0       	ldi	r22, 0x08	; 8
     7c8:	60 83       	st	Z, r22
     7ca:	31 97       	sbiw	r30, 0x01	; 1
     7cc:	69 e0       	ldi	r22, 0x09	; 9
     7ce:	60 83       	st	Z, r22
     7d0:	31 97       	sbiw	r30, 0x01	; 1
     7d2:	60 e1       	ldi	r22, 0x10	; 16
     7d4:	60 83       	st	Z, r22
     7d6:	31 97       	sbiw	r30, 0x01	; 1
     7d8:	30 83       	st	Z, r19
     7da:	31 97       	sbiw	r30, 0x01	; 1
     7dc:	32 e1       	ldi	r19, 0x12	; 18
     7de:	30 83       	st	Z, r19
     7e0:	31 97       	sbiw	r30, 0x01	; 1
     7e2:	33 e1       	ldi	r19, 0x13	; 19
     7e4:	30 83       	st	Z, r19
     7e6:	31 97       	sbiw	r30, 0x01	; 1
     7e8:	34 e1       	ldi	r19, 0x14	; 20
     7ea:	30 83       	st	Z, r19
     7ec:	31 97       	sbiw	r30, 0x01	; 1
     7ee:	35 e1       	ldi	r19, 0x15	; 21
     7f0:	30 83       	st	Z, r19
     7f2:	31 97       	sbiw	r30, 0x01	; 1
     7f4:	36 e1       	ldi	r19, 0x16	; 22
     7f6:	30 83       	st	Z, r19
     7f8:	31 97       	sbiw	r30, 0x01	; 1
     7fa:	37 e1       	ldi	r19, 0x17	; 23
     7fc:	30 83       	st	Z, r19
     7fe:	31 97       	sbiw	r30, 0x01	; 1
     800:	38 e1       	ldi	r19, 0x18	; 24
     802:	30 83       	st	Z, r19
     804:	31 97       	sbiw	r30, 0x01	; 1
     806:	39 e1       	ldi	r19, 0x19	; 25
     808:	30 83       	st	Z, r19
     80a:	31 97       	sbiw	r30, 0x01	; 1
     80c:	30 e2       	ldi	r19, 0x20	; 32
     80e:	30 83       	st	Z, r19
     810:	31 97       	sbiw	r30, 0x01	; 1
     812:	31 e2       	ldi	r19, 0x21	; 33
     814:	30 83       	st	Z, r19
     816:	31 97       	sbiw	r30, 0x01	; 1
     818:	20 83       	st	Z, r18
     81a:	31 97       	sbiw	r30, 0x01	; 1
     81c:	23 e2       	ldi	r18, 0x23	; 35
     81e:	20 83       	st	Z, r18
     820:	31 97       	sbiw	r30, 0x01	; 1
     822:	40 83       	st	Z, r20
     824:	31 97       	sbiw	r30, 0x01	; 1
     826:	50 83       	st	Z, r21
     828:	31 97       	sbiw	r30, 0x01	; 1
     82a:	26 e2       	ldi	r18, 0x26	; 38
     82c:	20 83       	st	Z, r18
     82e:	31 97       	sbiw	r30, 0x01	; 1
     830:	27 e2       	ldi	r18, 0x27	; 39
     832:	20 83       	st	Z, r18
     834:	31 97       	sbiw	r30, 0x01	; 1
     836:	28 e2       	ldi	r18, 0x28	; 40
     838:	20 83       	st	Z, r18
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	29 e2       	ldi	r18, 0x29	; 41
     83e:	20 83       	st	Z, r18
     840:	31 97       	sbiw	r30, 0x01	; 1
     842:	20 e3       	ldi	r18, 0x30	; 48
     844:	20 83       	st	Z, r18
     846:	31 97       	sbiw	r30, 0x01	; 1
     848:	21 e3       	ldi	r18, 0x31	; 49
     84a:	20 83       	st	Z, r18
     84c:	86 97       	sbiw	r24, 0x26	; 38
     84e:	08 95       	ret

00000850 <xPortStartScheduler>:
     850:	0e 94 b3 03 	call	0x766	; 0x766 <prvSetupTimerInterrupt>
     854:	a0 91 0b 07 	lds	r26, 0x070B	; 0x80070b <pxCurrentTCB>
     858:	b0 91 0c 07 	lds	r27, 0x070C	; 0x80070c <pxCurrentTCB+0x1>
     85c:	cd 91       	ld	r28, X+
     85e:	cd bf       	out	0x3d, r28	; 61
     860:	dd 91       	ld	r29, X+
     862:	de bf       	out	0x3e, r29	; 62
     864:	ff 91       	pop	r31
     866:	ef 91       	pop	r30
     868:	df 91       	pop	r29
     86a:	cf 91       	pop	r28
     86c:	bf 91       	pop	r27
     86e:	af 91       	pop	r26
     870:	9f 91       	pop	r25
     872:	8f 91       	pop	r24
     874:	7f 91       	pop	r23
     876:	6f 91       	pop	r22
     878:	5f 91       	pop	r21
     87a:	4f 91       	pop	r20
     87c:	3f 91       	pop	r19
     87e:	2f 91       	pop	r18
     880:	1f 91       	pop	r17
     882:	0f 91       	pop	r16
     884:	ff 90       	pop	r15
     886:	ef 90       	pop	r14
     888:	df 90       	pop	r13
     88a:	cf 90       	pop	r12
     88c:	bf 90       	pop	r11
     88e:	af 90       	pop	r10
     890:	9f 90       	pop	r9
     892:	8f 90       	pop	r8
     894:	7f 90       	pop	r7
     896:	6f 90       	pop	r6
     898:	5f 90       	pop	r5
     89a:	4f 90       	pop	r4
     89c:	3f 90       	pop	r3
     89e:	2f 90       	pop	r2
     8a0:	1f 90       	pop	r1
     8a2:	0f 90       	pop	r0
     8a4:	0f be       	out	0x3f, r0	; 63
     8a6:	0f 90       	pop	r0
     8a8:	08 95       	ret
     8aa:	81 e0       	ldi	r24, 0x01	; 1
     8ac:	08 95       	ret

000008ae <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     8ae:	0f 92       	push	r0
     8b0:	0f b6       	in	r0, 0x3f	; 63
     8b2:	f8 94       	cli
     8b4:	0f 92       	push	r0
     8b6:	1f 92       	push	r1
     8b8:	11 24       	eor	r1, r1
     8ba:	2f 92       	push	r2
     8bc:	3f 92       	push	r3
     8be:	4f 92       	push	r4
     8c0:	5f 92       	push	r5
     8c2:	6f 92       	push	r6
     8c4:	7f 92       	push	r7
     8c6:	8f 92       	push	r8
     8c8:	9f 92       	push	r9
     8ca:	af 92       	push	r10
     8cc:	bf 92       	push	r11
     8ce:	cf 92       	push	r12
     8d0:	df 92       	push	r13
     8d2:	ef 92       	push	r14
     8d4:	ff 92       	push	r15
     8d6:	0f 93       	push	r16
     8d8:	1f 93       	push	r17
     8da:	2f 93       	push	r18
     8dc:	3f 93       	push	r19
     8de:	4f 93       	push	r20
     8e0:	5f 93       	push	r21
     8e2:	6f 93       	push	r22
     8e4:	7f 93       	push	r23
     8e6:	8f 93       	push	r24
     8e8:	9f 93       	push	r25
     8ea:	af 93       	push	r26
     8ec:	bf 93       	push	r27
     8ee:	cf 93       	push	r28
     8f0:	df 93       	push	r29
     8f2:	ef 93       	push	r30
     8f4:	ff 93       	push	r31
     8f6:	a0 91 0b 07 	lds	r26, 0x070B	; 0x80070b <pxCurrentTCB>
     8fa:	b0 91 0c 07 	lds	r27, 0x070C	; 0x80070c <pxCurrentTCB+0x1>
     8fe:	0d b6       	in	r0, 0x3d	; 61
     900:	0d 92       	st	X+, r0
     902:	0e b6       	in	r0, 0x3e	; 62
     904:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     906:	0e 94 c0 0b 	call	0x1780	; 0x1780 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     90a:	a0 91 0b 07 	lds	r26, 0x070B	; 0x80070b <pxCurrentTCB>
     90e:	b0 91 0c 07 	lds	r27, 0x070C	; 0x80070c <pxCurrentTCB+0x1>
     912:	cd 91       	ld	r28, X+
     914:	cd bf       	out	0x3d, r28	; 61
     916:	dd 91       	ld	r29, X+
     918:	de bf       	out	0x3e, r29	; 62
     91a:	ff 91       	pop	r31
     91c:	ef 91       	pop	r30
     91e:	df 91       	pop	r29
     920:	cf 91       	pop	r28
     922:	bf 91       	pop	r27
     924:	af 91       	pop	r26
     926:	9f 91       	pop	r25
     928:	8f 91       	pop	r24
     92a:	7f 91       	pop	r23
     92c:	6f 91       	pop	r22
     92e:	5f 91       	pop	r21
     930:	4f 91       	pop	r20
     932:	3f 91       	pop	r19
     934:	2f 91       	pop	r18
     936:	1f 91       	pop	r17
     938:	0f 91       	pop	r16
     93a:	ff 90       	pop	r15
     93c:	ef 90       	pop	r14
     93e:	df 90       	pop	r13
     940:	cf 90       	pop	r12
     942:	bf 90       	pop	r11
     944:	af 90       	pop	r10
     946:	9f 90       	pop	r9
     948:	8f 90       	pop	r8
     94a:	7f 90       	pop	r7
     94c:	6f 90       	pop	r6
     94e:	5f 90       	pop	r5
     950:	4f 90       	pop	r4
     952:	3f 90       	pop	r3
     954:	2f 90       	pop	r2
     956:	1f 90       	pop	r1
     958:	0f 90       	pop	r0
     95a:	0f be       	out	0x3f, r0	; 63
     95c:	0f 90       	pop	r0

	asm volatile ( "ret" );
     95e:	08 95       	ret

00000960 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     960:	0f 92       	push	r0
     962:	0f b6       	in	r0, 0x3f	; 63
     964:	f8 94       	cli
     966:	0f 92       	push	r0
     968:	1f 92       	push	r1
     96a:	11 24       	eor	r1, r1
     96c:	2f 92       	push	r2
     96e:	3f 92       	push	r3
     970:	4f 92       	push	r4
     972:	5f 92       	push	r5
     974:	6f 92       	push	r6
     976:	7f 92       	push	r7
     978:	8f 92       	push	r8
     97a:	9f 92       	push	r9
     97c:	af 92       	push	r10
     97e:	bf 92       	push	r11
     980:	cf 92       	push	r12
     982:	df 92       	push	r13
     984:	ef 92       	push	r14
     986:	ff 92       	push	r15
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	2f 93       	push	r18
     98e:	3f 93       	push	r19
     990:	4f 93       	push	r20
     992:	5f 93       	push	r21
     994:	6f 93       	push	r22
     996:	7f 93       	push	r23
     998:	8f 93       	push	r24
     99a:	9f 93       	push	r25
     99c:	af 93       	push	r26
     99e:	bf 93       	push	r27
     9a0:	cf 93       	push	r28
     9a2:	df 93       	push	r29
     9a4:	ef 93       	push	r30
     9a6:	ff 93       	push	r31
     9a8:	a0 91 0b 07 	lds	r26, 0x070B	; 0x80070b <pxCurrentTCB>
     9ac:	b0 91 0c 07 	lds	r27, 0x070C	; 0x80070c <pxCurrentTCB+0x1>
     9b0:	0d b6       	in	r0, 0x3d	; 61
     9b2:	0d 92       	st	X+, r0
     9b4:	0e b6       	in	r0, 0x3e	; 62
     9b6:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     9b8:	0e 94 bb 09 	call	0x1376	; 0x1376 <xTaskIncrementTick>
     9bc:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     9be:	0e 94 c0 0b 	call	0x1780	; 0x1780 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     9c2:	a0 91 0b 07 	lds	r26, 0x070B	; 0x80070b <pxCurrentTCB>
     9c6:	b0 91 0c 07 	lds	r27, 0x070C	; 0x80070c <pxCurrentTCB+0x1>
     9ca:	cd 91       	ld	r28, X+
     9cc:	cd bf       	out	0x3d, r28	; 61
     9ce:	dd 91       	ld	r29, X+
     9d0:	de bf       	out	0x3e, r29	; 62
     9d2:	ff 91       	pop	r31
     9d4:	ef 91       	pop	r30
     9d6:	df 91       	pop	r29
     9d8:	cf 91       	pop	r28
     9da:	bf 91       	pop	r27
     9dc:	af 91       	pop	r26
     9de:	9f 91       	pop	r25
     9e0:	8f 91       	pop	r24
     9e2:	7f 91       	pop	r23
     9e4:	6f 91       	pop	r22
     9e6:	5f 91       	pop	r21
     9e8:	4f 91       	pop	r20
     9ea:	3f 91       	pop	r19
     9ec:	2f 91       	pop	r18
     9ee:	1f 91       	pop	r17
     9f0:	0f 91       	pop	r16
     9f2:	ff 90       	pop	r15
     9f4:	ef 90       	pop	r14
     9f6:	df 90       	pop	r13
     9f8:	cf 90       	pop	r12
     9fa:	bf 90       	pop	r11
     9fc:	af 90       	pop	r10
     9fe:	9f 90       	pop	r9
     a00:	8f 90       	pop	r8
     a02:	7f 90       	pop	r7
     a04:	6f 90       	pop	r6
     a06:	5f 90       	pop	r5
     a08:	4f 90       	pop	r4
     a0a:	3f 90       	pop	r3
     a0c:	2f 90       	pop	r2
     a0e:	1f 90       	pop	r1
     a10:	0f 90       	pop	r0
     a12:	0f be       	out	0x3f, r0	; 63
     a14:	0f 90       	pop	r0

	asm volatile ( "ret" );
     a16:	08 95       	ret

00000a18 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     a18:	0e 94 b0 04 	call	0x960	; 0x960 <vPortYieldFromTick>
		asm volatile ( "reti" );
     a1c:	18 95       	reti

00000a1e <PORT_voidInit>:
#include"PORT_private.h"
#include"PORT_interface.h"

void PORT_voidInit(void)
{
	DDRA=PORTA_DIR;
     a1e:	8f ef       	ldi	r24, 0xFF	; 255
     a20:	8a bb       	out	0x1a, r24	; 26
    DDRB=PORTB_DIR;
     a22:	9f e7       	ldi	r25, 0x7F	; 127
     a24:	97 bb       	out	0x17, r25	; 23
    DDRC=PORTC_DIR;
     a26:	84 bb       	out	0x14, r24	; 20
    DDRD=PORTD_DIR;
     a28:	11 ba       	out	0x11, r1	; 17
	
	PORTA=PORTA_INITVAL ;
     a2a:	1b ba       	out	0x1b, r1	; 27
    PORTB=PORTB_INITVAL	;
     a2c:	18 ba       	out	0x18, r1	; 24
    PORTC=PORTC_INITVAL	;
     a2e:	15 ba       	out	0x15, r1	; 21
    PORTD=PORTD_INITVAL	;
     a30:	12 ba       	out	0x12, r1	; 18
     a32:	08 95       	ret

00000a34 <prvIsQueueEmpty>:
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
     a34:	0f b6       	in	r0, 0x3f	; 63
     a36:	f8 94       	cli
     a38:	0f 92       	push	r0
     a3a:	fc 01       	movw	r30, r24
     a3c:	82 8d       	ldd	r24, Z+26	; 0x1a
     a3e:	81 11       	cpse	r24, r1
     a40:	02 c0       	rjmp	.+4      	; 0xa46 <prvIsQueueEmpty+0x12>
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	01 c0       	rjmp	.+2      	; 0xa48 <prvIsQueueEmpty+0x14>
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	0f 90       	pop	r0
     a4a:	0f be       	out	0x3f, r0	; 63
     a4c:	08 95       	ret

00000a4e <prvIsQueueFull>:
     a4e:	0f b6       	in	r0, 0x3f	; 63
     a50:	f8 94       	cli
     a52:	0f 92       	push	r0
     a54:	fc 01       	movw	r30, r24
     a56:	22 8d       	ldd	r18, Z+26	; 0x1a
     a58:	83 8d       	ldd	r24, Z+27	; 0x1b
     a5a:	28 13       	cpse	r18, r24
     a5c:	02 c0       	rjmp	.+4      	; 0xa62 <prvIsQueueFull+0x14>
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	01 c0       	rjmp	.+2      	; 0xa64 <prvIsQueueFull+0x16>
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	0f 90       	pop	r0
     a66:	0f be       	out	0x3f, r0	; 63
     a68:	08 95       	ret

00000a6a <prvCopyDataToQueue>:
     a6a:	0f 93       	push	r16
     a6c:	1f 93       	push	r17
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
     a72:	ec 01       	movw	r28, r24
     a74:	04 2f       	mov	r16, r20
     a76:	1a 8d       	ldd	r17, Y+26	; 0x1a
     a78:	4c 8d       	ldd	r20, Y+28	; 0x1c
     a7a:	44 23       	and	r20, r20
     a7c:	b9 f1       	breq	.+110    	; 0xaec <prvCopyDataToQueue+0x82>
     a7e:	01 11       	cpse	r16, r1
     a80:	16 c0       	rjmp	.+44     	; 0xaae <prvCopyDataToQueue+0x44>
     a82:	50 e0       	ldi	r21, 0x00	; 0
     a84:	8a 81       	ldd	r24, Y+2	; 0x02
     a86:	9b 81       	ldd	r25, Y+3	; 0x03
     a88:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <memcpy>
     a8c:	2c 8d       	ldd	r18, Y+28	; 0x1c
     a8e:	8a 81       	ldd	r24, Y+2	; 0x02
     a90:	9b 81       	ldd	r25, Y+3	; 0x03
     a92:	82 0f       	add	r24, r18
     a94:	91 1d       	adc	r25, r1
     a96:	9b 83       	std	Y+3, r25	; 0x03
     a98:	8a 83       	std	Y+2, r24	; 0x02
     a9a:	2c 81       	ldd	r18, Y+4	; 0x04
     a9c:	3d 81       	ldd	r19, Y+5	; 0x05
     a9e:	82 17       	cp	r24, r18
     aa0:	93 07       	cpc	r25, r19
     aa2:	20 f1       	brcs	.+72     	; 0xaec <prvCopyDataToQueue+0x82>
     aa4:	88 81       	ld	r24, Y
     aa6:	99 81       	ldd	r25, Y+1	; 0x01
     aa8:	9b 83       	std	Y+3, r25	; 0x03
     aaa:	8a 83       	std	Y+2, r24	; 0x02
     aac:	1f c0       	rjmp	.+62     	; 0xaec <prvCopyDataToQueue+0x82>
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	8e 81       	ldd	r24, Y+6	; 0x06
     ab2:	9f 81       	ldd	r25, Y+7	; 0x07
     ab4:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <memcpy>
     ab8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	91 95       	neg	r25
     abe:	81 95       	neg	r24
     ac0:	91 09       	sbc	r25, r1
     ac2:	2e 81       	ldd	r18, Y+6	; 0x06
     ac4:	3f 81       	ldd	r19, Y+7	; 0x07
     ac6:	28 0f       	add	r18, r24
     ac8:	39 1f       	adc	r19, r25
     aca:	3f 83       	std	Y+7, r19	; 0x07
     acc:	2e 83       	std	Y+6, r18	; 0x06
     ace:	48 81       	ld	r20, Y
     ad0:	59 81       	ldd	r21, Y+1	; 0x01
     ad2:	24 17       	cp	r18, r20
     ad4:	35 07       	cpc	r19, r21
     ad6:	30 f4       	brcc	.+12     	; 0xae4 <prvCopyDataToQueue+0x7a>
     ad8:	2c 81       	ldd	r18, Y+4	; 0x04
     ada:	3d 81       	ldd	r19, Y+5	; 0x05
     adc:	82 0f       	add	r24, r18
     ade:	93 1f       	adc	r25, r19
     ae0:	9f 83       	std	Y+7, r25	; 0x07
     ae2:	8e 83       	std	Y+6, r24	; 0x06
     ae4:	02 30       	cpi	r16, 0x02	; 2
     ae6:	11 f4       	brne	.+4      	; 0xaec <prvCopyDataToQueue+0x82>
     ae8:	11 11       	cpse	r17, r1
     aea:	11 50       	subi	r17, 0x01	; 1
     aec:	1f 5f       	subi	r17, 0xFF	; 255
     aee:	1a 8f       	std	Y+26, r17	; 0x1a
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	df 91       	pop	r29
     af4:	cf 91       	pop	r28
     af6:	1f 91       	pop	r17
     af8:	0f 91       	pop	r16
     afa:	08 95       	ret

00000afc <prvUnlockQueue>:
     afc:	1f 93       	push	r17
     afe:	cf 93       	push	r28
     b00:	df 93       	push	r29
     b02:	ec 01       	movw	r28, r24
     b04:	0f b6       	in	r0, 0x3f	; 63
     b06:	f8 94       	cli
     b08:	0f 92       	push	r0
     b0a:	1e 8d       	ldd	r17, Y+30	; 0x1e
     b0c:	0b c0       	rjmp	.+22     	; 0xb24 <prvUnlockQueue+0x28>
     b0e:	89 89       	ldd	r24, Y+17	; 0x11
     b10:	88 23       	and	r24, r24
     b12:	51 f0       	breq	.+20     	; 0xb28 <prvUnlockQueue+0x2c>
     b14:	ce 01       	movw	r24, r28
     b16:	41 96       	adiw	r24, 0x11	; 17
     b18:	0e 94 26 0c 	call	0x184c	; 0x184c <xTaskRemoveFromEventList>
     b1c:	81 11       	cpse	r24, r1
     b1e:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <vTaskMissedYield>
     b22:	11 50       	subi	r17, 0x01	; 1
     b24:	11 16       	cp	r1, r17
     b26:	9c f3       	brlt	.-26     	; 0xb0e <prvUnlockQueue+0x12>
     b28:	8f ef       	ldi	r24, 0xFF	; 255
     b2a:	8e 8f       	std	Y+30, r24	; 0x1e
     b2c:	0f 90       	pop	r0
     b2e:	0f be       	out	0x3f, r0	; 63
     b30:	0f b6       	in	r0, 0x3f	; 63
     b32:	f8 94       	cli
     b34:	0f 92       	push	r0
     b36:	1d 8d       	ldd	r17, Y+29	; 0x1d
     b38:	0b c0       	rjmp	.+22     	; 0xb50 <prvUnlockQueue+0x54>
     b3a:	88 85       	ldd	r24, Y+8	; 0x08
     b3c:	88 23       	and	r24, r24
     b3e:	51 f0       	breq	.+20     	; 0xb54 <prvUnlockQueue+0x58>
     b40:	ce 01       	movw	r24, r28
     b42:	08 96       	adiw	r24, 0x08	; 8
     b44:	0e 94 26 0c 	call	0x184c	; 0x184c <xTaskRemoveFromEventList>
     b48:	81 11       	cpse	r24, r1
     b4a:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <vTaskMissedYield>
     b4e:	11 50       	subi	r17, 0x01	; 1
     b50:	11 16       	cp	r1, r17
     b52:	9c f3       	brlt	.-26     	; 0xb3a <prvUnlockQueue+0x3e>
     b54:	8f ef       	ldi	r24, 0xFF	; 255
     b56:	8d 8f       	std	Y+29, r24	; 0x1d
     b58:	0f 90       	pop	r0
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	df 91       	pop	r29
     b5e:	cf 91       	pop	r28
     b60:	1f 91       	pop	r17
     b62:	08 95       	ret

00000b64 <xQueueGenericReset>:
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	cf 93       	push	r28
     b6a:	df 93       	push	r29
     b6c:	fc 01       	movw	r30, r24
     b6e:	36 2f       	mov	r19, r22
     b70:	89 2b       	or	r24, r25
     b72:	09 f4       	brne	.+2      	; 0xb76 <xQueueGenericReset+0x12>
     b74:	4d c0       	rjmp	.+154    	; 0xc10 <xQueueGenericReset+0xac>
     b76:	23 8d       	ldd	r18, Z+27	; 0x1b
     b78:	22 23       	and	r18, r18
     b7a:	09 f4       	brne	.+2      	; 0xb7e <xQueueGenericReset+0x1a>
     b7c:	4b c0       	rjmp	.+150    	; 0xc14 <xQueueGenericReset+0xb0>
     b7e:	02 2f       	mov	r16, r18
     b80:	10 e0       	ldi	r17, 0x00	; 0
     b82:	8f ef       	ldi	r24, 0xFF	; 255
     b84:	9f ef       	ldi	r25, 0xFF	; 255
     b86:	b8 01       	movw	r22, r16
     b88:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <__udivmodhi4>
     b8c:	44 8d       	ldd	r20, Z+28	; 0x1c
     b8e:	84 2f       	mov	r24, r20
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	68 17       	cp	r22, r24
     b94:	79 07       	cpc	r23, r25
     b96:	08 f4       	brcc	.+2      	; 0xb9a <xQueueGenericReset+0x36>
     b98:	3f c0       	rjmp	.+126    	; 0xc18 <xQueueGenericReset+0xb4>
     b9a:	ef 01       	movw	r28, r30
     b9c:	0f b6       	in	r0, 0x3f	; 63
     b9e:	f8 94       	cli
     ba0:	0f 92       	push	r0
     ba2:	60 81       	ld	r22, Z
     ba4:	71 81       	ldd	r23, Z+1	; 0x01
     ba6:	fb 01       	movw	r30, r22
     ba8:	24 9f       	mul	r18, r20
     baa:	e0 0d       	add	r30, r0
     bac:	f1 1d       	adc	r31, r1
     bae:	11 24       	eor	r1, r1
     bb0:	fd 83       	std	Y+5, r31	; 0x05
     bb2:	ec 83       	std	Y+4, r30	; 0x04
     bb4:	1a 8e       	std	Y+26, r1	; 0x1a
     bb6:	7b 83       	std	Y+3, r23	; 0x03
     bb8:	6a 83       	std	Y+2, r22	; 0x02
     bba:	01 50       	subi	r16, 0x01	; 1
     bbc:	11 09       	sbc	r17, r1
     bbe:	80 9f       	mul	r24, r16
     bc0:	a0 01       	movw	r20, r0
     bc2:	81 9f       	mul	r24, r17
     bc4:	50 0d       	add	r21, r0
     bc6:	90 9f       	mul	r25, r16
     bc8:	50 0d       	add	r21, r0
     bca:	11 24       	eor	r1, r1
     bcc:	cb 01       	movw	r24, r22
     bce:	84 0f       	add	r24, r20
     bd0:	95 1f       	adc	r25, r21
     bd2:	9f 83       	std	Y+7, r25	; 0x07
     bd4:	8e 83       	std	Y+6, r24	; 0x06
     bd6:	8f ef       	ldi	r24, 0xFF	; 255
     bd8:	8d 8f       	std	Y+29, r24	; 0x1d
     bda:	8e 8f       	std	Y+30, r24	; 0x1e
     bdc:	31 11       	cpse	r19, r1
     bde:	0c c0       	rjmp	.+24     	; 0xbf8 <xQueueGenericReset+0x94>
     be0:	88 85       	ldd	r24, Y+8	; 0x08
     be2:	88 23       	and	r24, r24
     be4:	89 f0       	breq	.+34     	; 0xc08 <xQueueGenericReset+0xa4>
     be6:	ce 01       	movw	r24, r28
     be8:	08 96       	adiw	r24, 0x08	; 8
     bea:	0e 94 26 0c 	call	0x184c	; 0x184c <xTaskRemoveFromEventList>
     bee:	88 23       	and	r24, r24
     bf0:	59 f0       	breq	.+22     	; 0xc08 <xQueueGenericReset+0xa4>
     bf2:	0e 94 57 04 	call	0x8ae	; 0x8ae <vPortYield>
     bf6:	08 c0       	rjmp	.+16     	; 0xc08 <xQueueGenericReset+0xa4>
     bf8:	ce 01       	movw	r24, r28
     bfa:	08 96       	adiw	r24, 0x08	; 8
     bfc:	0e 94 68 02 	call	0x4d0	; 0x4d0 <vListInitialise>
     c00:	ce 01       	movw	r24, r28
     c02:	41 96       	adiw	r24, 0x11	; 17
     c04:	0e 94 68 02 	call	0x4d0	; 0x4d0 <vListInitialise>
     c08:	0f 90       	pop	r0
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	05 c0       	rjmp	.+10     	; 0xc1a <xQueueGenericReset+0xb6>
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	03 c0       	rjmp	.+6      	; 0xc1a <xQueueGenericReset+0xb6>
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	01 c0       	rjmp	.+2      	; 0xc1a <xQueueGenericReset+0xb6>
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	df 91       	pop	r29
     c1c:	cf 91       	pop	r28
     c1e:	1f 91       	pop	r17
     c20:	0f 91       	pop	r16
     c22:	08 95       	ret

00000c24 <prvInitialiseNewQueue>:
     c24:	0f 93       	push	r16
     c26:	1f 93       	push	r17
     c28:	f8 01       	movw	r30, r16
     c2a:	61 11       	cpse	r22, r1
     c2c:	03 c0       	rjmp	.+6      	; 0xc34 <prvInitialiseNewQueue+0x10>
     c2e:	11 83       	std	Z+1, r17	; 0x01
     c30:	00 83       	st	Z, r16
     c32:	02 c0       	rjmp	.+4      	; 0xc38 <prvInitialiseNewQueue+0x14>
     c34:	51 83       	std	Z+1, r21	; 0x01
     c36:	40 83       	st	Z, r20
     c38:	83 8f       	std	Z+27, r24	; 0x1b
     c3a:	64 8f       	std	Z+28, r22	; 0x1c
     c3c:	61 e0       	ldi	r22, 0x01	; 1
     c3e:	cf 01       	movw	r24, r30
     c40:	0e 94 b2 05 	call	0xb64	; 0xb64 <xQueueGenericReset>
     c44:	1f 91       	pop	r17
     c46:	0f 91       	pop	r16
     c48:	08 95       	ret

00000c4a <xQueueGenericCreate>:
     c4a:	df 92       	push	r13
     c4c:	ef 92       	push	r14
     c4e:	ff 92       	push	r15
     c50:	0f 93       	push	r16
     c52:	1f 93       	push	r17
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
     c58:	38 2f       	mov	r19, r24
     c5a:	e6 2f       	mov	r30, r22
     c5c:	88 23       	and	r24, r24
     c5e:	29 f1       	breq	.+74     	; 0xcaa <xQueueGenericCreate+0x60>
     c60:	68 2f       	mov	r22, r24
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	8f ef       	ldi	r24, 0xFF	; 255
     c66:	9f ef       	ldi	r25, 0xFF	; 255
     c68:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <__udivmodhi4>
     c6c:	8e 2f       	mov	r24, r30
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	68 17       	cp	r22, r24
     c72:	79 07       	cpc	r23, r25
     c74:	e8 f0       	brcs	.+58     	; 0xcb0 <xQueueGenericCreate+0x66>
     c76:	3e 9f       	mul	r19, r30
     c78:	c0 01       	movw	r24, r0
     c7a:	11 24       	eor	r1, r1
     c7c:	81 3e       	cpi	r24, 0xE1	; 225
     c7e:	2f ef       	ldi	r18, 0xFF	; 255
     c80:	92 07       	cpc	r25, r18
     c82:	c8 f4       	brcc	.+50     	; 0xcb6 <xQueueGenericCreate+0x6c>
     c84:	d4 2e       	mov	r13, r20
     c86:	de 2f       	mov	r29, r30
     c88:	c3 2f       	mov	r28, r19
     c8a:	4f 96       	adiw	r24, 0x1f	; 31
     c8c:	0e 94 88 01 	call	0x310	; 0x310 <pvPortMalloc>
     c90:	7c 01       	movw	r14, r24
     c92:	00 97       	sbiw	r24, 0x00	; 0
     c94:	91 f0       	breq	.+36     	; 0xcba <xQueueGenericCreate+0x70>
     c96:	8c 01       	movw	r16, r24
     c98:	2d 2d       	mov	r18, r13
     c9a:	ac 01       	movw	r20, r24
     c9c:	41 5e       	subi	r20, 0xE1	; 225
     c9e:	5f 4f       	sbci	r21, 0xFF	; 255
     ca0:	6d 2f       	mov	r22, r29
     ca2:	8c 2f       	mov	r24, r28
     ca4:	0e 94 12 06 	call	0xc24	; 0xc24 <prvInitialiseNewQueue>
     ca8:	08 c0       	rjmp	.+16     	; 0xcba <xQueueGenericCreate+0x70>
     caa:	e1 2c       	mov	r14, r1
     cac:	f1 2c       	mov	r15, r1
     cae:	05 c0       	rjmp	.+10     	; 0xcba <xQueueGenericCreate+0x70>
     cb0:	e1 2c       	mov	r14, r1
     cb2:	f1 2c       	mov	r15, r1
     cb4:	02 c0       	rjmp	.+4      	; 0xcba <xQueueGenericCreate+0x70>
     cb6:	e1 2c       	mov	r14, r1
     cb8:	f1 2c       	mov	r15, r1
     cba:	c7 01       	movw	r24, r14
     cbc:	df 91       	pop	r29
     cbe:	cf 91       	pop	r28
     cc0:	1f 91       	pop	r17
     cc2:	0f 91       	pop	r16
     cc4:	ff 90       	pop	r15
     cc6:	ef 90       	pop	r14
     cc8:	df 90       	pop	r13
     cca:	08 95       	ret

00000ccc <xQueueGenericSend>:
     ccc:	cf 92       	push	r12
     cce:	df 92       	push	r13
     cd0:	ef 92       	push	r14
     cd2:	ff 92       	push	r15
     cd4:	0f 93       	push	r16
     cd6:	1f 93       	push	r17
     cd8:	cf 93       	push	r28
     cda:	df 93       	push	r29
     cdc:	00 d0       	rcall	.+0      	; 0xcde <xQueueGenericSend+0x12>
     cde:	00 d0       	rcall	.+0      	; 0xce0 <xQueueGenericSend+0x14>
     ce0:	1f 92       	push	r1
     ce2:	cd b7       	in	r28, 0x3d	; 61
     ce4:	de b7       	in	r29, 0x3e	; 62
     ce6:	8c 01       	movw	r16, r24
     ce8:	7b 01       	movw	r14, r22
     cea:	5d 83       	std	Y+5, r21	; 0x05
     cec:	4c 83       	std	Y+4, r20	; 0x04
     cee:	c2 2e       	mov	r12, r18
     cf0:	d1 2c       	mov	r13, r1
     cf2:	0f b6       	in	r0, 0x3f	; 63
     cf4:	f8 94       	cli
     cf6:	0f 92       	push	r0
     cf8:	f8 01       	movw	r30, r16
     cfa:	92 8d       	ldd	r25, Z+26	; 0x1a
     cfc:	83 8d       	ldd	r24, Z+27	; 0x1b
     cfe:	98 17       	cp	r25, r24
     d00:	18 f0       	brcs	.+6      	; 0xd08 <xQueueGenericSend+0x3c>
     d02:	f2 e0       	ldi	r31, 0x02	; 2
     d04:	cf 12       	cpse	r12, r31
     d06:	19 c0       	rjmp	.+50     	; 0xd3a <xQueueGenericSend+0x6e>
     d08:	4c 2d       	mov	r20, r12
     d0a:	b7 01       	movw	r22, r14
     d0c:	c8 01       	movw	r24, r16
     d0e:	0e 94 35 05 	call	0xa6a	; 0xa6a <prvCopyDataToQueue>
     d12:	f8 01       	movw	r30, r16
     d14:	91 89       	ldd	r25, Z+17	; 0x11
     d16:	99 23       	and	r25, r25
     d18:	49 f0       	breq	.+18     	; 0xd2c <xQueueGenericSend+0x60>
     d1a:	c8 01       	movw	r24, r16
     d1c:	41 96       	adiw	r24, 0x11	; 17
     d1e:	0e 94 26 0c 	call	0x184c	; 0x184c <xTaskRemoveFromEventList>
     d22:	88 23       	and	r24, r24
     d24:	31 f0       	breq	.+12     	; 0xd32 <xQueueGenericSend+0x66>
     d26:	0e 94 57 04 	call	0x8ae	; 0x8ae <vPortYield>
     d2a:	03 c0       	rjmp	.+6      	; 0xd32 <xQueueGenericSend+0x66>
     d2c:	81 11       	cpse	r24, r1
     d2e:	0e 94 57 04 	call	0x8ae	; 0x8ae <vPortYield>
     d32:	0f 90       	pop	r0
     d34:	0f be       	out	0x3f, r0	; 63
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	4d c0       	rjmp	.+154    	; 0xdd4 <xQueueGenericSend+0x108>
     d3a:	8c 81       	ldd	r24, Y+4	; 0x04
     d3c:	9d 81       	ldd	r25, Y+5	; 0x05
     d3e:	89 2b       	or	r24, r25
     d40:	21 f4       	brne	.+8      	; 0xd4a <xQueueGenericSend+0x7e>
     d42:	0f 90       	pop	r0
     d44:	0f be       	out	0x3f, r0	; 63
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	45 c0       	rjmp	.+138    	; 0xdd4 <xQueueGenericSend+0x108>
     d4a:	d1 10       	cpse	r13, r1
     d4c:	06 c0       	rjmp	.+12     	; 0xd5a <xQueueGenericSend+0x8e>
     d4e:	ce 01       	movw	r24, r28
     d50:	01 96       	adiw	r24, 0x01	; 1
     d52:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <vTaskInternalSetTimeOutState>
     d56:	dd 24       	eor	r13, r13
     d58:	d3 94       	inc	r13
     d5a:	0f 90       	pop	r0
     d5c:	0f be       	out	0x3f, r0	; 63
     d5e:	0e 94 b5 09 	call	0x136a	; 0x136a <vTaskSuspendAll>
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	0f 92       	push	r0
     d68:	f8 01       	movw	r30, r16
     d6a:	85 8d       	ldd	r24, Z+29	; 0x1d
     d6c:	8f 3f       	cpi	r24, 0xFF	; 255
     d6e:	09 f4       	brne	.+2      	; 0xd72 <xQueueGenericSend+0xa6>
     d70:	15 8e       	std	Z+29, r1	; 0x1d
     d72:	f8 01       	movw	r30, r16
     d74:	86 8d       	ldd	r24, Z+30	; 0x1e
     d76:	8f 3f       	cpi	r24, 0xFF	; 255
     d78:	09 f4       	brne	.+2      	; 0xd7c <xQueueGenericSend+0xb0>
     d7a:	16 8e       	std	Z+30, r1	; 0x1e
     d7c:	0f 90       	pop	r0
     d7e:	0f be       	out	0x3f, r0	; 63
     d80:	be 01       	movw	r22, r28
     d82:	6c 5f       	subi	r22, 0xFC	; 252
     d84:	7f 4f       	sbci	r23, 0xFF	; 255
     d86:	ce 01       	movw	r24, r28
     d88:	01 96       	adiw	r24, 0x01	; 1
     d8a:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <xTaskCheckForTimeOut>
     d8e:	81 11       	cpse	r24, r1
     d90:	1b c0       	rjmp	.+54     	; 0xdc8 <xQueueGenericSend+0xfc>
     d92:	c8 01       	movw	r24, r16
     d94:	0e 94 27 05 	call	0xa4e	; 0xa4e <prvIsQueueFull>
     d98:	88 23       	and	r24, r24
     d9a:	81 f0       	breq	.+32     	; 0xdbc <xQueueGenericSend+0xf0>
     d9c:	6c 81       	ldd	r22, Y+4	; 0x04
     d9e:	7d 81       	ldd	r23, Y+5	; 0x05
     da0:	c8 01       	movw	r24, r16
     da2:	08 96       	adiw	r24, 0x08	; 8
     da4:	0e 94 14 0c 	call	0x1828	; 0x1828 <vTaskPlaceOnEventList>
     da8:	c8 01       	movw	r24, r16
     daa:	0e 94 7e 05 	call	0xafc	; 0xafc <prvUnlockQueue>
     dae:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <xTaskResumeAll>
     db2:	81 11       	cpse	r24, r1
     db4:	9e cf       	rjmp	.-196    	; 0xcf2 <xQueueGenericSend+0x26>
     db6:	0e 94 57 04 	call	0x8ae	; 0x8ae <vPortYield>
     dba:	9b cf       	rjmp	.-202    	; 0xcf2 <xQueueGenericSend+0x26>
     dbc:	c8 01       	movw	r24, r16
     dbe:	0e 94 7e 05 	call	0xafc	; 0xafc <prvUnlockQueue>
     dc2:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <xTaskResumeAll>
     dc6:	95 cf       	rjmp	.-214    	; 0xcf2 <xQueueGenericSend+0x26>
     dc8:	c8 01       	movw	r24, r16
     dca:	0e 94 7e 05 	call	0xafc	; 0xafc <prvUnlockQueue>
     dce:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <xTaskResumeAll>
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	0f 90       	pop	r0
     dd6:	0f 90       	pop	r0
     dd8:	0f 90       	pop	r0
     dda:	0f 90       	pop	r0
     ddc:	0f 90       	pop	r0
     dde:	df 91       	pop	r29
     de0:	cf 91       	pop	r28
     de2:	1f 91       	pop	r17
     de4:	0f 91       	pop	r16
     de6:	ff 90       	pop	r15
     de8:	ef 90       	pop	r14
     dea:	df 90       	pop	r13
     dec:	cf 90       	pop	r12
     dee:	08 95       	ret

00000df0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
     df0:	ff 92       	push	r15
     df2:	0f 93       	push	r16
     df4:	1f 93       	push	r17
     df6:	cf 93       	push	r28
     df8:	df 93       	push	r29
     dfa:	00 d0       	rcall	.+0      	; 0xdfc <xQueueSemaphoreTake+0xc>
     dfc:	00 d0       	rcall	.+0      	; 0xdfe <xQueueSemaphoreTake+0xe>
     dfe:	1f 92       	push	r1
     e00:	cd b7       	in	r28, 0x3d	; 61
     e02:	de b7       	in	r29, 0x3e	; 62
     e04:	8c 01       	movw	r16, r24
     e06:	7d 83       	std	Y+5, r23	; 0x05
     e08:	6c 83       	std	Y+4, r22	; 0x04
    BaseType_t xEntryTimeSet = pdFALSE;
     e0a:	f1 2c       	mov	r15, r1
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
     e0c:	0f b6       	in	r0, 0x3f	; 63
     e0e:	f8 94       	cli
     e10:	0f 92       	push	r0
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
     e12:	f8 01       	movw	r30, r16
     e14:	82 8d       	ldd	r24, Z+26	; 0x1a

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
     e16:	88 23       	and	r24, r24
     e18:	81 f0       	breq	.+32     	; 0xe3a <xQueueSemaphoreTake+0x4a>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
     e1a:	81 50       	subi	r24, 0x01	; 1
     e1c:	82 8f       	std	Z+26, r24	; 0x1a
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     e1e:	80 85       	ldd	r24, Z+8	; 0x08
     e20:	88 23       	and	r24, r24
     e22:	39 f0       	breq	.+14     	; 0xe32 <xQueueSemaphoreTake+0x42>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     e24:	c8 01       	movw	r24, r16
     e26:	08 96       	adiw	r24, 0x08	; 8
     e28:	0e 94 26 0c 	call	0x184c	; 0x184c <xTaskRemoveFromEventList>
     e2c:	81 11       	cpse	r24, r1
                    {
                        queueYIELD_IF_USING_PREEMPTION();
     e2e:	0e 94 57 04 	call	0x8ae	; 0x8ae <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
     e32:	0f 90       	pop	r0
     e34:	0f be       	out	0x3f, r0	; 63
                return pdPASS;
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	53 c0       	rjmp	.+166    	; 0xee0 <xQueueSemaphoreTake+0xf0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
     e3a:	8c 81       	ldd	r24, Y+4	; 0x04
     e3c:	9d 81       	ldd	r25, Y+5	; 0x05
     e3e:	89 2b       	or	r24, r25
     e40:	21 f4       	brne	.+8      	; 0xe4a <xQueueSemaphoreTake+0x5a>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
     e42:	0f 90       	pop	r0
     e44:	0f be       	out	0x3f, r0	; 63
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	4b c0       	rjmp	.+150    	; 0xee0 <xQueueSemaphoreTake+0xf0>
                }
                else if( xEntryTimeSet == pdFALSE )
     e4a:	f1 10       	cpse	r15, r1
     e4c:	06 c0       	rjmp	.+12     	; 0xe5a <xQueueSemaphoreTake+0x6a>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
     e4e:	ce 01       	movw	r24, r28
     e50:	01 96       	adiw	r24, 0x01	; 1
     e52:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
     e56:	ff 24       	eor	r15, r15
     e58:	f3 94       	inc	r15
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
     e5a:	0f 90       	pop	r0
     e5c:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
     e5e:	0e 94 b5 09 	call	0x136a	; 0x136a <vTaskSuspendAll>
        prvLockQueue( pxQueue );
     e62:	0f b6       	in	r0, 0x3f	; 63
     e64:	f8 94       	cli
     e66:	0f 92       	push	r0
     e68:	f8 01       	movw	r30, r16
     e6a:	85 8d       	ldd	r24, Z+29	; 0x1d
     e6c:	8f 3f       	cpi	r24, 0xFF	; 255
     e6e:	09 f4       	brne	.+2      	; 0xe72 <xQueueSemaphoreTake+0x82>
     e70:	15 8e       	std	Z+29, r1	; 0x1d
     e72:	f8 01       	movw	r30, r16
     e74:	86 8d       	ldd	r24, Z+30	; 0x1e
     e76:	8f 3f       	cpi	r24, 0xFF	; 255
     e78:	09 f4       	brne	.+2      	; 0xe7c <xQueueSemaphoreTake+0x8c>
     e7a:	16 8e       	std	Z+30, r1	; 0x1e
     e7c:	0f 90       	pop	r0
     e7e:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     e80:	be 01       	movw	r22, r28
     e82:	6c 5f       	subi	r22, 0xFC	; 252
     e84:	7f 4f       	sbci	r23, 0xFF	; 255
     e86:	ce 01       	movw	r24, r28
     e88:	01 96       	adiw	r24, 0x01	; 1
     e8a:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <xTaskCheckForTimeOut>
     e8e:	81 11       	cpse	r24, r1
     e90:	1b c0       	rjmp	.+54     	; 0xec8 <xQueueSemaphoreTake+0xd8>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     e92:	c8 01       	movw	r24, r16
     e94:	0e 94 1a 05 	call	0xa34	; 0xa34 <prvIsQueueEmpty>
     e98:	88 23       	and	r24, r24
     e9a:	81 f0       	breq	.+32     	; 0xebc <xQueueSemaphoreTake+0xcc>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     e9c:	6c 81       	ldd	r22, Y+4	; 0x04
     e9e:	7d 81       	ldd	r23, Y+5	; 0x05
     ea0:	c8 01       	movw	r24, r16
     ea2:	41 96       	adiw	r24, 0x11	; 17
     ea4:	0e 94 14 0c 	call	0x1828	; 0x1828 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
     ea8:	c8 01       	movw	r24, r16
     eaa:	0e 94 7e 05 	call	0xafc	; 0xafc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
     eae:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <xTaskResumeAll>
     eb2:	81 11       	cpse	r24, r1
     eb4:	ab cf       	rjmp	.-170    	; 0xe0c <xQueueSemaphoreTake+0x1c>
                {
                    portYIELD_WITHIN_API();
     eb6:	0e 94 57 04 	call	0x8ae	; 0x8ae <vPortYield>
     eba:	a8 cf       	rjmp	.-176    	; 0xe0c <xQueueSemaphoreTake+0x1c>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
     ebc:	c8 01       	movw	r24, r16
     ebe:	0e 94 7e 05 	call	0xafc	; 0xafc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
     ec2:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <xTaskResumeAll>
     ec6:	a2 cf       	rjmp	.-188    	; 0xe0c <xQueueSemaphoreTake+0x1c>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
     ec8:	c8 01       	movw	r24, r16
     eca:	0e 94 7e 05 	call	0xafc	; 0xafc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
     ece:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     ed2:	c8 01       	movw	r24, r16
     ed4:	0e 94 1a 05 	call	0xa34	; 0xa34 <prvIsQueueEmpty>
     ed8:	88 23       	and	r24, r24
     eda:	09 f4       	brne	.+2      	; 0xede <xQueueSemaphoreTake+0xee>
     edc:	97 cf       	rjmp	.-210    	; 0xe0c <xQueueSemaphoreTake+0x1c>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
     ede:	80 e0       	ldi	r24, 0x00	; 0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
     ee0:	0f 90       	pop	r0
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	df 91       	pop	r29
     eec:	cf 91       	pop	r28
     eee:	1f 91       	pop	r17
     ef0:	0f 91       	pop	r16
     ef2:	ff 90       	pop	r15
     ef4:	08 95       	ret

00000ef6 <prvResetNextTaskUnblockTime>:
    taskENTER_CRITICAL();
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
        pxTimeOut->xTimeOnEntering = xTickCount;
    }
    taskEXIT_CRITICAL();
     ef6:	e0 91 d3 06 	lds	r30, 0x06D3	; 0x8006d3 <pxDelayedTaskList>
     efa:	f0 91 d4 06 	lds	r31, 0x06D4	; 0x8006d4 <pxDelayedTaskList+0x1>
     efe:	80 81       	ld	r24, Z
     f00:	81 11       	cpse	r24, r1
     f02:	07 c0       	rjmp	.+14     	; 0xf12 <prvResetNextTaskUnblockTime+0x1c>
     f04:	8f ef       	ldi	r24, 0xFF	; 255
     f06:	9f ef       	ldi	r25, 0xFF	; 255
     f08:	90 93 b3 06 	sts	0x06B3, r25	; 0x8006b3 <xNextTaskUnblockTime+0x1>
     f0c:	80 93 b2 06 	sts	0x06B2, r24	; 0x8006b2 <xNextTaskUnblockTime>
     f10:	08 95       	ret
     f12:	e0 91 d3 06 	lds	r30, 0x06D3	; 0x8006d3 <pxDelayedTaskList>
     f16:	f0 91 d4 06 	lds	r31, 0x06D4	; 0x8006d4 <pxDelayedTaskList+0x1>
     f1a:	05 80       	ldd	r0, Z+5	; 0x05
     f1c:	f6 81       	ldd	r31, Z+6	; 0x06
     f1e:	e0 2d       	mov	r30, r0
     f20:	80 81       	ld	r24, Z
     f22:	91 81       	ldd	r25, Z+1	; 0x01
     f24:	90 93 b3 06 	sts	0x06B3, r25	; 0x8006b3 <xNextTaskUnblockTime+0x1>
     f28:	80 93 b2 06 	sts	0x06B2, r24	; 0x8006b2 <xNextTaskUnblockTime>
     f2c:	08 95       	ret

00000f2e <prvDeleteTCB>:
     f2e:	cf 93       	push	r28
     f30:	df 93       	push	r29
     f32:	ec 01       	movw	r28, r24
     f34:	8f 89       	ldd	r24, Y+23	; 0x17
     f36:	98 8d       	ldd	r25, Y+24	; 0x18
     f38:	0e 94 22 02 	call	0x444	; 0x444 <vPortFree>
     f3c:	ce 01       	movw	r24, r28
     f3e:	0e 94 22 02 	call	0x444	; 0x444 <vPortFree>
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	08 95       	ret

00000f48 <prvInitialiseNewTask>:
     f48:	6f 92       	push	r6
     f4a:	7f 92       	push	r7
     f4c:	8f 92       	push	r8
     f4e:	9f 92       	push	r9
     f50:	af 92       	push	r10
     f52:	bf 92       	push	r11
     f54:	cf 92       	push	r12
     f56:	df 92       	push	r13
     f58:	ef 92       	push	r14
     f5a:	0f 93       	push	r16
     f5c:	1f 93       	push	r17
     f5e:	cf 93       	push	r28
     f60:	df 93       	push	r29
     f62:	cd b7       	in	r28, 0x3d	; 61
     f64:	de b7       	in	r29, 0x3e	; 62
     f66:	4c 01       	movw	r8, r24
     f68:	f5 01       	movw	r30, r10
     f6a:	87 89       	ldd	r24, Z+23	; 0x17
     f6c:	90 8d       	ldd	r25, Z+24	; 0x18
     f6e:	21 50       	subi	r18, 0x01	; 1
     f70:	31 09       	sbc	r19, r1
     f72:	3c 01       	movw	r6, r24
     f74:	62 0e       	add	r6, r18
     f76:	73 1e       	adc	r7, r19
     f78:	61 15       	cp	r22, r1
     f7a:	71 05       	cpc	r23, r1
     f7c:	89 f4       	brne	.+34     	; 0xfa0 <prvInitialiseNewTask+0x58>
     f7e:	15 c0       	rjmp	.+42     	; 0xfaa <prvInitialiseNewTask+0x62>
     f80:	82 2f       	mov	r24, r18
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	fb 01       	movw	r30, r22
     f86:	e8 0f       	add	r30, r24
     f88:	f9 1f       	adc	r31, r25
     f8a:	30 81       	ld	r19, Z
     f8c:	d5 01       	movw	r26, r10
     f8e:	a8 0f       	add	r26, r24
     f90:	b9 1f       	adc	r27, r25
     f92:	59 96       	adiw	r26, 0x19	; 25
     f94:	3c 93       	st	X, r19
     f96:	80 81       	ld	r24, Z
     f98:	88 23       	and	r24, r24
     f9a:	29 f0       	breq	.+10     	; 0xfa6 <prvInitialiseNewTask+0x5e>
     f9c:	2f 5f       	subi	r18, 0xFF	; 255
     f9e:	01 c0       	rjmp	.+2      	; 0xfa2 <prvInitialiseNewTask+0x5a>
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	28 30       	cpi	r18, 0x08	; 8
     fa4:	68 f3       	brcs	.-38     	; 0xf80 <prvInitialiseNewTask+0x38>
     fa6:	f5 01       	movw	r30, r10
     fa8:	10 a2       	std	Z+32, r1	; 0x20
     faa:	f3 e0       	ldi	r31, 0x03	; 3
     fac:	fe 15       	cp	r31, r14
     fae:	20 f4       	brcc	.+8      	; 0xfb8 <prvInitialiseNewTask+0x70>
     fb0:	0f 2e       	mov	r0, r31
     fb2:	f3 e0       	ldi	r31, 0x03	; 3
     fb4:	ef 2e       	mov	r14, r31
     fb6:	f0 2d       	mov	r31, r0
     fb8:	f5 01       	movw	r30, r10
     fba:	e6 8a       	std	Z+22, r14	; 0x16
     fbc:	c5 01       	movw	r24, r10
     fbe:	02 96       	adiw	r24, 0x02	; 2
     fc0:	0e 94 76 02 	call	0x4ec	; 0x4ec <vListInitialiseItem>
     fc4:	c5 01       	movw	r24, r10
     fc6:	0c 96       	adiw	r24, 0x0c	; 12
     fc8:	0e 94 76 02 	call	0x4ec	; 0x4ec <vListInitialiseItem>
     fcc:	f5 01       	movw	r30, r10
     fce:	b1 86       	std	Z+9, r11	; 0x09
     fd0:	a0 86       	std	Z+8, r10	; 0x08
     fd2:	84 e0       	ldi	r24, 0x04	; 4
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	8e 19       	sub	r24, r14
     fd8:	91 09       	sbc	r25, r1
     fda:	95 87       	std	Z+13, r25	; 0x0d
     fdc:	84 87       	std	Z+12, r24	; 0x0c
     fde:	b3 8a       	std	Z+19, r11	; 0x13
     fe0:	a2 8a       	std	Z+18, r10	; 0x12
     fe2:	a8 01       	movw	r20, r16
     fe4:	b4 01       	movw	r22, r8
     fe6:	c3 01       	movw	r24, r6
     fe8:	0e 94 bc 03 	call	0x778	; 0x778 <pxPortInitialiseStack>
     fec:	f5 01       	movw	r30, r10
     fee:	91 83       	std	Z+1, r25	; 0x01
     ff0:	80 83       	st	Z, r24
     ff2:	c1 14       	cp	r12, r1
     ff4:	d1 04       	cpc	r13, r1
     ff6:	19 f0       	breq	.+6      	; 0xffe <prvInitialiseNewTask+0xb6>
     ff8:	f6 01       	movw	r30, r12
     ffa:	b1 82       	std	Z+1, r11	; 0x01
     ffc:	a0 82       	st	Z, r10
     ffe:	df 91       	pop	r29
    1000:	cf 91       	pop	r28
    1002:	1f 91       	pop	r17
    1004:	0f 91       	pop	r16
    1006:	ef 90       	pop	r14
    1008:	df 90       	pop	r13
    100a:	cf 90       	pop	r12
    100c:	bf 90       	pop	r11
    100e:	af 90       	pop	r10
    1010:	9f 90       	pop	r9
    1012:	8f 90       	pop	r8
    1014:	7f 90       	pop	r7
    1016:	6f 90       	pop	r6
    1018:	08 95       	ret

0000101a <prvInitialiseTaskLists>:
    101a:	cf 93       	push	r28
    101c:	c0 e0       	ldi	r28, 0x00	; 0
    101e:	10 c0       	rjmp	.+32     	; 0x1040 <prvInitialiseTaskLists+0x26>
    1020:	8c 2f       	mov	r24, r28
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	9c 01       	movw	r18, r24
    1026:	22 0f       	add	r18, r18
    1028:	33 1f       	adc	r19, r19
    102a:	22 0f       	add	r18, r18
    102c:	33 1f       	adc	r19, r19
    102e:	22 0f       	add	r18, r18
    1030:	33 1f       	adc	r19, r19
    1032:	82 0f       	add	r24, r18
    1034:	93 1f       	adc	r25, r19
    1036:	89 51       	subi	r24, 0x19	; 25
    1038:	99 4f       	sbci	r25, 0xF9	; 249
    103a:	0e 94 68 02 	call	0x4d0	; 0x4d0 <vListInitialise>
    103e:	cf 5f       	subi	r28, 0xFF	; 255
    1040:	c4 30       	cpi	r28, 0x04	; 4
    1042:	70 f3       	brcs	.-36     	; 0x1020 <prvInitialiseTaskLists+0x6>
    1044:	8e ed       	ldi	r24, 0xDE	; 222
    1046:	96 e0       	ldi	r25, 0x06	; 6
    1048:	0e 94 68 02 	call	0x4d0	; 0x4d0 <vListInitialise>
    104c:	85 ed       	ldi	r24, 0xD5	; 213
    104e:	96 e0       	ldi	r25, 0x06	; 6
    1050:	0e 94 68 02 	call	0x4d0	; 0x4d0 <vListInitialise>
    1054:	88 ec       	ldi	r24, 0xC8	; 200
    1056:	96 e0       	ldi	r25, 0x06	; 6
    1058:	0e 94 68 02 	call	0x4d0	; 0x4d0 <vListInitialise>
    105c:	8f eb       	ldi	r24, 0xBF	; 191
    105e:	96 e0       	ldi	r25, 0x06	; 6
    1060:	0e 94 68 02 	call	0x4d0	; 0x4d0 <vListInitialise>
    1064:	8e ed       	ldi	r24, 0xDE	; 222
    1066:	96 e0       	ldi	r25, 0x06	; 6
    1068:	90 93 d4 06 	sts	0x06D4, r25	; 0x8006d4 <pxDelayedTaskList+0x1>
    106c:	80 93 d3 06 	sts	0x06D3, r24	; 0x8006d3 <pxDelayedTaskList>
    1070:	85 ed       	ldi	r24, 0xD5	; 213
    1072:	96 e0       	ldi	r25, 0x06	; 6
    1074:	90 93 d2 06 	sts	0x06D2, r25	; 0x8006d2 <pxOverflowDelayedTaskList+0x1>
    1078:	80 93 d1 06 	sts	0x06D1, r24	; 0x8006d1 <pxOverflowDelayedTaskList>
    107c:	cf 91       	pop	r28
    107e:	08 95       	ret

00001080 <prvAddNewTaskToReadyList>:
    1080:	cf 93       	push	r28
    1082:	df 93       	push	r29
    1084:	ec 01       	movw	r28, r24
    1086:	0f b6       	in	r0, 0x3f	; 63
    1088:	f8 94       	cli
    108a:	0f 92       	push	r0
    108c:	80 91 bd 06 	lds	r24, 0x06BD	; 0x8006bd <uxCurrentNumberOfTasks>
    1090:	8f 5f       	subi	r24, 0xFF	; 255
    1092:	80 93 bd 06 	sts	0x06BD, r24	; 0x8006bd <uxCurrentNumberOfTasks>
    1096:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <pxCurrentTCB>
    109a:	90 91 0c 07 	lds	r25, 0x070C	; 0x80070c <pxCurrentTCB+0x1>
    109e:	89 2b       	or	r24, r25
    10a0:	59 f4       	brne	.+22     	; 0x10b8 <prvAddNewTaskToReadyList+0x38>
    10a2:	d0 93 0c 07 	sts	0x070C, r29	; 0x80070c <pxCurrentTCB+0x1>
    10a6:	c0 93 0b 07 	sts	0x070B, r28	; 0x80070b <pxCurrentTCB>
    10aa:	80 91 bd 06 	lds	r24, 0x06BD	; 0x8006bd <uxCurrentNumberOfTasks>
    10ae:	81 30       	cpi	r24, 0x01	; 1
    10b0:	99 f4       	brne	.+38     	; 0x10d8 <prvAddNewTaskToReadyList+0x58>
    10b2:	0e 94 0d 08 	call	0x101a	; 0x101a <prvInitialiseTaskLists>
    10b6:	10 c0       	rjmp	.+32     	; 0x10d8 <prvAddNewTaskToReadyList+0x58>
    10b8:	80 91 b9 06 	lds	r24, 0x06B9	; 0x8006b9 <xSchedulerRunning>
    10bc:	81 11       	cpse	r24, r1
    10be:	0c c0       	rjmp	.+24     	; 0x10d8 <prvAddNewTaskToReadyList+0x58>
    10c0:	e0 91 0b 07 	lds	r30, 0x070B	; 0x80070b <pxCurrentTCB>
    10c4:	f0 91 0c 07 	lds	r31, 0x070C	; 0x80070c <pxCurrentTCB+0x1>
    10c8:	96 89       	ldd	r25, Z+22	; 0x16
    10ca:	8e 89       	ldd	r24, Y+22	; 0x16
    10cc:	89 17       	cp	r24, r25
    10ce:	20 f0       	brcs	.+8      	; 0x10d8 <prvAddNewTaskToReadyList+0x58>
    10d0:	d0 93 0c 07 	sts	0x070C, r29	; 0x80070c <pxCurrentTCB+0x1>
    10d4:	c0 93 0b 07 	sts	0x070B, r28	; 0x80070b <pxCurrentTCB>
    10d8:	80 91 b4 06 	lds	r24, 0x06B4	; 0x8006b4 <uxTaskNumber>
    10dc:	8f 5f       	subi	r24, 0xFF	; 255
    10de:	80 93 b4 06 	sts	0x06B4, r24	; 0x8006b4 <uxTaskNumber>
    10e2:	8e 89       	ldd	r24, Y+22	; 0x16
    10e4:	90 91 ba 06 	lds	r25, 0x06BA	; 0x8006ba <uxTopReadyPriority>
    10e8:	98 17       	cp	r25, r24
    10ea:	10 f4       	brcc	.+4      	; 0x10f0 <prvAddNewTaskToReadyList+0x70>
    10ec:	80 93 ba 06 	sts	0x06BA, r24	; 0x8006ba <uxTopReadyPriority>
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	fc 01       	movw	r30, r24
    10f4:	ee 0f       	add	r30, r30
    10f6:	ff 1f       	adc	r31, r31
    10f8:	ee 0f       	add	r30, r30
    10fa:	ff 1f       	adc	r31, r31
    10fc:	ee 0f       	add	r30, r30
    10fe:	ff 1f       	adc	r31, r31
    1100:	8e 0f       	add	r24, r30
    1102:	9f 1f       	adc	r25, r31
    1104:	fc 01       	movw	r30, r24
    1106:	e9 51       	subi	r30, 0x19	; 25
    1108:	f9 4f       	sbci	r31, 0xF9	; 249
    110a:	01 80       	ldd	r0, Z+1	; 0x01
    110c:	f2 81       	ldd	r31, Z+2	; 0x02
    110e:	e0 2d       	mov	r30, r0
    1110:	fd 83       	std	Y+5, r31	; 0x05
    1112:	ec 83       	std	Y+4, r30	; 0x04
    1114:	84 81       	ldd	r24, Z+4	; 0x04
    1116:	95 81       	ldd	r25, Z+5	; 0x05
    1118:	9f 83       	std	Y+7, r25	; 0x07
    111a:	8e 83       	std	Y+6, r24	; 0x06
    111c:	a4 81       	ldd	r26, Z+4	; 0x04
    111e:	b5 81       	ldd	r27, Z+5	; 0x05
    1120:	ce 01       	movw	r24, r28
    1122:	02 96       	adiw	r24, 0x02	; 2
    1124:	13 96       	adiw	r26, 0x03	; 3
    1126:	9c 93       	st	X, r25
    1128:	8e 93       	st	-X, r24
    112a:	12 97       	sbiw	r26, 0x02	; 2
    112c:	95 83       	std	Z+5, r25	; 0x05
    112e:	84 83       	std	Z+4, r24	; 0x04
    1130:	ee 89       	ldd	r30, Y+22	; 0x16
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	cf 01       	movw	r24, r30
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	88 0f       	add	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	88 0f       	add	r24, r24
    1140:	99 1f       	adc	r25, r25
    1142:	e8 0f       	add	r30, r24
    1144:	f9 1f       	adc	r31, r25
    1146:	e9 51       	subi	r30, 0x19	; 25
    1148:	f9 4f       	sbci	r31, 0xF9	; 249
    114a:	fb 87       	std	Y+11, r31	; 0x0b
    114c:	ea 87       	std	Y+10, r30	; 0x0a
    114e:	80 81       	ld	r24, Z
    1150:	8f 5f       	subi	r24, 0xFF	; 255
    1152:	80 83       	st	Z, r24
    1154:	0f 90       	pop	r0
    1156:	0f be       	out	0x3f, r0	; 63
    1158:	80 91 b9 06 	lds	r24, 0x06B9	; 0x8006b9 <xSchedulerRunning>
    115c:	88 23       	and	r24, r24
    115e:	51 f0       	breq	.+20     	; 0x1174 <prvAddNewTaskToReadyList+0xf4>
    1160:	e0 91 0b 07 	lds	r30, 0x070B	; 0x80070b <pxCurrentTCB>
    1164:	f0 91 0c 07 	lds	r31, 0x070C	; 0x80070c <pxCurrentTCB+0x1>
    1168:	96 89       	ldd	r25, Z+22	; 0x16
    116a:	8e 89       	ldd	r24, Y+22	; 0x16
    116c:	98 17       	cp	r25, r24
    116e:	10 f4       	brcc	.+4      	; 0x1174 <prvAddNewTaskToReadyList+0xf4>
    1170:	0e 94 57 04 	call	0x8ae	; 0x8ae <vPortYield>
    1174:	df 91       	pop	r29
    1176:	cf 91       	pop	r28
    1178:	08 95       	ret

0000117a <prvCheckTasksWaitingTermination>:
    117a:	cf 93       	push	r28
    117c:	df 93       	push	r29
    117e:	1c c0       	rjmp	.+56     	; 0x11b8 <prvCheckTasksWaitingTermination+0x3e>
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	f8 94       	cli
    1184:	0f 92       	push	r0
    1186:	e0 91 c4 06 	lds	r30, 0x06C4	; 0x8006c4 <xTasksWaitingTermination+0x5>
    118a:	f0 91 c5 06 	lds	r31, 0x06C5	; 0x8006c5 <xTasksWaitingTermination+0x6>
    118e:	c6 81       	ldd	r28, Z+6	; 0x06
    1190:	d7 81       	ldd	r29, Z+7	; 0x07
    1192:	ce 01       	movw	r24, r28
    1194:	02 96       	adiw	r24, 0x02	; 2
    1196:	0e 94 ab 02 	call	0x556	; 0x556 <uxListRemove>
    119a:	80 91 bd 06 	lds	r24, 0x06BD	; 0x8006bd <uxCurrentNumberOfTasks>
    119e:	81 50       	subi	r24, 0x01	; 1
    11a0:	80 93 bd 06 	sts	0x06BD, r24	; 0x8006bd <uxCurrentNumberOfTasks>
    11a4:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <uxDeletedTasksWaitingCleanUp>
    11a8:	81 50       	subi	r24, 0x01	; 1
    11aa:	80 93 be 06 	sts	0x06BE, r24	; 0x8006be <uxDeletedTasksWaitingCleanUp>
    11ae:	0f 90       	pop	r0
    11b0:	0f be       	out	0x3f, r0	; 63
    11b2:	ce 01       	movw	r24, r28
    11b4:	0e 94 97 07 	call	0xf2e	; 0xf2e <prvDeleteTCB>
    11b8:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <uxDeletedTasksWaitingCleanUp>
    11bc:	81 11       	cpse	r24, r1
    11be:	e0 cf       	rjmp	.-64     	; 0x1180 <prvCheckTasksWaitingTermination+0x6>
    11c0:	df 91       	pop	r29
    11c2:	cf 91       	pop	r28
    11c4:	08 95       	ret

000011c6 <prvIdleTask>:
    11c6:	0e 94 bd 08 	call	0x117a	; 0x117a <prvCheckTasksWaitingTermination>
    11ca:	80 91 e7 06 	lds	r24, 0x06E7	; 0x8006e7 <pxReadyTasksLists>
    11ce:	82 30       	cpi	r24, 0x02	; 2
    11d0:	d0 f3       	brcs	.-12     	; 0x11c6 <prvIdleTask>
    11d2:	0e 94 57 04 	call	0x8ae	; 0x8ae <vPortYield>
    11d6:	f7 cf       	rjmp	.-18     	; 0x11c6 <prvIdleTask>

000011d8 <prvAddCurrentTaskToDelayedList>:
    11d8:	0f 93       	push	r16
    11da:	1f 93       	push	r17
    11dc:	cf 93       	push	r28
    11de:	df 93       	push	r29
    11e0:	ec 01       	movw	r28, r24
    11e2:	00 91 bb 06 	lds	r16, 0x06BB	; 0x8006bb <xTickCount>
    11e6:	10 91 bc 06 	lds	r17, 0x06BC	; 0x8006bc <xTickCount+0x1>
    11ea:	80 91 0b 07 	lds	r24, 0x070B	; 0x80070b <pxCurrentTCB>
    11ee:	90 91 0c 07 	lds	r25, 0x070C	; 0x80070c <pxCurrentTCB+0x1>
    11f2:	02 96       	adiw	r24, 0x02	; 2
    11f4:	0e 94 ab 02 	call	0x556	; 0x556 <uxListRemove>
    11f8:	c0 0f       	add	r28, r16
    11fa:	d1 1f       	adc	r29, r17
    11fc:	e0 91 0b 07 	lds	r30, 0x070B	; 0x80070b <pxCurrentTCB>
    1200:	f0 91 0c 07 	lds	r31, 0x070C	; 0x80070c <pxCurrentTCB+0x1>
    1204:	d3 83       	std	Z+3, r29	; 0x03
    1206:	c2 83       	std	Z+2, r28	; 0x02
    1208:	c0 17       	cp	r28, r16
    120a:	d1 07       	cpc	r29, r17
    120c:	68 f4       	brcc	.+26     	; 0x1228 <prvAddCurrentTaskToDelayedList+0x50>
    120e:	60 91 0b 07 	lds	r22, 0x070B	; 0x80070b <pxCurrentTCB>
    1212:	70 91 0c 07 	lds	r23, 0x070C	; 0x80070c <pxCurrentTCB+0x1>
    1216:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <pxOverflowDelayedTaskList>
    121a:	90 91 d2 06 	lds	r25, 0x06D2	; 0x8006d2 <pxOverflowDelayedTaskList+0x1>
    121e:	6e 5f       	subi	r22, 0xFE	; 254
    1220:	7f 4f       	sbci	r23, 0xFF	; 255
    1222:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <vListInsert>
    1226:	17 c0       	rjmp	.+46     	; 0x1256 <prvAddCurrentTaskToDelayedList+0x7e>
    1228:	60 91 0b 07 	lds	r22, 0x070B	; 0x80070b <pxCurrentTCB>
    122c:	70 91 0c 07 	lds	r23, 0x070C	; 0x80070c <pxCurrentTCB+0x1>
    1230:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <pxDelayedTaskList>
    1234:	90 91 d4 06 	lds	r25, 0x06D4	; 0x8006d4 <pxDelayedTaskList+0x1>
    1238:	6e 5f       	subi	r22, 0xFE	; 254
    123a:	7f 4f       	sbci	r23, 0xFF	; 255
    123c:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <vListInsert>
    1240:	80 91 b2 06 	lds	r24, 0x06B2	; 0x8006b2 <xNextTaskUnblockTime>
    1244:	90 91 b3 06 	lds	r25, 0x06B3	; 0x8006b3 <xNextTaskUnblockTime+0x1>
    1248:	c8 17       	cp	r28, r24
    124a:	d9 07       	cpc	r29, r25
    124c:	20 f4       	brcc	.+8      	; 0x1256 <prvAddCurrentTaskToDelayedList+0x7e>
    124e:	d0 93 b3 06 	sts	0x06B3, r29	; 0x8006b3 <xNextTaskUnblockTime+0x1>
    1252:	c0 93 b2 06 	sts	0x06B2, r28	; 0x8006b2 <xNextTaskUnblockTime>
    1256:	df 91       	pop	r29
    1258:	cf 91       	pop	r28
    125a:	1f 91       	pop	r17
    125c:	0f 91       	pop	r16
    125e:	08 95       	ret

00001260 <xTaskCreate>:
    1260:	2f 92       	push	r2
    1262:	3f 92       	push	r3
    1264:	4f 92       	push	r4
    1266:	5f 92       	push	r5
    1268:	6f 92       	push	r6
    126a:	7f 92       	push	r7
    126c:	8f 92       	push	r8
    126e:	9f 92       	push	r9
    1270:	af 92       	push	r10
    1272:	bf 92       	push	r11
    1274:	cf 92       	push	r12
    1276:	df 92       	push	r13
    1278:	ef 92       	push	r14
    127a:	ff 92       	push	r15
    127c:	0f 93       	push	r16
    127e:	1f 93       	push	r17
    1280:	cf 93       	push	r28
    1282:	df 93       	push	r29
    1284:	3c 01       	movw	r6, r24
    1286:	1b 01       	movw	r2, r22
    1288:	5a 01       	movw	r10, r20
    128a:	29 01       	movw	r4, r18
    128c:	ca 01       	movw	r24, r20
    128e:	0e 94 88 01 	call	0x310	; 0x310 <pvPortMalloc>
    1292:	6c 01       	movw	r12, r24
    1294:	89 2b       	or	r24, r25
    1296:	99 f0       	breq	.+38     	; 0x12be <xTaskCreate+0x5e>
    1298:	86 e2       	ldi	r24, 0x26	; 38
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	0e 94 88 01 	call	0x310	; 0x310 <pvPortMalloc>
    12a0:	ec 01       	movw	r28, r24
    12a2:	89 2b       	or	r24, r25
    12a4:	41 f0       	breq	.+16     	; 0x12b6 <xTaskCreate+0x56>
    12a6:	86 e2       	ldi	r24, 0x26	; 38
    12a8:	fe 01       	movw	r30, r28
    12aa:	11 92       	st	Z+, r1
    12ac:	8a 95       	dec	r24
    12ae:	e9 f7       	brne	.-6      	; 0x12aa <xTaskCreate+0x4a>
    12b0:	d8 8e       	std	Y+24, r13	; 0x18
    12b2:	cf 8a       	std	Y+23, r12	; 0x17
    12b4:	06 c0       	rjmp	.+12     	; 0x12c2 <xTaskCreate+0x62>
    12b6:	c6 01       	movw	r24, r12
    12b8:	0e 94 22 02 	call	0x444	; 0x444 <vPortFree>
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <xTaskCreate+0x62>
    12be:	c0 e0       	ldi	r28, 0x00	; 0
    12c0:	d0 e0       	ldi	r29, 0x00	; 0
    12c2:	20 97       	sbiw	r28, 0x00	; 0
    12c4:	91 f0       	breq	.+36     	; 0x12ea <xTaskCreate+0x8a>
    12c6:	95 01       	movw	r18, r10
    12c8:	40 e0       	ldi	r20, 0x00	; 0
    12ca:	50 e0       	ldi	r21, 0x00	; 0
    12cc:	81 2c       	mov	r8, r1
    12ce:	91 2c       	mov	r9, r1
    12d0:	5e 01       	movw	r10, r28
    12d2:	67 01       	movw	r12, r14
    12d4:	e0 2e       	mov	r14, r16
    12d6:	82 01       	movw	r16, r4
    12d8:	b1 01       	movw	r22, r2
    12da:	c3 01       	movw	r24, r6
    12dc:	0e 94 a4 07 	call	0xf48	; 0xf48 <prvInitialiseNewTask>
    12e0:	ce 01       	movw	r24, r28
    12e2:	0e 94 40 08 	call	0x1080	; 0x1080 <prvAddNewTaskToReadyList>
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	01 c0       	rjmp	.+2      	; 0x12ec <xTaskCreate+0x8c>
    12ea:	8f ef       	ldi	r24, 0xFF	; 255
    12ec:	df 91       	pop	r29
    12ee:	cf 91       	pop	r28
    12f0:	1f 91       	pop	r17
    12f2:	0f 91       	pop	r16
    12f4:	ff 90       	pop	r15
    12f6:	ef 90       	pop	r14
    12f8:	df 90       	pop	r13
    12fa:	cf 90       	pop	r12
    12fc:	bf 90       	pop	r11
    12fe:	af 90       	pop	r10
    1300:	9f 90       	pop	r9
    1302:	8f 90       	pop	r8
    1304:	7f 90       	pop	r7
    1306:	6f 90       	pop	r6
    1308:	5f 90       	pop	r5
    130a:	4f 90       	pop	r4
    130c:	3f 90       	pop	r3
    130e:	2f 90       	pop	r2
    1310:	08 95       	ret

00001312 <vTaskStartScheduler>:
    1312:	ef 92       	push	r14
    1314:	ff 92       	push	r15
    1316:	0f 93       	push	r16
    1318:	0f 2e       	mov	r0, r31
    131a:	f0 eb       	ldi	r31, 0xB0	; 176
    131c:	ef 2e       	mov	r14, r31
    131e:	f6 e0       	ldi	r31, 0x06	; 6
    1320:	ff 2e       	mov	r15, r31
    1322:	f0 2d       	mov	r31, r0
    1324:	00 e0       	ldi	r16, 0x00	; 0
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	40 e2       	ldi	r20, 0x20	; 32
    132c:	53 e0       	ldi	r21, 0x03	; 3
    132e:	6d eb       	ldi	r22, 0xBD	; 189
    1330:	70 e0       	ldi	r23, 0x00	; 0
    1332:	83 ee       	ldi	r24, 0xE3	; 227
    1334:	98 e0       	ldi	r25, 0x08	; 8
    1336:	0e 94 30 09 	call	0x1260	; 0x1260 <xTaskCreate>
    133a:	81 30       	cpi	r24, 0x01	; 1
    133c:	81 f4       	brne	.+32     	; 0x135e <vTaskStartScheduler+0x4c>
    133e:	f8 94       	cli
    1340:	8f ef       	ldi	r24, 0xFF	; 255
    1342:	9f ef       	ldi	r25, 0xFF	; 255
    1344:	90 93 b3 06 	sts	0x06B3, r25	; 0x8006b3 <xNextTaskUnblockTime+0x1>
    1348:	80 93 b2 06 	sts	0x06B2, r24	; 0x8006b2 <xNextTaskUnblockTime>
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	80 93 b9 06 	sts	0x06B9, r24	; 0x8006b9 <xSchedulerRunning>
    1352:	10 92 bc 06 	sts	0x06BC, r1	; 0x8006bc <xTickCount+0x1>
    1356:	10 92 bb 06 	sts	0x06BB, r1	; 0x8006bb <xTickCount>
    135a:	0e 94 28 04 	call	0x850	; 0x850 <xPortStartScheduler>
    135e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <uxTopUsedPriority>
    1362:	0f 91       	pop	r16
    1364:	ff 90       	pop	r15
    1366:	ef 90       	pop	r14
    1368:	08 95       	ret

0000136a <vTaskSuspendAll>:
    136a:	80 91 af 06 	lds	r24, 0x06AF	; 0x8006af <uxSchedulerSuspended>
    136e:	8f 5f       	subi	r24, 0xFF	; 255
    1370:	80 93 af 06 	sts	0x06AF, r24	; 0x8006af <uxSchedulerSuspended>
    1374:	08 95       	ret

00001376 <xTaskIncrementTick>:
    1376:	0f 93       	push	r16
    1378:	1f 93       	push	r17
    137a:	cf 93       	push	r28
    137c:	df 93       	push	r29
    137e:	80 91 af 06 	lds	r24, 0x06AF	; 0x8006af <uxSchedulerSuspended>
    1382:	81 11       	cpse	r24, r1
    1384:	01 c1       	rjmp	.+514    	; 0x1588 <xTaskIncrementTick+0x212>
    1386:	c0 91 bb 06 	lds	r28, 0x06BB	; 0x8006bb <xTickCount>
    138a:	d0 91 bc 06 	lds	r29, 0x06BC	; 0x8006bc <xTickCount+0x1>
    138e:	8e 01       	movw	r16, r28
    1390:	0f 5f       	subi	r16, 0xFF	; 255
    1392:	1f 4f       	sbci	r17, 0xFF	; 255
    1394:	10 93 bc 06 	sts	0x06BC, r17	; 0x8006bc <xTickCount+0x1>
    1398:	00 93 bb 06 	sts	0x06BB, r16	; 0x8006bb <xTickCount>
    139c:	01 15       	cp	r16, r1
    139e:	11 05       	cpc	r17, r1
    13a0:	b9 f4       	brne	.+46     	; 0x13d0 <xTaskIncrementTick+0x5a>
    13a2:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <pxDelayedTaskList>
    13a6:	90 91 d4 06 	lds	r25, 0x06D4	; 0x8006d4 <pxDelayedTaskList+0x1>
    13aa:	20 91 d1 06 	lds	r18, 0x06D1	; 0x8006d1 <pxOverflowDelayedTaskList>
    13ae:	30 91 d2 06 	lds	r19, 0x06D2	; 0x8006d2 <pxOverflowDelayedTaskList+0x1>
    13b2:	30 93 d4 06 	sts	0x06D4, r19	; 0x8006d4 <pxDelayedTaskList+0x1>
    13b6:	20 93 d3 06 	sts	0x06D3, r18	; 0x8006d3 <pxDelayedTaskList>
    13ba:	90 93 d2 06 	sts	0x06D2, r25	; 0x8006d2 <pxOverflowDelayedTaskList+0x1>
    13be:	80 93 d1 06 	sts	0x06D1, r24	; 0x8006d1 <pxOverflowDelayedTaskList>
    13c2:	80 91 b5 06 	lds	r24, 0x06B5	; 0x8006b5 <xNumOfOverflows>
    13c6:	8f 5f       	subi	r24, 0xFF	; 255
    13c8:	80 93 b5 06 	sts	0x06B5, r24	; 0x8006b5 <xNumOfOverflows>
    13cc:	0e 94 7b 07 	call	0xef6	; 0xef6 <prvResetNextTaskUnblockTime>
    13d0:	80 91 b2 06 	lds	r24, 0x06B2	; 0x8006b2 <xNextTaskUnblockTime>
    13d4:	90 91 b3 06 	lds	r25, 0x06B3	; 0x8006b3 <xNextTaskUnblockTime+0x1>
    13d8:	08 17       	cp	r16, r24
    13da:	19 07       	cpc	r17, r25
    13dc:	20 f4       	brcc	.+8      	; 0x13e6 <xTaskIncrementTick+0x70>
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	b8 c0       	rjmp	.+368    	; 0x1552 <xTaskIncrementTick+0x1dc>
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	01 c0       	rjmp	.+2      	; 0x13e8 <xTaskIncrementTick+0x72>
    13e6:	80 e0       	ldi	r24, 0x00	; 0
    13e8:	e0 91 d3 06 	lds	r30, 0x06D3	; 0x8006d3 <pxDelayedTaskList>
    13ec:	f0 91 d4 06 	lds	r31, 0x06D4	; 0x8006d4 <pxDelayedTaskList+0x1>
    13f0:	90 81       	ld	r25, Z
    13f2:	91 11       	cpse	r25, r1
    13f4:	07 c0       	rjmp	.+14     	; 0x1404 <xTaskIncrementTick+0x8e>
    13f6:	2f ef       	ldi	r18, 0xFF	; 255
    13f8:	3f ef       	ldi	r19, 0xFF	; 255
    13fa:	30 93 b3 06 	sts	0x06B3, r19	; 0x8006b3 <xNextTaskUnblockTime+0x1>
    13fe:	20 93 b2 06 	sts	0x06B2, r18	; 0x8006b2 <xNextTaskUnblockTime>
    1402:	a7 c0       	rjmp	.+334    	; 0x1552 <xTaskIncrementTick+0x1dc>
    1404:	e0 91 d3 06 	lds	r30, 0x06D3	; 0x8006d3 <pxDelayedTaskList>
    1408:	f0 91 d4 06 	lds	r31, 0x06D4	; 0x8006d4 <pxDelayedTaskList+0x1>
    140c:	05 80       	ldd	r0, Z+5	; 0x05
    140e:	f6 81       	ldd	r31, Z+6	; 0x06
    1410:	e0 2d       	mov	r30, r0
    1412:	06 80       	ldd	r0, Z+6	; 0x06
    1414:	f7 81       	ldd	r31, Z+7	; 0x07
    1416:	e0 2d       	mov	r30, r0
    1418:	22 81       	ldd	r18, Z+2	; 0x02
    141a:	33 81       	ldd	r19, Z+3	; 0x03
    141c:	02 17       	cp	r16, r18
    141e:	13 07       	cpc	r17, r19
    1420:	28 f4       	brcc	.+10     	; 0x142c <xTaskIncrementTick+0xb6>
    1422:	30 93 b3 06 	sts	0x06B3, r19	; 0x8006b3 <xNextTaskUnblockTime+0x1>
    1426:	20 93 b2 06 	sts	0x06B2, r18	; 0x8006b2 <xNextTaskUnblockTime>
    142a:	93 c0       	rjmp	.+294    	; 0x1552 <xTaskIncrementTick+0x1dc>
    142c:	a2 85       	ldd	r26, Z+10	; 0x0a
    142e:	b3 85       	ldd	r27, Z+11	; 0x0b
    1430:	24 81       	ldd	r18, Z+4	; 0x04
    1432:	35 81       	ldd	r19, Z+5	; 0x05
    1434:	46 81       	ldd	r20, Z+6	; 0x06
    1436:	57 81       	ldd	r21, Z+7	; 0x07
    1438:	e9 01       	movw	r28, r18
    143a:	5d 83       	std	Y+5, r21	; 0x05
    143c:	4c 83       	std	Y+4, r20	; 0x04
    143e:	26 81       	ldd	r18, Z+6	; 0x06
    1440:	37 81       	ldd	r19, Z+7	; 0x07
    1442:	44 81       	ldd	r20, Z+4	; 0x04
    1444:	55 81       	ldd	r21, Z+5	; 0x05
    1446:	e9 01       	movw	r28, r18
    1448:	5b 83       	std	Y+3, r21	; 0x03
    144a:	4a 83       	std	Y+2, r20	; 0x02
    144c:	11 96       	adiw	r26, 0x01	; 1
    144e:	2d 91       	ld	r18, X+
    1450:	3c 91       	ld	r19, X
    1452:	12 97       	sbiw	r26, 0x02	; 2
    1454:	af 01       	movw	r20, r30
    1456:	4e 5f       	subi	r20, 0xFE	; 254
    1458:	5f 4f       	sbci	r21, 0xFF	; 255
    145a:	24 17       	cp	r18, r20
    145c:	35 07       	cpc	r19, r21
    145e:	31 f4       	brne	.+12     	; 0x146c <xTaskIncrementTick+0xf6>
    1460:	26 81       	ldd	r18, Z+6	; 0x06
    1462:	37 81       	ldd	r19, Z+7	; 0x07
    1464:	12 96       	adiw	r26, 0x02	; 2
    1466:	3c 93       	st	X, r19
    1468:	2e 93       	st	-X, r18
    146a:	11 97       	sbiw	r26, 0x01	; 1
    146c:	13 86       	std	Z+11, r1	; 0x0b
    146e:	12 86       	std	Z+10, r1	; 0x0a
    1470:	9c 91       	ld	r25, X
    1472:	91 50       	subi	r25, 0x01	; 1
    1474:	9c 93       	st	X, r25
    1476:	a4 89       	ldd	r26, Z+20	; 0x14
    1478:	b5 89       	ldd	r27, Z+21	; 0x15
    147a:	10 97       	sbiw	r26, 0x00	; 0
    147c:	19 f1       	breq	.+70     	; 0x14c4 <xTaskIncrementTick+0x14e>
    147e:	26 85       	ldd	r18, Z+14	; 0x0e
    1480:	37 85       	ldd	r19, Z+15	; 0x0f
    1482:	60 89       	ldd	r22, Z+16	; 0x10
    1484:	71 89       	ldd	r23, Z+17	; 0x11
    1486:	e9 01       	movw	r28, r18
    1488:	7d 83       	std	Y+5, r23	; 0x05
    148a:	6c 83       	std	Y+4, r22	; 0x04
    148c:	20 89       	ldd	r18, Z+16	; 0x10
    148e:	31 89       	ldd	r19, Z+17	; 0x11
    1490:	66 85       	ldd	r22, Z+14	; 0x0e
    1492:	77 85       	ldd	r23, Z+15	; 0x0f
    1494:	e9 01       	movw	r28, r18
    1496:	7b 83       	std	Y+3, r23	; 0x03
    1498:	6a 83       	std	Y+2, r22	; 0x02
    149a:	11 96       	adiw	r26, 0x01	; 1
    149c:	6d 91       	ld	r22, X+
    149e:	7c 91       	ld	r23, X
    14a0:	12 97       	sbiw	r26, 0x02	; 2
    14a2:	9f 01       	movw	r18, r30
    14a4:	24 5f       	subi	r18, 0xF4	; 244
    14a6:	3f 4f       	sbci	r19, 0xFF	; 255
    14a8:	62 17       	cp	r22, r18
    14aa:	73 07       	cpc	r23, r19
    14ac:	31 f4       	brne	.+12     	; 0x14ba <xTaskIncrementTick+0x144>
    14ae:	20 89       	ldd	r18, Z+16	; 0x10
    14b0:	31 89       	ldd	r19, Z+17	; 0x11
    14b2:	12 96       	adiw	r26, 0x02	; 2
    14b4:	3c 93       	st	X, r19
    14b6:	2e 93       	st	-X, r18
    14b8:	11 97       	sbiw	r26, 0x01	; 1
    14ba:	15 8a       	std	Z+21, r1	; 0x15
    14bc:	14 8a       	std	Z+20, r1	; 0x14
    14be:	9c 91       	ld	r25, X
    14c0:	91 50       	subi	r25, 0x01	; 1
    14c2:	9c 93       	st	X, r25
    14c4:	26 89       	ldd	r18, Z+22	; 0x16
    14c6:	90 91 ba 06 	lds	r25, 0x06BA	; 0x8006ba <uxTopReadyPriority>
    14ca:	92 17       	cp	r25, r18
    14cc:	10 f4       	brcc	.+4      	; 0x14d2 <xTaskIncrementTick+0x15c>
    14ce:	20 93 ba 06 	sts	0x06BA, r18	; 0x8006ba <uxTopReadyPriority>
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	d9 01       	movw	r26, r18
    14d6:	aa 0f       	add	r26, r26
    14d8:	bb 1f       	adc	r27, r27
    14da:	aa 0f       	add	r26, r26
    14dc:	bb 1f       	adc	r27, r27
    14de:	aa 0f       	add	r26, r26
    14e0:	bb 1f       	adc	r27, r27
    14e2:	2a 0f       	add	r18, r26
    14e4:	3b 1f       	adc	r19, r27
    14e6:	d9 01       	movw	r26, r18
    14e8:	a9 51       	subi	r26, 0x19	; 25
    14ea:	b9 4f       	sbci	r27, 0xF9	; 249
    14ec:	11 96       	adiw	r26, 0x01	; 1
    14ee:	0d 90       	ld	r0, X+
    14f0:	bc 91       	ld	r27, X
    14f2:	a0 2d       	mov	r26, r0
    14f4:	b5 83       	std	Z+5, r27	; 0x05
    14f6:	a4 83       	std	Z+4, r26	; 0x04
    14f8:	14 96       	adiw	r26, 0x04	; 4
    14fa:	2d 91       	ld	r18, X+
    14fc:	3c 91       	ld	r19, X
    14fe:	15 97       	sbiw	r26, 0x05	; 5
    1500:	37 83       	std	Z+7, r19	; 0x07
    1502:	26 83       	std	Z+6, r18	; 0x06
    1504:	14 96       	adiw	r26, 0x04	; 4
    1506:	2d 91       	ld	r18, X+
    1508:	3c 91       	ld	r19, X
    150a:	15 97       	sbiw	r26, 0x05	; 5
    150c:	e9 01       	movw	r28, r18
    150e:	5b 83       	std	Y+3, r21	; 0x03
    1510:	4a 83       	std	Y+2, r20	; 0x02
    1512:	15 96       	adiw	r26, 0x05	; 5
    1514:	5c 93       	st	X, r21
    1516:	4e 93       	st	-X, r20
    1518:	14 97       	sbiw	r26, 0x04	; 4
    151a:	a6 89       	ldd	r26, Z+22	; 0x16
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	9d 01       	movw	r18, r26
    1520:	22 0f       	add	r18, r18
    1522:	33 1f       	adc	r19, r19
    1524:	22 0f       	add	r18, r18
    1526:	33 1f       	adc	r19, r19
    1528:	22 0f       	add	r18, r18
    152a:	33 1f       	adc	r19, r19
    152c:	a2 0f       	add	r26, r18
    152e:	b3 1f       	adc	r27, r19
    1530:	a9 51       	subi	r26, 0x19	; 25
    1532:	b9 4f       	sbci	r27, 0xF9	; 249
    1534:	b3 87       	std	Z+11, r27	; 0x0b
    1536:	a2 87       	std	Z+10, r26	; 0x0a
    1538:	9c 91       	ld	r25, X
    153a:	9f 5f       	subi	r25, 0xFF	; 255
    153c:	9c 93       	st	X, r25
    153e:	26 89       	ldd	r18, Z+22	; 0x16
    1540:	e0 91 0b 07 	lds	r30, 0x070B	; 0x80070b <pxCurrentTCB>
    1544:	f0 91 0c 07 	lds	r31, 0x070C	; 0x80070c <pxCurrentTCB+0x1>
    1548:	96 89       	ldd	r25, Z+22	; 0x16
    154a:	92 17       	cp	r25, r18
    154c:	08 f4       	brcc	.+2      	; 0x1550 <xTaskIncrementTick+0x1da>
    154e:	49 cf       	rjmp	.-366    	; 0x13e2 <xTaskIncrementTick+0x6c>
    1550:	4b cf       	rjmp	.-362    	; 0x13e8 <xTaskIncrementTick+0x72>
    1552:	e0 91 0b 07 	lds	r30, 0x070B	; 0x80070b <pxCurrentTCB>
    1556:	f0 91 0c 07 	lds	r31, 0x070C	; 0x80070c <pxCurrentTCB+0x1>
    155a:	26 89       	ldd	r18, Z+22	; 0x16
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	f9 01       	movw	r30, r18
    1560:	ee 0f       	add	r30, r30
    1562:	ff 1f       	adc	r31, r31
    1564:	ee 0f       	add	r30, r30
    1566:	ff 1f       	adc	r31, r31
    1568:	ee 0f       	add	r30, r30
    156a:	ff 1f       	adc	r31, r31
    156c:	2e 0f       	add	r18, r30
    156e:	3f 1f       	adc	r19, r31
    1570:	f9 01       	movw	r30, r18
    1572:	e9 51       	subi	r30, 0x19	; 25
    1574:	f9 4f       	sbci	r31, 0xF9	; 249
    1576:	90 81       	ld	r25, Z
    1578:	92 30       	cpi	r25, 0x02	; 2
    157a:	08 f0       	brcs	.+2      	; 0x157e <xTaskIncrementTick+0x208>
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	90 91 b6 06 	lds	r25, 0x06B6	; 0x8006b6 <xYieldPending>
    1582:	91 11       	cpse	r25, r1
    1584:	0c c0       	rjmp	.+24     	; 0x159e <xTaskIncrementTick+0x228>
    1586:	0c c0       	rjmp	.+24     	; 0x15a0 <xTaskIncrementTick+0x22a>
    1588:	80 91 b7 06 	lds	r24, 0x06B7	; 0x8006b7 <xPendedTicks>
    158c:	90 91 b8 06 	lds	r25, 0x06B8	; 0x8006b8 <xPendedTicks+0x1>
    1590:	01 96       	adiw	r24, 0x01	; 1
    1592:	90 93 b8 06 	sts	0x06B8, r25	; 0x8006b8 <xPendedTicks+0x1>
    1596:	80 93 b7 06 	sts	0x06B7, r24	; 0x8006b7 <xPendedTicks>
    159a:	80 e0       	ldi	r24, 0x00	; 0
    159c:	01 c0       	rjmp	.+2      	; 0x15a0 <xTaskIncrementTick+0x22a>
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	df 91       	pop	r29
    15a2:	cf 91       	pop	r28
    15a4:	1f 91       	pop	r17
    15a6:	0f 91       	pop	r16
    15a8:	08 95       	ret

000015aa <xTaskResumeAll>:
    15aa:	cf 93       	push	r28
    15ac:	df 93       	push	r29
    15ae:	0f b6       	in	r0, 0x3f	; 63
    15b0:	f8 94       	cli
    15b2:	0f 92       	push	r0
    15b4:	80 91 af 06 	lds	r24, 0x06AF	; 0x8006af <uxSchedulerSuspended>
    15b8:	81 50       	subi	r24, 0x01	; 1
    15ba:	80 93 af 06 	sts	0x06AF, r24	; 0x8006af <uxSchedulerSuspended>
    15be:	80 91 af 06 	lds	r24, 0x06AF	; 0x8006af <uxSchedulerSuspended>
    15c2:	81 11       	cpse	r24, r1
    15c4:	bf c0       	rjmp	.+382    	; 0x1744 <xTaskResumeAll+0x19a>
    15c6:	80 91 bd 06 	lds	r24, 0x06BD	; 0x8006bd <uxCurrentNumberOfTasks>
    15ca:	81 11       	cpse	r24, r1
    15cc:	96 c0       	rjmp	.+300    	; 0x16fa <xTaskResumeAll+0x150>
    15ce:	bd c0       	rjmp	.+378    	; 0x174a <xTaskResumeAll+0x1a0>
    15d0:	e0 91 cd 06 	lds	r30, 0x06CD	; 0x8006cd <xPendingReadyList+0x5>
    15d4:	f0 91 ce 06 	lds	r31, 0x06CE	; 0x8006ce <xPendingReadyList+0x6>
    15d8:	06 80       	ldd	r0, Z+6	; 0x06
    15da:	f7 81       	ldd	r31, Z+7	; 0x07
    15dc:	e0 2d       	mov	r30, r0
    15de:	a4 89       	ldd	r26, Z+20	; 0x14
    15e0:	b5 89       	ldd	r27, Z+21	; 0x15
    15e2:	c6 85       	ldd	r28, Z+14	; 0x0e
    15e4:	d7 85       	ldd	r29, Z+15	; 0x0f
    15e6:	80 89       	ldd	r24, Z+16	; 0x10
    15e8:	91 89       	ldd	r25, Z+17	; 0x11
    15ea:	9d 83       	std	Y+5, r25	; 0x05
    15ec:	8c 83       	std	Y+4, r24	; 0x04
    15ee:	c0 89       	ldd	r28, Z+16	; 0x10
    15f0:	d1 89       	ldd	r29, Z+17	; 0x11
    15f2:	86 85       	ldd	r24, Z+14	; 0x0e
    15f4:	97 85       	ldd	r25, Z+15	; 0x0f
    15f6:	9b 83       	std	Y+3, r25	; 0x03
    15f8:	8a 83       	std	Y+2, r24	; 0x02
    15fa:	11 96       	adiw	r26, 0x01	; 1
    15fc:	2d 91       	ld	r18, X+
    15fe:	3c 91       	ld	r19, X
    1600:	12 97       	sbiw	r26, 0x02	; 2
    1602:	cf 01       	movw	r24, r30
    1604:	0c 96       	adiw	r24, 0x0c	; 12
    1606:	28 17       	cp	r18, r24
    1608:	39 07       	cpc	r19, r25
    160a:	31 f4       	brne	.+12     	; 0x1618 <xTaskResumeAll+0x6e>
    160c:	80 89       	ldd	r24, Z+16	; 0x10
    160e:	91 89       	ldd	r25, Z+17	; 0x11
    1610:	12 96       	adiw	r26, 0x02	; 2
    1612:	9c 93       	st	X, r25
    1614:	8e 93       	st	-X, r24
    1616:	11 97       	sbiw	r26, 0x01	; 1
    1618:	15 8a       	std	Z+21, r1	; 0x15
    161a:	14 8a       	std	Z+20, r1	; 0x14
    161c:	8c 91       	ld	r24, X
    161e:	81 50       	subi	r24, 0x01	; 1
    1620:	8c 93       	st	X, r24
    1622:	a2 85       	ldd	r26, Z+10	; 0x0a
    1624:	b3 85       	ldd	r27, Z+11	; 0x0b
    1626:	c4 81       	ldd	r28, Z+4	; 0x04
    1628:	d5 81       	ldd	r29, Z+5	; 0x05
    162a:	86 81       	ldd	r24, Z+6	; 0x06
    162c:	97 81       	ldd	r25, Z+7	; 0x07
    162e:	9d 83       	std	Y+5, r25	; 0x05
    1630:	8c 83       	std	Y+4, r24	; 0x04
    1632:	c6 81       	ldd	r28, Z+6	; 0x06
    1634:	d7 81       	ldd	r29, Z+7	; 0x07
    1636:	84 81       	ldd	r24, Z+4	; 0x04
    1638:	95 81       	ldd	r25, Z+5	; 0x05
    163a:	9b 83       	std	Y+3, r25	; 0x03
    163c:	8a 83       	std	Y+2, r24	; 0x02
    163e:	11 96       	adiw	r26, 0x01	; 1
    1640:	8d 91       	ld	r24, X+
    1642:	9c 91       	ld	r25, X
    1644:	12 97       	sbiw	r26, 0x02	; 2
    1646:	9f 01       	movw	r18, r30
    1648:	2e 5f       	subi	r18, 0xFE	; 254
    164a:	3f 4f       	sbci	r19, 0xFF	; 255
    164c:	82 17       	cp	r24, r18
    164e:	93 07       	cpc	r25, r19
    1650:	31 f4       	brne	.+12     	; 0x165e <xTaskResumeAll+0xb4>
    1652:	86 81       	ldd	r24, Z+6	; 0x06
    1654:	97 81       	ldd	r25, Z+7	; 0x07
    1656:	12 96       	adiw	r26, 0x02	; 2
    1658:	9c 93       	st	X, r25
    165a:	8e 93       	st	-X, r24
    165c:	11 97       	sbiw	r26, 0x01	; 1
    165e:	13 86       	std	Z+11, r1	; 0x0b
    1660:	12 86       	std	Z+10, r1	; 0x0a
    1662:	8c 91       	ld	r24, X
    1664:	81 50       	subi	r24, 0x01	; 1
    1666:	8c 93       	st	X, r24
    1668:	86 89       	ldd	r24, Z+22	; 0x16
    166a:	90 91 ba 06 	lds	r25, 0x06BA	; 0x8006ba <uxTopReadyPriority>
    166e:	98 17       	cp	r25, r24
    1670:	10 f4       	brcc	.+4      	; 0x1676 <xTaskResumeAll+0xcc>
    1672:	80 93 ba 06 	sts	0x06BA, r24	; 0x8006ba <uxTopReadyPriority>
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	dc 01       	movw	r26, r24
    167a:	aa 0f       	add	r26, r26
    167c:	bb 1f       	adc	r27, r27
    167e:	aa 0f       	add	r26, r26
    1680:	bb 1f       	adc	r27, r27
    1682:	aa 0f       	add	r26, r26
    1684:	bb 1f       	adc	r27, r27
    1686:	8a 0f       	add	r24, r26
    1688:	9b 1f       	adc	r25, r27
    168a:	dc 01       	movw	r26, r24
    168c:	a9 51       	subi	r26, 0x19	; 25
    168e:	b9 4f       	sbci	r27, 0xF9	; 249
    1690:	11 96       	adiw	r26, 0x01	; 1
    1692:	0d 90       	ld	r0, X+
    1694:	bc 91       	ld	r27, X
    1696:	a0 2d       	mov	r26, r0
    1698:	b5 83       	std	Z+5, r27	; 0x05
    169a:	a4 83       	std	Z+4, r26	; 0x04
    169c:	14 96       	adiw	r26, 0x04	; 4
    169e:	8d 91       	ld	r24, X+
    16a0:	9c 91       	ld	r25, X
    16a2:	15 97       	sbiw	r26, 0x05	; 5
    16a4:	97 83       	std	Z+7, r25	; 0x07
    16a6:	86 83       	std	Z+6, r24	; 0x06
    16a8:	14 96       	adiw	r26, 0x04	; 4
    16aa:	cd 91       	ld	r28, X+
    16ac:	dc 91       	ld	r29, X
    16ae:	15 97       	sbiw	r26, 0x05	; 5
    16b0:	3b 83       	std	Y+3, r19	; 0x03
    16b2:	2a 83       	std	Y+2, r18	; 0x02
    16b4:	15 96       	adiw	r26, 0x05	; 5
    16b6:	3c 93       	st	X, r19
    16b8:	2e 93       	st	-X, r18
    16ba:	14 97       	sbiw	r26, 0x04	; 4
    16bc:	a6 89       	ldd	r26, Z+22	; 0x16
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	cd 01       	movw	r24, r26
    16c2:	88 0f       	add	r24, r24
    16c4:	99 1f       	adc	r25, r25
    16c6:	88 0f       	add	r24, r24
    16c8:	99 1f       	adc	r25, r25
    16ca:	88 0f       	add	r24, r24
    16cc:	99 1f       	adc	r25, r25
    16ce:	a8 0f       	add	r26, r24
    16d0:	b9 1f       	adc	r27, r25
    16d2:	a9 51       	subi	r26, 0x19	; 25
    16d4:	b9 4f       	sbci	r27, 0xF9	; 249
    16d6:	b3 87       	std	Z+11, r27	; 0x0b
    16d8:	a2 87       	std	Z+10, r26	; 0x0a
    16da:	8c 91       	ld	r24, X
    16dc:	8f 5f       	subi	r24, 0xFF	; 255
    16de:	8c 93       	st	X, r24
    16e0:	96 89       	ldd	r25, Z+22	; 0x16
    16e2:	a0 91 0b 07 	lds	r26, 0x070B	; 0x80070b <pxCurrentTCB>
    16e6:	b0 91 0c 07 	lds	r27, 0x070C	; 0x80070c <pxCurrentTCB+0x1>
    16ea:	56 96       	adiw	r26, 0x16	; 22
    16ec:	8c 91       	ld	r24, X
    16ee:	98 17       	cp	r25, r24
    16f0:	30 f0       	brcs	.+12     	; 0x16fe <xTaskResumeAll+0x154>
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	80 93 b6 06 	sts	0x06B6, r24	; 0x8006b6 <xYieldPending>
    16f8:	02 c0       	rjmp	.+4      	; 0x16fe <xTaskResumeAll+0x154>
    16fa:	e0 e0       	ldi	r30, 0x00	; 0
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 91 c8 06 	lds	r24, 0x06C8	; 0x8006c8 <xPendingReadyList>
    1702:	81 11       	cpse	r24, r1
    1704:	65 cf       	rjmp	.-310    	; 0x15d0 <xTaskResumeAll+0x26>
    1706:	ef 2b       	or	r30, r31
    1708:	11 f0       	breq	.+4      	; 0x170e <xTaskResumeAll+0x164>
    170a:	0e 94 7b 07 	call	0xef6	; 0xef6 <prvResetNextTaskUnblockTime>
    170e:	c0 91 b7 06 	lds	r28, 0x06B7	; 0x8006b7 <xPendedTicks>
    1712:	d0 91 b8 06 	lds	r29, 0x06B8	; 0x8006b8 <xPendedTicks+0x1>
    1716:	20 97       	sbiw	r28, 0x00	; 0
    1718:	69 f0       	breq	.+26     	; 0x1734 <xTaskResumeAll+0x18a>
    171a:	0e 94 bb 09 	call	0x1376	; 0x1376 <xTaskIncrementTick>
    171e:	88 23       	and	r24, r24
    1720:	19 f0       	breq	.+6      	; 0x1728 <xTaskResumeAll+0x17e>
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	80 93 b6 06 	sts	0x06B6, r24	; 0x8006b6 <xYieldPending>
    1728:	21 97       	sbiw	r28, 0x01	; 1
    172a:	b9 f7       	brne	.-18     	; 0x171a <xTaskResumeAll+0x170>
    172c:	10 92 b8 06 	sts	0x06B8, r1	; 0x8006b8 <xPendedTicks+0x1>
    1730:	10 92 b7 06 	sts	0x06B7, r1	; 0x8006b7 <xPendedTicks>
    1734:	80 91 b6 06 	lds	r24, 0x06B6	; 0x8006b6 <xYieldPending>
    1738:	88 23       	and	r24, r24
    173a:	31 f0       	breq	.+12     	; 0x1748 <xTaskResumeAll+0x19e>
    173c:	0e 94 57 04 	call	0x8ae	; 0x8ae <vPortYield>
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	03 c0       	rjmp	.+6      	; 0x174a <xTaskResumeAll+0x1a0>
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	01 c0       	rjmp	.+2      	; 0x174a <xTaskResumeAll+0x1a0>
    1748:	80 e0       	ldi	r24, 0x00	; 0
    174a:	0f 90       	pop	r0
    174c:	0f be       	out	0x3f, r0	; 63
    174e:	df 91       	pop	r29
    1750:	cf 91       	pop	r28
    1752:	08 95       	ret

00001754 <vTaskDelay>:
    1754:	cf 93       	push	r28
    1756:	df 93       	push	r29
    1758:	ec 01       	movw	r28, r24
    175a:	89 2b       	or	r24, r25
    175c:	49 f0       	breq	.+18     	; 0x1770 <vTaskDelay+0x1c>
    175e:	0e 94 b5 09 	call	0x136a	; 0x136a <vTaskSuspendAll>
    1762:	60 e0       	ldi	r22, 0x00	; 0
    1764:	ce 01       	movw	r24, r28
    1766:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <prvAddCurrentTaskToDelayedList>
    176a:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <xTaskResumeAll>
    176e:	01 c0       	rjmp	.+2      	; 0x1772 <vTaskDelay+0x1e>
    1770:	80 e0       	ldi	r24, 0x00	; 0
    1772:	81 11       	cpse	r24, r1
    1774:	02 c0       	rjmp	.+4      	; 0x177a <vTaskDelay+0x26>
    1776:	0e 94 57 04 	call	0x8ae	; 0x8ae <vPortYield>
    177a:	df 91       	pop	r29
    177c:	cf 91       	pop	r28
    177e:	08 95       	ret

00001780 <vTaskSwitchContext>:
    1780:	80 91 af 06 	lds	r24, 0x06AF	; 0x8006af <uxSchedulerSuspended>
    1784:	88 23       	and	r24, r24
    1786:	21 f0       	breq	.+8      	; 0x1790 <vTaskSwitchContext+0x10>
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	80 93 b6 06 	sts	0x06B6, r24	; 0x8006b6 <xYieldPending>
    178e:	08 95       	ret
    1790:	10 92 b6 06 	sts	0x06B6, r1	; 0x8006b6 <xYieldPending>
    1794:	20 91 ba 06 	lds	r18, 0x06BA	; 0x8006ba <uxTopReadyPriority>
    1798:	01 c0       	rjmp	.+2      	; 0x179c <vTaskSwitchContext+0x1c>
    179a:	21 50       	subi	r18, 0x01	; 1
    179c:	82 2f       	mov	r24, r18
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	fc 01       	movw	r30, r24
    17a2:	ee 0f       	add	r30, r30
    17a4:	ff 1f       	adc	r31, r31
    17a6:	ee 0f       	add	r30, r30
    17a8:	ff 1f       	adc	r31, r31
    17aa:	ee 0f       	add	r30, r30
    17ac:	ff 1f       	adc	r31, r31
    17ae:	e8 0f       	add	r30, r24
    17b0:	f9 1f       	adc	r31, r25
    17b2:	e9 51       	subi	r30, 0x19	; 25
    17b4:	f9 4f       	sbci	r31, 0xF9	; 249
    17b6:	30 81       	ld	r19, Z
    17b8:	33 23       	and	r19, r19
    17ba:	79 f3       	breq	.-34     	; 0x179a <vTaskSwitchContext+0x1a>
    17bc:	ac 01       	movw	r20, r24
    17be:	44 0f       	add	r20, r20
    17c0:	55 1f       	adc	r21, r21
    17c2:	44 0f       	add	r20, r20
    17c4:	55 1f       	adc	r21, r21
    17c6:	44 0f       	add	r20, r20
    17c8:	55 1f       	adc	r21, r21
    17ca:	48 0f       	add	r20, r24
    17cc:	59 1f       	adc	r21, r25
    17ce:	df 01       	movw	r26, r30
    17d0:	01 80       	ldd	r0, Z+1	; 0x01
    17d2:	f2 81       	ldd	r31, Z+2	; 0x02
    17d4:	e0 2d       	mov	r30, r0
    17d6:	02 80       	ldd	r0, Z+2	; 0x02
    17d8:	f3 81       	ldd	r31, Z+3	; 0x03
    17da:	e0 2d       	mov	r30, r0
    17dc:	12 96       	adiw	r26, 0x02	; 2
    17de:	fc 93       	st	X, r31
    17e0:	ee 93       	st	-X, r30
    17e2:	11 97       	sbiw	r26, 0x01	; 1
    17e4:	46 51       	subi	r20, 0x16	; 22
    17e6:	59 4f       	sbci	r21, 0xF9	; 249
    17e8:	e4 17       	cp	r30, r20
    17ea:	f5 07       	cpc	r31, r21
    17ec:	29 f4       	brne	.+10     	; 0x17f8 <vTaskSwitchContext+0x78>
    17ee:	42 81       	ldd	r20, Z+2	; 0x02
    17f0:	53 81       	ldd	r21, Z+3	; 0x03
    17f2:	fd 01       	movw	r30, r26
    17f4:	52 83       	std	Z+2, r21	; 0x02
    17f6:	41 83       	std	Z+1, r20	; 0x01
    17f8:	fc 01       	movw	r30, r24
    17fa:	ee 0f       	add	r30, r30
    17fc:	ff 1f       	adc	r31, r31
    17fe:	ee 0f       	add	r30, r30
    1800:	ff 1f       	adc	r31, r31
    1802:	ee 0f       	add	r30, r30
    1804:	ff 1f       	adc	r31, r31
    1806:	8e 0f       	add	r24, r30
    1808:	9f 1f       	adc	r25, r31
    180a:	fc 01       	movw	r30, r24
    180c:	e9 51       	subi	r30, 0x19	; 25
    180e:	f9 4f       	sbci	r31, 0xF9	; 249
    1810:	01 80       	ldd	r0, Z+1	; 0x01
    1812:	f2 81       	ldd	r31, Z+2	; 0x02
    1814:	e0 2d       	mov	r30, r0
    1816:	86 81       	ldd	r24, Z+6	; 0x06
    1818:	97 81       	ldd	r25, Z+7	; 0x07
    181a:	90 93 0c 07 	sts	0x070C, r25	; 0x80070c <pxCurrentTCB+0x1>
    181e:	80 93 0b 07 	sts	0x070B, r24	; 0x80070b <pxCurrentTCB>
    1822:	20 93 ba 06 	sts	0x06BA, r18	; 0x8006ba <uxTopReadyPriority>
    1826:	08 95       	ret

00001828 <vTaskPlaceOnEventList>:
    1828:	cf 93       	push	r28
    182a:	df 93       	push	r29
    182c:	eb 01       	movw	r28, r22
    182e:	60 91 0b 07 	lds	r22, 0x070B	; 0x80070b <pxCurrentTCB>
    1832:	70 91 0c 07 	lds	r23, 0x070C	; 0x80070c <pxCurrentTCB+0x1>
    1836:	64 5f       	subi	r22, 0xF4	; 244
    1838:	7f 4f       	sbci	r23, 0xFF	; 255
    183a:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <vListInsert>
    183e:	61 e0       	ldi	r22, 0x01	; 1
    1840:	ce 01       	movw	r24, r28
    1842:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <prvAddCurrentTaskToDelayedList>
    1846:	df 91       	pop	r29
    1848:	cf 91       	pop	r28
    184a:	08 95       	ret

0000184c <xTaskRemoveFromEventList>:
    184c:	cf 93       	push	r28
    184e:	df 93       	push	r29
    1850:	dc 01       	movw	r26, r24
    1852:	15 96       	adiw	r26, 0x05	; 5
    1854:	ed 91       	ld	r30, X+
    1856:	fc 91       	ld	r31, X
    1858:	16 97       	sbiw	r26, 0x06	; 6
    185a:	06 80       	ldd	r0, Z+6	; 0x06
    185c:	f7 81       	ldd	r31, Z+7	; 0x07
    185e:	e0 2d       	mov	r30, r0
    1860:	a4 89       	ldd	r26, Z+20	; 0x14
    1862:	b5 89       	ldd	r27, Z+21	; 0x15
    1864:	c6 85       	ldd	r28, Z+14	; 0x0e
    1866:	d7 85       	ldd	r29, Z+15	; 0x0f
    1868:	80 89       	ldd	r24, Z+16	; 0x10
    186a:	91 89       	ldd	r25, Z+17	; 0x11
    186c:	9d 83       	std	Y+5, r25	; 0x05
    186e:	8c 83       	std	Y+4, r24	; 0x04
    1870:	c0 89       	ldd	r28, Z+16	; 0x10
    1872:	d1 89       	ldd	r29, Z+17	; 0x11
    1874:	86 85       	ldd	r24, Z+14	; 0x0e
    1876:	97 85       	ldd	r25, Z+15	; 0x0f
    1878:	9b 83       	std	Y+3, r25	; 0x03
    187a:	8a 83       	std	Y+2, r24	; 0x02
    187c:	11 96       	adiw	r26, 0x01	; 1
    187e:	8d 91       	ld	r24, X+
    1880:	9c 91       	ld	r25, X
    1882:	12 97       	sbiw	r26, 0x02	; 2
    1884:	9f 01       	movw	r18, r30
    1886:	24 5f       	subi	r18, 0xF4	; 244
    1888:	3f 4f       	sbci	r19, 0xFF	; 255
    188a:	82 17       	cp	r24, r18
    188c:	93 07       	cpc	r25, r19
    188e:	31 f4       	brne	.+12     	; 0x189c <xTaskRemoveFromEventList+0x50>
    1890:	80 89       	ldd	r24, Z+16	; 0x10
    1892:	91 89       	ldd	r25, Z+17	; 0x11
    1894:	12 96       	adiw	r26, 0x02	; 2
    1896:	9c 93       	st	X, r25
    1898:	8e 93       	st	-X, r24
    189a:	11 97       	sbiw	r26, 0x01	; 1
    189c:	15 8a       	std	Z+21, r1	; 0x15
    189e:	14 8a       	std	Z+20, r1	; 0x14
    18a0:	8c 91       	ld	r24, X
    18a2:	81 50       	subi	r24, 0x01	; 1
    18a4:	8c 93       	st	X, r24
    18a6:	80 91 af 06 	lds	r24, 0x06AF	; 0x8006af <uxSchedulerSuspended>
    18aa:	81 11       	cpse	r24, r1
    18ac:	60 c0       	rjmp	.+192    	; 0x196e <xTaskRemoveFromEventList+0x122>
    18ae:	a2 85       	ldd	r26, Z+10	; 0x0a
    18b0:	b3 85       	ldd	r27, Z+11	; 0x0b
    18b2:	c4 81       	ldd	r28, Z+4	; 0x04
    18b4:	d5 81       	ldd	r29, Z+5	; 0x05
    18b6:	86 81       	ldd	r24, Z+6	; 0x06
    18b8:	97 81       	ldd	r25, Z+7	; 0x07
    18ba:	9d 83       	std	Y+5, r25	; 0x05
    18bc:	8c 83       	std	Y+4, r24	; 0x04
    18be:	c6 81       	ldd	r28, Z+6	; 0x06
    18c0:	d7 81       	ldd	r29, Z+7	; 0x07
    18c2:	84 81       	ldd	r24, Z+4	; 0x04
    18c4:	95 81       	ldd	r25, Z+5	; 0x05
    18c6:	9b 83       	std	Y+3, r25	; 0x03
    18c8:	8a 83       	std	Y+2, r24	; 0x02
    18ca:	11 96       	adiw	r26, 0x01	; 1
    18cc:	8d 91       	ld	r24, X+
    18ce:	9c 91       	ld	r25, X
    18d0:	12 97       	sbiw	r26, 0x02	; 2
    18d2:	9f 01       	movw	r18, r30
    18d4:	2e 5f       	subi	r18, 0xFE	; 254
    18d6:	3f 4f       	sbci	r19, 0xFF	; 255
    18d8:	82 17       	cp	r24, r18
    18da:	93 07       	cpc	r25, r19
    18dc:	31 f4       	brne	.+12     	; 0x18ea <xTaskRemoveFromEventList+0x9e>
    18de:	86 81       	ldd	r24, Z+6	; 0x06
    18e0:	97 81       	ldd	r25, Z+7	; 0x07
    18e2:	12 96       	adiw	r26, 0x02	; 2
    18e4:	9c 93       	st	X, r25
    18e6:	8e 93       	st	-X, r24
    18e8:	11 97       	sbiw	r26, 0x01	; 1
    18ea:	13 86       	std	Z+11, r1	; 0x0b
    18ec:	12 86       	std	Z+10, r1	; 0x0a
    18ee:	8c 91       	ld	r24, X
    18f0:	81 50       	subi	r24, 0x01	; 1
    18f2:	8c 93       	st	X, r24
    18f4:	86 89       	ldd	r24, Z+22	; 0x16
    18f6:	90 91 ba 06 	lds	r25, 0x06BA	; 0x8006ba <uxTopReadyPriority>
    18fa:	98 17       	cp	r25, r24
    18fc:	10 f4       	brcc	.+4      	; 0x1902 <xTaskRemoveFromEventList+0xb6>
    18fe:	80 93 ba 06 	sts	0x06BA, r24	; 0x8006ba <uxTopReadyPriority>
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	dc 01       	movw	r26, r24
    1906:	aa 0f       	add	r26, r26
    1908:	bb 1f       	adc	r27, r27
    190a:	aa 0f       	add	r26, r26
    190c:	bb 1f       	adc	r27, r27
    190e:	aa 0f       	add	r26, r26
    1910:	bb 1f       	adc	r27, r27
    1912:	8a 0f       	add	r24, r26
    1914:	9b 1f       	adc	r25, r27
    1916:	dc 01       	movw	r26, r24
    1918:	a9 51       	subi	r26, 0x19	; 25
    191a:	b9 4f       	sbci	r27, 0xF9	; 249
    191c:	11 96       	adiw	r26, 0x01	; 1
    191e:	0d 90       	ld	r0, X+
    1920:	bc 91       	ld	r27, X
    1922:	a0 2d       	mov	r26, r0
    1924:	b5 83       	std	Z+5, r27	; 0x05
    1926:	a4 83       	std	Z+4, r26	; 0x04
    1928:	14 96       	adiw	r26, 0x04	; 4
    192a:	8d 91       	ld	r24, X+
    192c:	9c 91       	ld	r25, X
    192e:	15 97       	sbiw	r26, 0x05	; 5
    1930:	97 83       	std	Z+7, r25	; 0x07
    1932:	86 83       	std	Z+6, r24	; 0x06
    1934:	14 96       	adiw	r26, 0x04	; 4
    1936:	cd 91       	ld	r28, X+
    1938:	dc 91       	ld	r29, X
    193a:	15 97       	sbiw	r26, 0x05	; 5
    193c:	3b 83       	std	Y+3, r19	; 0x03
    193e:	2a 83       	std	Y+2, r18	; 0x02
    1940:	15 96       	adiw	r26, 0x05	; 5
    1942:	3c 93       	st	X, r19
    1944:	2e 93       	st	-X, r18
    1946:	14 97       	sbiw	r26, 0x04	; 4
    1948:	a6 89       	ldd	r26, Z+22	; 0x16
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	cd 01       	movw	r24, r26
    194e:	88 0f       	add	r24, r24
    1950:	99 1f       	adc	r25, r25
    1952:	88 0f       	add	r24, r24
    1954:	99 1f       	adc	r25, r25
    1956:	88 0f       	add	r24, r24
    1958:	99 1f       	adc	r25, r25
    195a:	a8 0f       	add	r26, r24
    195c:	b9 1f       	adc	r27, r25
    195e:	a9 51       	subi	r26, 0x19	; 25
    1960:	b9 4f       	sbci	r27, 0xF9	; 249
    1962:	b3 87       	std	Z+11, r27	; 0x0b
    1964:	a2 87       	std	Z+10, r26	; 0x0a
    1966:	8c 91       	ld	r24, X
    1968:	8f 5f       	subi	r24, 0xFF	; 255
    196a:	8c 93       	st	X, r24
    196c:	1c c0       	rjmp	.+56     	; 0x19a6 <xTaskRemoveFromEventList+0x15a>
    196e:	48 ec       	ldi	r20, 0xC8	; 200
    1970:	56 e0       	ldi	r21, 0x06	; 6
    1972:	da 01       	movw	r26, r20
    1974:	11 96       	adiw	r26, 0x01	; 1
    1976:	cd 91       	ld	r28, X+
    1978:	dc 91       	ld	r29, X
    197a:	12 97       	sbiw	r26, 0x02	; 2
    197c:	d7 87       	std	Z+15, r29	; 0x0f
    197e:	c6 87       	std	Z+14, r28	; 0x0e
    1980:	8c 81       	ldd	r24, Y+4	; 0x04
    1982:	9d 81       	ldd	r25, Y+5	; 0x05
    1984:	91 8b       	std	Z+17, r25	; 0x11
    1986:	80 8b       	std	Z+16, r24	; 0x10
    1988:	8c 81       	ldd	r24, Y+4	; 0x04
    198a:	9d 81       	ldd	r25, Y+5	; 0x05
    198c:	dc 01       	movw	r26, r24
    198e:	13 96       	adiw	r26, 0x03	; 3
    1990:	3c 93       	st	X, r19
    1992:	2e 93       	st	-X, r18
    1994:	12 97       	sbiw	r26, 0x02	; 2
    1996:	3d 83       	std	Y+5, r19	; 0x05
    1998:	2c 83       	std	Y+4, r18	; 0x04
    199a:	55 8b       	std	Z+21, r21	; 0x15
    199c:	44 8b       	std	Z+20, r20	; 0x14
    199e:	da 01       	movw	r26, r20
    19a0:	8c 91       	ld	r24, X
    19a2:	8f 5f       	subi	r24, 0xFF	; 255
    19a4:	8c 93       	st	X, r24
    19a6:	96 89       	ldd	r25, Z+22	; 0x16
    19a8:	e0 91 0b 07 	lds	r30, 0x070B	; 0x80070b <pxCurrentTCB>
    19ac:	f0 91 0c 07 	lds	r31, 0x070C	; 0x80070c <pxCurrentTCB+0x1>
    19b0:	86 89       	ldd	r24, Z+22	; 0x16
    19b2:	89 17       	cp	r24, r25
    19b4:	20 f4       	brcc	.+8      	; 0x19be <xTaskRemoveFromEventList+0x172>
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	80 93 b6 06 	sts	0x06B6, r24	; 0x8006b6 <xYieldPending>
    19bc:	01 c0       	rjmp	.+2      	; 0x19c0 <xTaskRemoveFromEventList+0x174>
    19be:	80 e0       	ldi	r24, 0x00	; 0
    19c0:	df 91       	pop	r29
    19c2:	cf 91       	pop	r28
    19c4:	08 95       	ret

000019c6 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
    19c6:	20 91 b5 06 	lds	r18, 0x06B5	; 0x8006b5 <xNumOfOverflows>
    19ca:	fc 01       	movw	r30, r24
    19cc:	20 83       	st	Z, r18
    pxTimeOut->xTimeOnEntering = xTickCount;
    19ce:	20 91 bb 06 	lds	r18, 0x06BB	; 0x8006bb <xTickCount>
    19d2:	30 91 bc 06 	lds	r19, 0x06BC	; 0x8006bc <xTickCount+0x1>
    19d6:	32 83       	std	Z+2, r19	; 0x02
    19d8:	21 83       	std	Z+1, r18	; 0x01
    19da:	08 95       	ret

000019dc <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
    19dc:	cf 93       	push	r28
    19de:	df 93       	push	r29
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
    19e0:	0f b6       	in	r0, 0x3f	; 63
    19e2:	f8 94       	cli
    19e4:	0f 92       	push	r0
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
    19e6:	40 91 bb 06 	lds	r20, 0x06BB	; 0x8006bb <xTickCount>
    19ea:	50 91 bc 06 	lds	r21, 0x06BC	; 0x8006bc <xTickCount+0x1>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    19ee:	ec 01       	movw	r28, r24
    19f0:	29 81       	ldd	r18, Y+1	; 0x01
    19f2:	3a 81       	ldd	r19, Y+2	; 0x02
    19f4:	da 01       	movw	r26, r20
    19f6:	a2 1b       	sub	r26, r18
    19f8:	b3 0b       	sbc	r27, r19
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    19fa:	f8 81       	ld	r31, Y
    19fc:	e0 91 b5 06 	lds	r30, 0x06B5	; 0x8006b5 <xNumOfOverflows>
    1a00:	fe 17       	cp	r31, r30
    1a02:	41 f0       	breq	.+16     	; 0x1a14 <xTaskCheckForTimeOut+0x38>
    1a04:	42 17       	cp	r20, r18
    1a06:	53 07       	cpc	r21, r19
    1a08:	28 f0       	brcs	.+10     	; 0x1a14 <xTaskCheckForTimeOut+0x38>
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
            *pxTicksToWait = ( TickType_t ) 0;
    1a0a:	fb 01       	movw	r30, r22
    1a0c:	11 82       	std	Z+1, r1	; 0x01
    1a0e:	10 82       	st	Z, r1
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
    1a10:	81 e0       	ldi	r24, 0x01	; 1
            *pxTicksToWait = ( TickType_t ) 0;
    1a12:	11 c0       	rjmp	.+34     	; 0x1a36 <xTaskCheckForTimeOut+0x5a>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    1a14:	eb 01       	movw	r28, r22
    1a16:	28 81       	ld	r18, Y
    1a18:	39 81       	ldd	r19, Y+1	; 0x01
    1a1a:	a2 17       	cp	r26, r18
    1a1c:	b3 07       	cpc	r27, r19
    1a1e:	40 f4       	brcc	.+16     	; 0x1a30 <xTaskCheckForTimeOut+0x54>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
    1a20:	2a 1b       	sub	r18, r26
    1a22:	3b 0b       	sbc	r19, r27
    1a24:	39 83       	std	Y+1, r19	; 0x01
    1a26:	28 83       	st	Y, r18
            vTaskInternalSetTimeOutState( pxTimeOut );
    1a28:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	03 c0       	rjmp	.+6      	; 0x1a36 <xTaskCheckForTimeOut+0x5a>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
    1a30:	19 82       	std	Y+1, r1	; 0x01
    1a32:	18 82       	st	Y, r1
            xReturn = pdTRUE;
    1a34:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    taskEXIT_CRITICAL();
    1a36:	0f 90       	pop	r0
    1a38:	0f be       	out	0x3f, r0	; 63

    return xReturn;
}
    1a3a:	df 91       	pop	r29
    1a3c:	cf 91       	pop	r28
    1a3e:	08 95       	ret

00001a40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    xYieldPending = pdTRUE;
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	80 93 b6 06 	sts	0x06B6, r24	; 0x8006b6 <xYieldPending>
    1a46:	08 95       	ret

00001a48 <WDT_voidEnable>:
#include "GIE_interface.h"


void WDT_voidEnable (void)
{
	SET_BIT(WDTCR_REG , WDTCR_WDE);
    1a48:	81 b5       	in	r24, 0x21	; 33
    1a4a:	88 60       	ori	r24, 0x08	; 8
    1a4c:	81 bd       	out	0x21, r24	; 33
    1a4e:	08 95       	ret

00001a50 <WDT_voidSleep>:
}

void WDT_voidSleep(void)
{
	/* CLear The Pre_scaler bits */
	WDTCR_REG &= WDT_PRESCALE_MASKING;
    1a50:	81 b5       	in	r24, 0x21	; 33
    1a52:	88 7f       	andi	r24, 0xF8	; 248
    1a54:	81 bd       	out	0x21, r24	; 33

	/* Set The required pre_scaller */
	WDTCR_REG |= WDT_PRESCALER;
    1a56:	81 b5       	in	r24, 0x21	; 33
    1a58:	87 60       	ori	r24, 0x07	; 7
    1a5a:	81 bd       	out	0x21, r24	; 33
    1a5c:	08 95       	ret

00001a5e <__udivmodhi4>:
    1a5e:	aa 1b       	sub	r26, r26
    1a60:	bb 1b       	sub	r27, r27
    1a62:	51 e1       	ldi	r21, 0x11	; 17
    1a64:	07 c0       	rjmp	.+14     	; 0x1a74 <__udivmodhi4_ep>

00001a66 <__udivmodhi4_loop>:
    1a66:	aa 1f       	adc	r26, r26
    1a68:	bb 1f       	adc	r27, r27
    1a6a:	a6 17       	cp	r26, r22
    1a6c:	b7 07       	cpc	r27, r23
    1a6e:	10 f0       	brcs	.+4      	; 0x1a74 <__udivmodhi4_ep>
    1a70:	a6 1b       	sub	r26, r22
    1a72:	b7 0b       	sbc	r27, r23

00001a74 <__udivmodhi4_ep>:
    1a74:	88 1f       	adc	r24, r24
    1a76:	99 1f       	adc	r25, r25
    1a78:	5a 95       	dec	r21
    1a7a:	a9 f7       	brne	.-22     	; 0x1a66 <__udivmodhi4_loop>
    1a7c:	80 95       	com	r24
    1a7e:	90 95       	com	r25
    1a80:	bc 01       	movw	r22, r24
    1a82:	cd 01       	movw	r24, r26
    1a84:	08 95       	ret

00001a86 <memcpy>:
    1a86:	fb 01       	movw	r30, r22
    1a88:	dc 01       	movw	r26, r24
    1a8a:	02 c0       	rjmp	.+4      	; 0x1a90 <memcpy+0xa>
    1a8c:	01 90       	ld	r0, Z+
    1a8e:	0d 92       	st	X+, r0
    1a90:	41 50       	subi	r20, 0x01	; 1
    1a92:	50 40       	sbci	r21, 0x00	; 0
    1a94:	d8 f7       	brcc	.-10     	; 0x1a8c <memcpy+0x6>
    1a96:	08 95       	ret

00001a98 <_exit>:
    1a98:	f8 94       	cli

00001a9a <__stop_program>:
    1a9a:	ff cf       	rjmp	.-2      	; 0x1a9a <__stop_program>
